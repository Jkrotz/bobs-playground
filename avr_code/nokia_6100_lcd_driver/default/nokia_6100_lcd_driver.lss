
nokia_6100_lcd_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000720  00800100  00002484  00002518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000026d0  00800820  00800820  00002c38  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f5  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c5f  00000000  00000000  0000310d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001551  00000000  00000000  00005d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001863  00000000  00000000  000072bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00008b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f8  00000000  00000000  00008de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001400  00000000  00000000  000093d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0000a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	da e0       	ldi	r29, 0x0A	; 10
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	18 e0       	ldi	r17, 0x08	; 8
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	e4 e8       	ldi	r30, 0x84	; 132
     10c:	f4 e2       	ldi	r31, 0x24	; 36
     10e:	02 c0       	rjmp	.+4      	; 0x114 <.do_copy_data_start>

00000110 <.do_copy_data_loop>:
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0

00000114 <.do_copy_data_start>:
     114:	a0 32       	cpi	r26, 0x20	; 32
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <.do_copy_data_loop>

0000011a <__do_clear_bss>:
     11a:	1e e2       	ldi	r17, 0x2E	; 46
     11c:	a0 e2       	ldi	r26, 0x20	; 32
     11e:	b8 e0       	ldi	r27, 0x08	; 8
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a0 3f       	cpi	r26, 0xF0	; 240
     126:	b1 07       	cpc	r27, r17
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 c8 00 	call	0x190	; 0x190 <main>
     12e:	0c 94 40 12 	jmp	0x2480	; 0x2480 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <randColor>:
			y += dy;
		}
	}
}

static int randColor() {
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
	int c = 0;
	while(!c) {
		c =
     13e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rand>
     142:	80 fd       	sbrc	r24, 0
     144:	03 c0       	rjmp	.+6      	; 0x14c <randColor+0x16>
     146:	00 e0       	ldi	r16, 0x00	; 0
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	02 c0       	rjmp	.+4      	; 0x150 <randColor+0x1a>
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	1f e0       	ldi	r17, 0x0F	; 15
     150:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rand>
     154:	80 fd       	sbrc	r24, 0
     156:	03 c0       	rjmp	.+6      	; 0x15e <randColor+0x28>
     158:	c0 e0       	ldi	r28, 0x00	; 0
     15a:	d0 e0       	ldi	r29, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <randColor+0x2c>
     15e:	c0 ef       	ldi	r28, 0xF0	; 240
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rand>
     166:	80 fd       	sbrc	r24, 0
     168:	03 c0       	rjmp	.+6      	; 0x170 <randColor+0x3a>
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <randColor+0x3e>
     170:	8f e0       	ldi	r24, 0x0F	; 15
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	9e 01       	movw	r18, r28
     176:	20 0f       	add	r18, r16
     178:	31 1f       	adc	r19, r17
     17a:	28 0f       	add	r18, r24
     17c:	39 1f       	adc	r19, r25
	}
}

static int randColor() {
	int c = 0;
	while(!c) {
     17e:	21 15       	cp	r18, r1
     180:	31 05       	cpc	r19, r1
     182:	e9 f2       	breq	.-70     	; 0x13e <randColor+0x8>
			((rand() & 1) ? 0xf00 : 0) +
			((rand() & 1) ? 0x0f0 : 0) +
			((rand() & 1) ? 0x00f : 0);
	}
	return c;
}
     184:	c9 01       	movw	r24, r18
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <main>:

int main() {
     190:	2f 92       	push	r2
     192:	3f 92       	push	r3
     194:	4f 92       	push	r4
     196:	5f 92       	push	r5
     198:	6f 92       	push	r6
     19a:	7f 92       	push	r7
     19c:	8f 92       	push	r8
     19e:	9f 92       	push	r9
     1a0:	af 92       	push	r10
     1a2:	bf 92       	push	r11
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ef 97       	sbiw	r28, 0x3f	; 63
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
	sysInit();
     1c4:	0e 94 1f 08 	call	0x103e	; 0x103e <sysInit>
	LCDInitController();
     1c8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <LCDInitController>
     1cc:	00 e2       	ldi	r16, 0x20	; 32
     1ce:	18 e0       	ldi	r17, 0x08	; 8

	for(int i=0; i<64; i++) checkers[i] = randColor();
     1d0:	0e 94 9b 00 	call	0x136	; 0x136 <randColor>
     1d4:	d8 01       	movw	r26, r16
     1d6:	8d 93       	st	X+, r24
     1d8:	9d 93       	st	X+, r25
     1da:	8d 01       	movw	r16, r26
     1dc:	b8 e0       	ldi	r27, 0x08	; 8
     1de:	00 3a       	cpi	r16, 0xA0	; 160
     1e0:	1b 07       	cpc	r17, r27
     1e2:	b1 f7       	brne	.-20     	; 0x1d0 <main+0x40>
static int sphere_top;

static void initSphere() {
	float costilt = cos(TILT);
	float sintilt = sin(TILT);
	sphere_top = ORIGIN_Y - (float)SPHEREDIAM / 2.0 * (1.0 + sin(TILT));
     1e4:	88 e1       	ldi	r24, 0x18	; 24
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	90 93 e9 2e 	sts	0x2EE9, r25
     1ec:	80 93 e8 2e 	sts	0x2EE8, r24
     1f0:	1b a6       	std	Y+43, r1	; 0x2b
     1f2:	1a a6       	std	Y+42, r1	; 0x2a
     1f4:	1f 82       	std	Y+7, r1	; 0x07
     1f6:	1e 82       	std	Y+6, r1	; 0x06
	int p = 0;
	for(int yi=0; yi<SPHEREDIAM; yi++) {
		float yf = 2.0 * (0.5 - (float)yi / (float)(SPHEREDIAM-1));
     1f8:	ea a5       	ldd	r30, Y+42	; 0x2a
     1fa:	fb a5       	ldd	r31, Y+43	; 0x2b
     1fc:	bf 01       	movw	r22, r30
     1fe:	88 27       	eor	r24, r24
     200:	77 fd       	sbrc	r23, 7
     202:	80 95       	com	r24
     204:	98 2f       	mov	r25, r24
     206:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	4a e8       	ldi	r20, 0x8A	; 138
     210:	52 ec       	ldi	r21, 0xC2	; 194
     212:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	5f e3       	ldi	r21, 0x3F	; 63
     21e:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     222:	9b 01       	movw	r18, r22
     224:	ac 01       	movw	r20, r24
     226:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     22a:	6c a7       	std	Y+44, r22	; 0x2c
     22c:	7d a7       	std	Y+45, r23	; 0x2d
     22e:	8e a7       	std	Y+46, r24	; 0x2e
     230:	9f a7       	std	Y+47, r25	; 0x2f
		for(int xi=0; xi<SPHEREDIAM; xi++) {
			float xf = 2.0 * ((float)xi / (float)(SPHEREDIAM-1) - 0.5);
			float x2y2 = xf*xf + yf*yf;
     232:	9b 01       	movw	r18, r22
     234:	ac 01       	movw	r20, r24
     236:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     23a:	6e a3       	std	Y+38, r22	; 0x26
     23c:	7f a3       	std	Y+39, r23	; 0x27
     23e:	88 a7       	std	Y+40, r24	; 0x28
     240:	99 a7       	std	Y+41, r25	; 0x29
     242:	2e 80       	ldd	r2, Y+6	; 0x06
     244:	3f 80       	ldd	r3, Y+7	; 0x07
     246:	22 0c       	add	r2, r2
     248:	33 1c       	adc	r3, r3
     24a:	20 ea       	ldi	r18, 0xA0	; 160
     24c:	38 e0       	ldi	r19, 0x08	; 8
     24e:	22 0e       	add	r2, r18
     250:	33 1e       	adc	r3, r19
     252:	19 aa       	std	Y+49, r1	; 0x31
     254:	18 aa       	std	Y+48, r1	; 0x30
	sphere_top = ORIGIN_Y - (float)SPHEREDIAM / 2.0 * (1.0 + sin(TILT));
	int p = 0;
	for(int yi=0; yi<SPHEREDIAM; yi++) {
		float yf = 2.0 * (0.5 - (float)yi / (float)(SPHEREDIAM-1));
		for(int xi=0; xi<SPHEREDIAM; xi++) {
			float xf = 2.0 * ((float)xi / (float)(SPHEREDIAM-1) - 0.5);
     256:	a8 a9       	ldd	r26, Y+48	; 0x30
     258:	b9 a9       	ldd	r27, Y+49	; 0x31
     25a:	bd 01       	movw	r22, r26
     25c:	88 27       	eor	r24, r24
     25e:	77 fd       	sbrc	r23, 7
     260:	80 95       	com	r24
     262:	98 2f       	mov	r25, r24
     264:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	4a e8       	ldi	r20, 0x8A	; 138
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	5f e3       	ldi	r21, 0x3F	; 63
     27c:	0e 94 97 09 	call	0x132e	; 0x132e <__subsf3>
     280:	9b 01       	movw	r18, r22
     282:	ac 01       	movw	r20, r24
     284:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     288:	5b 01       	movw	r10, r22
     28a:	6c 01       	movw	r12, r24
			float x2y2 = xf*xf + yf*yf;
     28c:	a6 01       	movw	r20, r12
     28e:	95 01       	movw	r18, r10
     290:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     294:	6a a3       	std	Y+34, r22	; 0x22
     296:	7b a3       	std	Y+35, r23	; 0x23
     298:	8c a3       	std	Y+36, r24	; 0x24
     29a:	9d a3       	std	Y+37, r25	; 0x25
     29c:	2e a1       	ldd	r18, Y+38	; 0x26
     29e:	3f a1       	ldd	r19, Y+39	; 0x27
     2a0:	48 a5       	ldd	r20, Y+40	; 0x28
     2a2:	59 a5       	ldd	r21, Y+41	; 0x29
     2a4:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     2a8:	7b 01       	movw	r14, r22
     2aa:	8c 01       	movw	r16, r24
			if(x2y2 > 1.0) {
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	40 e8       	ldi	r20, 0x80	; 128
     2b2:	5f e3       	ldi	r21, 0x3F	; 63
     2b4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__gtsf2>
     2b8:	18 16       	cp	r1, r24
     2ba:	24 f4       	brge	.+8      	; 0x2c4 <main+0x134>
				spheredata[p++] = 0;
     2bc:	f1 01       	movw	r30, r2
     2be:	11 82       	std	Z+1, r1	; 0x01
     2c0:	10 82       	st	Z, r1
     2c2:	db c0       	rjmp	.+438    	; 0x47a <main+0x2ea>
				continue;
			}
			float zf = sqrt(1.0 - x2y2);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	80 e8       	ldi	r24, 0x80	; 128
     2ca:	9f e3       	ldi	r25, 0x3F	; 63
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	0e 94 97 09 	call	0x132e	; 0x132e <__subsf3>
     2d4:	0e 94 1d 11 	call	0x223a	; 0x223a <sqrt>
     2d8:	2b 01       	movw	r4, r22
     2da:	3c 01       	movw	r6, r24

			float xr = xf;
			float yr = costilt*yf + -sintilt*zf;
     2dc:	6c a5       	ldd	r22, Y+44	; 0x2c
     2de:	7d a5       	ldd	r23, Y+45	; 0x2d
     2e0:	8e a5       	ldd	r24, Y+46	; 0x2e
     2e2:	9f a5       	ldd	r25, Y+47	; 0x2f
     2e4:	21 e4       	ldi	r18, 0x41	; 65
     2e6:	3e e2       	ldi	r19, 0x2E	; 46
     2e8:	43 e2       	ldi	r20, 0x23	; 35
     2ea:	5f e3       	ldi	r21, 0x3F	; 63
     2ec:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     2f0:	7b 01       	movw	r14, r22
     2f2:	8c 01       	movw	r16, r24
     2f4:	c3 01       	movw	r24, r6
     2f6:	b2 01       	movw	r22, r4
     2f8:	23 e5       	ldi	r18, 0x53	; 83
     2fa:	30 e4       	ldi	r19, 0x40	; 64
     2fc:	45 e4       	ldi	r20, 0x45	; 69
     2fe:	5f eb       	ldi	r21, 0xBF	; 191
     300:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	c8 01       	movw	r24, r16
     30a:	b7 01       	movw	r22, r14
     30c:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     310:	6a ab       	std	Y+50, r22	; 0x32
     312:	7b ab       	std	Y+51, r23	; 0x33
     314:	8c ab       	std	Y+52, r24	; 0x34
     316:	9d ab       	std	Y+53, r25	; 0x35
			float zr = sintilt*yf +  costilt*zf;
			x2y2 = xr*xr + yr*yr;
			float lat = atan2(zr, x2y2);
			float lon = atan2(yr, xr);
     318:	a6 01       	movw	r20, r12
     31a:	95 01       	movw	r18, r10
     31c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <atan2>
			int tex_i = (lon / 2.0 / 3.14159) * (float)SPHERE_TEXW;
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	5f e3       	ldi	r21, 0x3F	; 63
     328:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     32c:	20 ed       	ldi	r18, 0xD0	; 208
     32e:	3f e0       	ldi	r19, 0x0F	; 15
     330:	49 e4       	ldi	r20, 0x49	; 73
     332:	50 e4       	ldi	r21, 0x40	; 64
     334:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	53 e4       	ldi	r21, 0x43	; 67
     340:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     344:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     348:	4b 01       	movw	r8, r22
			if(tex_i < 0) tex_i += SPHERE_TEXW;
     34a:	77 ff       	sbrs	r23, 7
     34c:	04 c0       	rjmp	.+8      	; 0x356 <main+0x1c6>
     34e:	20 e8       	ldi	r18, 0x80	; 128
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	82 0e       	add	r8, r18
     354:	93 1e       	adc	r9, r19
			int tex_j = (-lat / 3.14159 + 0.5) * (float)SPHERE_TEXH;
			float shadef = (2.0*zf + yf + xf) / sqrt(4);
     356:	c3 01       	movw	r24, r6
     358:	b2 01       	movw	r22, r4
     35a:	a3 01       	movw	r20, r6
     35c:	92 01       	movw	r18, r4
     35e:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     362:	2c a5       	ldd	r18, Y+44	; 0x2c
     364:	3d a5       	ldd	r19, Y+45	; 0x2d
     366:	4e a5       	ldd	r20, Y+46	; 0x2e
     368:	5f a5       	ldd	r21, Y+47	; 0x2f
     36a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     36e:	a6 01       	movw	r20, r12
     370:	95 01       	movw	r18, r10
     372:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     382:	7b 01       	movw	r14, r22
     384:	8c 01       	movw	r16, r24
			shadef = shadef*shadef*shadef;
     386:	a8 01       	movw	r20, r16
     388:	97 01       	movw	r18, r14
     38a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
			int shade = (int)(shadef * 7.0);
     38e:	a8 01       	movw	r20, r16
     390:	97 01       	movw	r18, r14
     392:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 ee       	ldi	r20, 0xE0	; 224
     39c:	50 e4       	ldi	r21, 0x40	; 64
     39e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     3a2:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     3a6:	6b 01       	movw	r12, r22
			if(shade < 1) shade = 1;
     3a8:	16 16       	cp	r1, r22
     3aa:	17 06       	cpc	r1, r23
     3ac:	24 f0       	brlt	.+8      	; 0x3b6 <main+0x226>
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	c4 2e       	mov	r12, r20
     3b2:	d1 2c       	mov	r13, r1
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <main+0x232>
			if(shade > 7) shade = 7;
     3b6:	68 30       	cpi	r22, 0x08	; 8
     3b8:	71 05       	cpc	r23, r1
     3ba:	1c f0       	brlt	.+6      	; 0x3c2 <main+0x232>
     3bc:	37 e0       	ldi	r19, 0x07	; 7
     3be:	c3 2e       	mov	r12, r19
     3c0:	d1 2c       	mov	r13, r1

			float xr = xf;
			float yr = costilt*yf + -sintilt*zf;
			float zr = sintilt*yf +  costilt*zf;
			x2y2 = xr*xr + yr*yr;
			float lat = atan2(zr, x2y2);
     3c2:	6c a5       	ldd	r22, Y+44	; 0x2c
     3c4:	7d a5       	ldd	r23, Y+45	; 0x2d
     3c6:	8e a5       	ldd	r24, Y+46	; 0x2e
     3c8:	9f a5       	ldd	r25, Y+47	; 0x2f
     3ca:	23 e5       	ldi	r18, 0x53	; 83
     3cc:	30 e4       	ldi	r19, 0x40	; 64
     3ce:	45 e4       	ldi	r20, 0x45	; 69
     3d0:	5f e3       	ldi	r21, 0x3F	; 63
     3d2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     3d6:	7b 01       	movw	r14, r22
     3d8:	8c 01       	movw	r16, r24
     3da:	c3 01       	movw	r24, r6
     3dc:	b2 01       	movw	r22, r4
     3de:	21 e4       	ldi	r18, 0x41	; 65
     3e0:	3e e2       	ldi	r19, 0x2E	; 46
     3e2:	43 e2       	ldi	r20, 0x23	; 35
     3e4:	5f e3       	ldi	r21, 0x3F	; 63
     3e6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     3ea:	9b 01       	movw	r18, r22
     3ec:	ac 01       	movw	r20, r24
     3ee:	c8 01       	movw	r24, r16
     3f0:	b7 01       	movw	r22, r14
     3f2:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	6a a9       	ldd	r22, Y+50	; 0x32
     3fc:	7b a9       	ldd	r23, Y+51	; 0x33
     3fe:	8c a9       	ldd	r24, Y+52	; 0x34
     400:	9d a9       	ldd	r25, Y+53	; 0x35
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     40a:	9b 01       	movw	r18, r22
     40c:	ac 01       	movw	r20, r24
     40e:	6a a1       	ldd	r22, Y+34	; 0x22
     410:	7b a1       	ldd	r23, Y+35	; 0x23
     412:	8c a1       	ldd	r24, Y+36	; 0x24
     414:	9d a1       	ldd	r25, Y+37	; 0x25
     416:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     41a:	9b 01       	movw	r18, r22
     41c:	ac 01       	movw	r20, r24
     41e:	c8 01       	movw	r24, r16
     420:	b7 01       	movw	r22, r14
     422:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <atan2>
			float shadef = (2.0*zf + yf + xf) / sqrt(4);
			shadef = shadef*shadef*shadef;
			int shade = (int)(shadef * 7.0);
			if(shade < 1) shade = 1;
			if(shade > 7) shade = 7;
			spheredata[p++] = 
     426:	af e7       	ldi	r26, 0x7F	; 127
     428:	8a 22       	and	r8, r26
     42a:	99 24       	eor	r9, r9
     42c:	20 ed       	ldi	r18, 0xD0	; 208
     42e:	3f e0       	ldi	r19, 0x0F	; 15
     430:	49 e4       	ldi	r20, 0x49	; 73
     432:	50 ec       	ldi	r21, 0xC0	; 192
     434:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	5f e3       	ldi	r21, 0x3F	; 63
     440:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e8       	ldi	r20, 0x80	; 128
     44a:	52 e4       	ldi	r21, 0x42	; 66
     44c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     450:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     454:	6f 73       	andi	r22, 0x3F	; 63
     456:	70 70       	andi	r23, 0x00	; 0
     458:	76 95       	lsr	r23
     45a:	76 2f       	mov	r23, r22
     45c:	66 27       	eor	r22, r22
     45e:	77 95       	ror	r23
     460:	67 95       	ror	r22
     462:	86 2a       	or	r8, r22
     464:	97 2a       	or	r9, r23
     466:	90 e2       	ldi	r25, 0x20	; 32
     468:	c9 9e       	mul	r12, r25
     46a:	d0 2c       	mov	r13, r0
     46c:	cc 24       	eor	r12, r12
     46e:	11 24       	eor	r1, r1
     470:	8c 28       	or	r8, r12
     472:	9d 28       	or	r9, r13
     474:	f1 01       	movw	r30, r2
     476:	91 82       	std	Z+1, r9	; 0x01
     478:	80 82       	st	Z, r8
	float sintilt = sin(TILT);
	sphere_top = ORIGIN_Y - (float)SPHEREDIAM / 2.0 * (1.0 + sin(TILT));
	int p = 0;
	for(int yi=0; yi<SPHEREDIAM; yi++) {
		float yf = 2.0 * (0.5 - (float)yi / (float)(SPHEREDIAM-1));
		for(int xi=0; xi<SPHEREDIAM; xi++) {
     47a:	28 a9       	ldd	r18, Y+48	; 0x30
     47c:	39 a9       	ldd	r19, Y+49	; 0x31
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	39 ab       	std	Y+49, r19	; 0x31
     484:	28 ab       	std	Y+48, r18	; 0x30
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	28 0e       	add	r2, r24
     48c:	39 1e       	adc	r3, r25
     48e:	26 34       	cpi	r18, 0x46	; 70
     490:	31 05       	cpc	r19, r1
     492:	09 f0       	breq	.+2      	; 0x496 <main+0x306>
     494:	e0 ce       	rjmp	.-576    	; 0x256 <main+0xc6>
static void initSphere() {
	float costilt = cos(TILT);
	float sintilt = sin(TILT);
	sphere_top = ORIGIN_Y - (float)SPHEREDIAM / 2.0 * (1.0 + sin(TILT));
	int p = 0;
	for(int yi=0; yi<SPHEREDIAM; yi++) {
     496:	aa a5       	ldd	r26, Y+42	; 0x2a
     498:	bb a5       	ldd	r27, Y+43	; 0x2b
     49a:	11 96       	adiw	r26, 0x01	; 1
     49c:	bb a7       	std	Y+43, r27	; 0x2b
     49e:	aa a7       	std	Y+42, r26	; 0x2a
     4a0:	ee 81       	ldd	r30, Y+6	; 0x06
     4a2:	ff 81       	ldd	r31, Y+7	; 0x07
     4a4:	ea 5b       	subi	r30, 0xBA	; 186
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	ff 83       	std	Y+7, r31	; 0x07
     4aa:	ee 83       	std	Y+6, r30	; 0x06
     4ac:	a6 34       	cpi	r26, 0x46	; 70
     4ae:	b1 05       	cpc	r27, r1
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <main+0x324>
     4b2:	a2 ce       	rjmp	.-700    	; 0x1f8 <main+0x68>
};

static void drawHex8(int n, int x, int y) {
	static const char *hexchars = "0123456789ABCDEF";
	char hex[3];
	hex[0] = hexchars[(n>>4) & 0xf];
     4b4:	20 91 31 05 	lds	r18, 0x0531
     4b8:	30 91 32 05 	lds	r19, 0x0532
     4bc:	3f ab       	std	Y+55, r19	; 0x37
     4be:	2e ab       	std	Y+54, r18	; 0x36
     4c0:	19 ae       	std	Y+57, r1	; 0x39
     4c2:	18 ae       	std	Y+56, r1	; 0x38
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	4f 2e       	mov	r4, r31
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	5f 2e       	mov	r5, r31
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	6f 2e       	mov	r6, r31
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	7f 2e       	mov	r7, r31
     4d6:	f0 2d       	mov	r31, r0
	return x + y;
}

static void drawCheckers(float theta, float scale) {
	float overspin = -4.0; // must be an integer because of modulus on theta
	int sphererot = (int)((overspin * theta / 2.0 / 3.14159) * (float)SPHERE_TEXW);
     4d8:	c3 01       	movw	r24, r6
     4da:	b2 01       	movw	r22, r4
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e8       	ldi	r20, 0x80	; 128
     4e2:	50 ec       	ldi	r21, 0xC0	; 192
     4e4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     4f4:	20 ed       	ldi	r18, 0xD0	; 208
     4f6:	3f e0       	ldi	r19, 0x0F	; 15
     4f8:	49 e4       	ldi	r20, 0x49	; 73
     4fa:	50 e4       	ldi	r21, 0x40	; 64
     4fc:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	53 e4       	ldi	r21, 0x43	; 67
     508:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     50c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     510:	7d 87       	std	Y+13, r23	; 0x0d
     512:	6c 87       	std	Y+12, r22	; 0x0c

	float dxdi = ( cos(theta)) / scale;
     514:	c3 01       	movw	r24, r6
     516:	b2 01       	movw	r22, r4
     518:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <cos>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     528:	6e 87       	std	Y+14, r22	; 0x0e
     52a:	7f 87       	std	Y+15, r23	; 0x0f
     52c:	88 8b       	std	Y+16, r24	; 0x10
     52e:	99 8b       	std	Y+17, r25	; 0x11
	float dydi = ( sin(theta)) / scale;
     530:	c3 01       	movw	r24, r6
     532:	b2 01       	movw	r22, r4
     534:	0e 94 13 11 	call	0x2226	; 0x2226 <sin>
     538:	7b 01       	movw	r14, r22
     53a:	8c 01       	movw	r16, r24
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	5f e3       	ldi	r21, 0x3F	; 63
     544:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     548:	6a 8b       	std	Y+18, r22	; 0x12
     54a:	7b 8b       	std	Y+19, r23	; 0x13
     54c:	8c 8b       	std	Y+20, r24	; 0x14
     54e:	9d 8b       	std	Y+21, r25	; 0x15
	float dxdj = (-sin(theta)) / scale;
     550:	17 fb       	bst	r17, 7
     552:	10 95       	com	r17
     554:	17 f9       	bld	r17, 7
     556:	10 95       	com	r17
     558:	c8 01       	movw	r24, r16
     55a:	b7 01       	movw	r22, r14
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	5f e3       	ldi	r21, 0x3F	; 63
     564:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     568:	6e 8b       	std	Y+22, r22	; 0x16
     56a:	7f 8b       	std	Y+23, r23	; 0x17
     56c:	88 8f       	std	Y+24, r24	; 0x18
     56e:	99 8f       	std	Y+25, r25	; 0x19
	float dydj = ( cos(theta)) / scale;

	LCDWriteWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	41 e8       	ldi	r20, 0x81	; 129
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	21 e8       	ldi	r18, 0x81	; 129
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	0e 94 57 05 	call	0xaae	; 0xaae <LCDWriteWindow>
     584:	22 24       	eor	r2, r2
     586:	33 24       	eor	r3, r3
     588:	1d 82       	std	Y+5, r1	; 0x05
     58a:	1c 82       	std	Y+4, r1	; 0x04
     58c:	88 24       	eor	r8, r8
     58e:	99 24       	eor	r9, r9
				if(shade) {
					shade += 8;
					shade *= 0x111;
					int tex_j = ((dat >> 7) & 0x3f);
					int tex_i = (dat & 0x7f);
					tex_i += sphererot;
     590:	8c 85       	ldd	r24, Y+12	; 0x0c
     592:	9d 85       	ldd	r25, Y+13	; 0x0d
     594:	80 5c       	subi	r24, 0xC0	; 192
     596:	9f 4f       	sbci	r25, 0xFF	; 255
     598:	9f af       	std	Y+63, r25	; 0x3f
     59a:	8e af       	std	Y+62, r24	; 0x3e

	int prev_pix = 0;
	int pix_toggle = 0;
	for(int j=0; j<LCD_HEIGHT; j++) {
		float jf = ((float)(ORIGIN_Y - j) / (float)LCD_HEIGHT);
		float depth = plane_a * plane_z0 / (plane_a - plane_b * jf);
     59c:	66 e5       	ldi	r22, 0x56	; 86
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	62 19       	sub	r22, r2
     5a2:	73 09       	sbc	r23, r3
     5a4:	88 27       	eor	r24, r24
     5a6:	77 fd       	sbrc	r23, 7
     5a8:	80 95       	com	r24
     5aa:	98 2f       	mov	r25, r24
     5ac:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__floatsisf>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	53 e4       	ldi	r21, 0x43	; 67
     5b8:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     5bc:	23 e5       	ldi	r18, 0x53	; 83
     5be:	30 e4       	ldi	r19, 0x40	; 64
     5c0:	45 e4       	ldi	r20, 0x45	; 69
     5c2:	5f e3       	ldi	r21, 0x3F	; 63
     5c4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	61 e4       	ldi	r22, 0x41	; 65
     5ce:	7e e2       	ldi	r23, 0x2E	; 46
     5d0:	83 e2       	ldi	r24, 0x23	; 35
     5d2:	9f e3       	ldi	r25, 0x3F	; 63
     5d4:	0e 94 97 09 	call	0x132e	; 0x132e <__subsf3>
     5d8:	9b 01       	movw	r18, r22
     5da:	ac 01       	movw	r20, r24
     5dc:	61 e4       	ldi	r22, 0x41	; 65
     5de:	7e e2       	ldi	r23, 0x2E	; 46
     5e0:	83 ea       	ldi	r24, 0xA3	; 163
     5e2:	9e e3       	ldi	r25, 0x3E	; 62
     5e4:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     5e8:	5b 01       	movw	r10, r22
     5ea:	6c 01       	movw	r12, r24
		float plane_y = (depth - plane_z0) / plane_b;
		float plane_dx = depth / (float)LCD_HEIGHT;
		int16_t x = (32768.0 * plane_y * dxdj);
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	0e 94 97 09 	call	0x132e	; 0x132e <__subsf3>
     5f8:	23 e5       	ldi	r18, 0x53	; 83
     5fa:	30 e4       	ldi	r19, 0x40	; 64
     5fc:	45 e4       	ldi	r20, 0x45	; 69
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	57 e4       	ldi	r21, 0x47	; 71
     60c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     610:	68 87       	std	Y+8, r22	; 0x08
     612:	79 87       	std	Y+9, r23	; 0x09
     614:	8a 87       	std	Y+10, r24	; 0x0a
     616:	9b 87       	std	Y+11, r25	; 0x0b
		int16_t y = (32768.0 * plane_y * dydj);
		int16_t dx = (32768.0 * plane_dx * dxdi);
     618:	c6 01       	movw	r24, r12
     61a:	b5 01       	movw	r22, r10
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	42 e0       	ldi	r20, 0x02	; 2
     622:	53 e4       	ldi	r21, 0x43	; 67
     624:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	57 e4       	ldi	r21, 0x47	; 71
     630:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     634:	7b 01       	movw	r14, r22
     636:	8c 01       	movw	r16, r24
     638:	2e 85       	ldd	r18, Y+14	; 0x0e
     63a:	3f 85       	ldd	r19, Y+15	; 0x0f
     63c:	48 89       	ldd	r20, Y+16	; 0x10
     63e:	59 89       	ldd	r21, Y+17	; 0x11
     640:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     644:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     648:	7b 8f       	std	Y+27, r23	; 0x1b
     64a:	6a 8f       	std	Y+26, r22	; 0x1a
		int16_t dy = (32768.0 * plane_dx * dydi);
     64c:	c8 01       	movw	r24, r16
     64e:	b7 01       	movw	r22, r14
     650:	2a 89       	ldd	r18, Y+18	; 0x12
     652:	3b 89       	ldd	r19, Y+19	; 0x13
     654:	4c 89       	ldd	r20, Y+20	; 0x14
     656:	5d 89       	ldd	r21, Y+21	; 0x15
     658:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     65c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     660:	7d 8f       	std	Y+29, r23	; 0x1d
     662:	6c 8f       	std	Y+28, r22	; 0x1c
		x -= (LCD_WIDTH/2) * dx;
		y -= (LCD_WIDTH/2) * dy;
		int shade = 15 - (int)(depth * 7.0);
     664:	c6 01       	movw	r24, r12
     666:	b5 01       	movw	r22, r10
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 ee       	ldi	r20, 0xE0	; 224
     66e:	50 e4       	ldi	r21, 0x40	; 64
     670:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     674:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
     678:	0f e0       	ldi	r16, 0x0F	; 15
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	06 1b       	sub	r16, r22
     67e:	17 0b       	sbc	r17, r23
		if(shade < 0) shade = 0;
     680:	17 ff       	sbrs	r17, 7
     682:	03 c0       	rjmp	.+6      	; 0x68a <main+0x4fa>
     684:	00 e0       	ldi	r16, 0x00	; 0
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	05 c0       	rjmp	.+10     	; 0x694 <main+0x504>
		if(shade > 15) shade = 15;
     68a:	00 31       	cpi	r16, 0x10	; 16
     68c:	11 05       	cpc	r17, r1
     68e:	14 f0       	brlt	.+4      	; 0x694 <main+0x504>
     690:	0f e0       	ldi	r16, 0x0F	; 15
     692:	10 e0       	ldi	r17, 0x00	; 0
	for(int j=0; j<LCD_HEIGHT; j++) {
		float jf = ((float)(ORIGIN_Y - j) / (float)LCD_HEIGHT);
		float depth = plane_a * plane_z0 / (plane_a - plane_b * jf);
		float plane_y = (depth - plane_z0) / plane_b;
		float plane_dx = depth / (float)LCD_HEIGHT;
		int16_t x = (32768.0 * plane_y * dxdj);
     694:	68 85       	ldd	r22, Y+8	; 0x08
     696:	79 85       	ldd	r23, Y+9	; 0x09
     698:	8a 85       	ldd	r24, Y+10	; 0x0a
     69a:	9b 85       	ldd	r25, Y+11	; 0x0b
     69c:	2e 89       	ldd	r18, Y+22	; 0x16
     69e:	3f 89       	ldd	r19, Y+23	; 0x17
     6a0:	48 8d       	ldd	r20, Y+24	; 0x18
     6a2:	59 8d       	ldd	r21, Y+25	; 0x19
     6a4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     6a8:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
		int16_t y = (32768.0 * plane_y * dydj);
		int16_t dx = (32768.0 * plane_dx * dxdi);
		int16_t dy = (32768.0 * plane_dx * dydi);
		x -= (LCD_WIDTH/2) * dx;
     6ac:	aa 8d       	ldd	r26, Y+26	; 0x1a
     6ae:	bb 8d       	ldd	r27, Y+27	; 0x1b
     6b0:	ef eb       	ldi	r30, 0xBF	; 191
     6b2:	ff ef       	ldi	r31, 0xFF	; 255
     6b4:	ae 9f       	mul	r26, r30
     6b6:	60 01       	movw	r12, r0
     6b8:	af 9f       	mul	r26, r31
     6ba:	d0 0c       	add	r13, r0
     6bc:	be 9f       	mul	r27, r30
     6be:	d0 0c       	add	r13, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	c6 0e       	add	r12, r22
     6c4:	d7 1e       	adc	r13, r23
		float jf = ((float)(ORIGIN_Y - j) / (float)LCD_HEIGHT);
		float depth = plane_a * plane_z0 / (plane_a - plane_b * jf);
		float plane_y = (depth - plane_z0) / plane_b;
		float plane_dx = depth / (float)LCD_HEIGHT;
		int16_t x = (32768.0 * plane_y * dxdj);
		int16_t y = (32768.0 * plane_y * dydj);
     6c6:	68 85       	ldd	r22, Y+8	; 0x08
     6c8:	79 85       	ldd	r23, Y+9	; 0x09
     6ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     6cc:	9b 85       	ldd	r25, Y+11	; 0x0b
     6ce:	2e 85       	ldd	r18, Y+14	; 0x0e
     6d0:	3f 85       	ldd	r19, Y+15	; 0x0f
     6d2:	48 89       	ldd	r20, Y+16	; 0x10
     6d4:	59 89       	ldd	r21, Y+17	; 0x11
     6d6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3>
     6da:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixsfsi>
		int16_t dx = (32768.0 * plane_dx * dxdi);
		int16_t dy = (32768.0 * plane_dx * dydi);
		x -= (LCD_WIDTH/2) * dx;
		y -= (LCD_WIDTH/2) * dy;
     6de:	2c 8d       	ldd	r18, Y+28	; 0x1c
     6e0:	3d 8d       	ldd	r19, Y+29	; 0x1d
     6e2:	8f eb       	ldi	r24, 0xBF	; 191
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	28 9f       	mul	r18, r24
     6e8:	70 01       	movw	r14, r0
     6ea:	29 9f       	mul	r18, r25
     6ec:	f0 0c       	add	r15, r0
     6ee:	38 9f       	mul	r19, r24
     6f0:	f0 0c       	add	r15, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e6 0e       	add	r14, r22
     6f6:	f7 1e       	adc	r15, r23
		int shade = 15 - (int)(depth * 7.0);
		if(shade < 0) shade = 0;
		if(shade > 15) shade = 15;
		shade *= 0x111;
     6f8:	e1 e1       	ldi	r30, 0x11	; 17
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	0e 9f       	mul	r16, r30
     6fe:	d0 01       	movw	r26, r0
     700:	0f 9f       	mul	r16, r31
     702:	b0 0d       	add	r27, r0
     704:	1e 9f       	mul	r17, r30
     706:	b0 0d       	add	r27, r0
     708:	11 24       	eor	r1, r1
     70a:	bf 8f       	std	Y+31, r27	; 0x1f
     70c:	ae 8f       	std	Y+30, r26	; 0x1e
     70e:	8c ae       	std	Y+60, r8	; 0x3c
     710:	9d ae       	std	Y+61, r9	; 0x3d
     712:	aa 24       	eor	r10, r10
     714:	bb 24       	eor	r11, r11
     716:	02 ee       	ldi	r16, 0xE2	; 226
     718:	1f ef       	ldi	r17, 0xFF	; 255
			((rand() & 1) ? 0x00f : 0);
	}
	return c;
}

int main() {
     71a:	6c 81       	ldd	r22, Y+4	; 0x04
     71c:	7d 81       	ldd	r23, Y+5	; 0x05
     71e:	6a 0d       	add	r22, r10
     720:	7b 1d       	adc	r23, r11

		for(int i=0; i<LCD_WIDTH; i++) {
			int c = -1;

			if(c == -1) {
				int idx1 = ((x >> 9) & 0xf);
     722:	96 01       	movw	r18, r12
     724:	23 2f       	mov	r18, r19
     726:	33 0f       	add	r19, r19
     728:	33 0b       	sbc	r19, r19
     72a:	25 95       	asr	r18
     72c:	2f 70       	andi	r18, 0x0F	; 15
     72e:	30 70       	andi	r19, 0x00	; 0
				int idx2 = ((y >> 9) & 0xf);
				idx2 = (30-(idx2<<1)) + (idx1 >> 3);
     730:	8f 2d       	mov	r24, r15
     732:	99 27       	eor	r25, r25
     734:	8e 71       	andi	r24, 0x1E	; 30
     736:	90 70       	andi	r25, 0x00	; 0
				idx1 = 7 - (idx1 & 7);
				c = ((floor_texture[idx2] >> idx1) & 1) ? 0 : shade;
     738:	f9 01       	movw	r30, r18
     73a:	a3 e0       	ldi	r26, 0x03	; 3
     73c:	f5 95       	asr	r31
     73e:	e7 95       	ror	r30
     740:	aa 95       	dec	r26
     742:	e1 f7       	brne	.-8      	; 0x73c <main+0x5ac>
     744:	e8 1b       	sub	r30, r24
     746:	f9 0b       	sbc	r31, r25
     748:	e2 5e       	subi	r30, 0xE2	; 226
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	80 81       	ld	r24, Z
     74e:	90 e0       	ldi	r25, 0x00	; 0

			if(c == -1) {
				int idx1 = ((x >> 9) & 0xf);
				int idx2 = ((y >> 9) & 0xf);
				idx2 = (30-(idx2<<1)) + (idx1 >> 3);
				idx1 = 7 - (idx1 & 7);
     750:	20 95       	com	r18
     752:	30 95       	com	r19
				c = ((floor_texture[idx2] >> idx1) & 1) ? 0 : shade;
     754:	27 70       	andi	r18, 0x07	; 7
     756:	30 70       	andi	r19, 0x00	; 0
     758:	02 c0       	rjmp	.+4      	; 0x75e <main+0x5ce>
     75a:	95 95       	asr	r25
     75c:	87 95       	ror	r24
     75e:	2a 95       	dec	r18
     760:	e2 f7       	brpl	.-8      	; 0x75a <main+0x5ca>
     762:	80 fd       	sbrc	r24, 0
     764:	03 c0       	rjmp	.+6      	; 0x76c <main+0x5dc>
     766:	2e 8d       	ldd	r18, Y+30	; 0x1e
     768:	3f 8d       	ldd	r19, Y+31	; 0x1f
     76a:	02 c0       	rjmp	.+4      	; 0x770 <main+0x5e0>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0

				idx1 = (((x >> 13)+4) & 7);
				idx2 = (((y >> 13)+4) & 7);

				c &= checkers[(idx2<<3) + idx1];
     770:	f7 01       	movw	r30, r14
     772:	e8 e0       	ldi	r30, 0x08	; 8
     774:	fe 02       	muls	r31, r30
     776:	e1 2d       	mov	r30, r1
     778:	ff 0b       	sbc	r31, r31
     77a:	11 24       	eor	r1, r1
     77c:	34 96       	adiw	r30, 0x04	; 4
     77e:	e7 70       	andi	r30, 0x07	; 7
     780:	f0 70       	andi	r31, 0x00	; 0
     782:	53 e0       	ldi	r21, 0x03	; 3
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	5a 95       	dec	r21
     78a:	e1 f7       	brne	.-8      	; 0x784 <main+0x5f4>
     78c:	c6 01       	movw	r24, r12
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	98 02       	muls	r25, r24
     792:	81 2d       	mov	r24, r1
     794:	99 0b       	sbc	r25, r25
     796:	11 24       	eor	r1, r1
     798:	04 96       	adiw	r24, 0x04	; 4
     79a:	87 70       	andi	r24, 0x07	; 7
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	e8 0f       	add	r30, r24
     7a0:	f9 1f       	adc	r31, r25
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	e0 5e       	subi	r30, 0xE0	; 224
     7a8:	f7 4f       	sbci	r31, 0xF7	; 247
     7aa:	80 80       	ld	r8, Z
     7ac:	91 80       	ldd	r9, Z+1	; 0x01
     7ae:	82 22       	and	r8, r18
     7b0:	93 22       	and	r9, r19
			}

			int si = i - (LCD_WIDTH - SPHEREDIAM) / 2;
			int sj = j - sphere_top;
     7b2:	e0 91 e8 2e 	lds	r30, 0x2EE8
     7b6:	f0 91 e9 2e 	lds	r31, 0x2EE9
			if(si >=0 && sj >= 0 && si < SPHEREDIAM && sj < SPHEREDIAM) {
     7ba:	17 fd       	sbrc	r17, 7
     7bc:	c0 c0       	rjmp	.+384    	; 0x93e <main+0x7ae>

				c &= checkers[(idx2<<3) + idx1];
			}

			int si = i - (LCD_WIDTH - SPHEREDIAM) / 2;
			int sj = j - sphere_top;
     7be:	a1 01       	movw	r20, r2
     7c0:	4e 1b       	sub	r20, r30
     7c2:	5f 0b       	sbc	r21, r31
			if(si >=0 && sj >= 0 && si < SPHEREDIAM && sj < SPHEREDIAM) {
     7c4:	57 fd       	sbrc	r21, 7
     7c6:	bb c0       	rjmp	.+374    	; 0x93e <main+0x7ae>
     7c8:	06 34       	cpi	r16, 0x46	; 70
     7ca:	11 05       	cpc	r17, r1
     7cc:	0c f0       	brlt	.+2      	; 0x7d0 <main+0x640>
     7ce:	b7 c0       	rjmp	.+366    	; 0x93e <main+0x7ae>
     7d0:	46 34       	cpi	r20, 0x46	; 70
     7d2:	51 05       	cpc	r21, r1
     7d4:	0c f0       	brlt	.+2      	; 0x7d8 <main+0x648>
     7d6:	b3 c0       	rjmp	.+358    	; 0x93e <main+0x7ae>
				int dat = spheredata[(SPHEREDIAM-1-sj) * SPHEREDIAM + (SPHEREDIAM-1-si)];
     7d8:	85 e4       	ldi	r24, 0x45	; 69
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	26 e4       	ldi	r18, 0x46	; 70
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	82 9f       	mul	r24, r18
     7e6:	f0 01       	movw	r30, r0
     7e8:	83 9f       	mul	r24, r19
     7ea:	f0 0d       	add	r31, r0
     7ec:	92 9f       	mul	r25, r18
     7ee:	f0 0d       	add	r31, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	eb 5b       	subi	r30, 0xBB	; 187
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	e0 1b       	sub	r30, r16
     7f8:	f1 0b       	sbc	r31, r17
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e0 56       	subi	r30, 0x60	; 96
     800:	f7 4f       	sbci	r31, 0xF7	; 247
     802:	30 81       	ld	r19, Z
     804:	21 81       	ldd	r18, Z+1	; 0x01
				int shade = ((dat >> 13) & 0x7);
				if(shade) {
     806:	82 2f       	mov	r24, r18
     808:	82 95       	swap	r24
     80a:	86 95       	lsr	r24
     80c:	87 70       	andi	r24, 0x07	; 7
     80e:	8a af       	std	Y+58, r24	; 0x3a
     810:	1b ae       	std	Y+59, r1	; 0x3b
     812:	aa ad       	ldd	r26, Y+58	; 0x3a
     814:	bb ad       	ldd	r27, Y+59	; 0x3b
     816:	ab 2b       	or	r26, r27
     818:	09 f4       	brne	.+2      	; 0x81c <main+0x68c>
     81a:	91 c0       	rjmp	.+290    	; 0x93e <main+0x7ae>
			}

			int si = i - (LCD_WIDTH - SPHEREDIAM) / 2;
			int sj = j - sphere_top;
			if(si >=0 && sj >= 0 && si < SPHEREDIAM && sj < SPHEREDIAM) {
				int dat = spheredata[(SPHEREDIAM-1-sj) * SPHEREDIAM + (SPHEREDIAM-1-si)];
     81c:	83 2f       	mov	r24, r19
     81e:	92 2f       	mov	r25, r18
				int shade = ((dat >> 13) & 0x7);
				if(shade) {
					shade += 8;
					shade *= 0x111;
					int tex_j = ((dat >> 7) & 0x3f);
     820:	9c 01       	movw	r18, r24
     822:	22 0f       	add	r18, r18
     824:	23 2f       	mov	r18, r19
     826:	22 1f       	adc	r18, r18
     828:	33 0b       	sbc	r19, r19
     82a:	2f 73       	andi	r18, 0x3F	; 63
     82c:	30 70       	andi	r19, 0x00	; 0
					int tex_i = (dat & 0x7f);
					tex_i += sphererot;
					tex_i += SPHERE_TEXW/2;
     82e:	ee ad       	ldd	r30, Y+62	; 0x3e
     830:	ff ad       	ldd	r31, Y+63	; 0x3f
     832:	8e 0f       	add	r24, r30
     834:	9f 1f       	adc	r25, r31
					tex_i &= (SPHERE_TEXW-1);
     836:	8f 77       	andi	r24, 0x7F	; 127
     838:	90 70       	andi	r25, 0x00	; 0
					tex_j = SPHERE_TEXH-1-tex_j;

					int idx2 = (tex_j << 4) + (tex_i >> 3);
					int idx1 = 7 - (tex_i & 7);
					c = ((globe_texture[idx2] >> idx1) & 1) ? c : 0xff0;
     83a:	fc 01       	movw	r30, r24
     83c:	a3 e0       	ldi	r26, 0x03	; 3
     83e:	f5 95       	asr	r31
     840:	e7 95       	ror	r30
     842:	aa 95       	dec	r26
     844:	e1 f7       	brne	.-8      	; 0x83e <main+0x6ae>
     846:	af e3       	ldi	r26, 0x3F	; 63
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	a2 1b       	sub	r26, r18
     84c:	b3 0b       	sbc	r27, r19
     84e:	9d 01       	movw	r18, r26
     850:	74 e0       	ldi	r23, 0x04	; 4
     852:	22 0f       	add	r18, r18
     854:	33 1f       	adc	r19, r19
     856:	7a 95       	dec	r23
     858:	e1 f7       	brne	.-8      	; 0x852 <main+0x6c2>
     85a:	e0 5e       	subi	r30, 0xE0	; 224
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	e2 0f       	add	r30, r18
     860:	f3 1f       	adc	r31, r19
     862:	20 81       	ld	r18, Z
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	80 95       	com	r24
     868:	90 95       	com	r25
     86a:	87 70       	andi	r24, 0x07	; 7
     86c:	90 70       	andi	r25, 0x00	; 0
     86e:	02 c0       	rjmp	.+4      	; 0x874 <main+0x6e4>
     870:	35 95       	asr	r19
     872:	27 95       	ror	r18
     874:	8a 95       	dec	r24
     876:	e2 f7       	brpl	.-8      	; 0x870 <main+0x6e0>
     878:	20 fd       	sbrc	r18, 0
     87a:	04 c0       	rjmp	.+8      	; 0x884 <main+0x6f4>
     87c:	80 ef       	ldi	r24, 0xF0	; 240
     87e:	88 2e       	mov	r8, r24
     880:	8f e0       	ldi	r24, 0x0F	; 15
     882:	98 2e       	mov	r9, r24

					dat = spheredata[sj * SPHEREDIAM + si];
     884:	26 e4       	ldi	r18, 0x46	; 70
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	42 9f       	mul	r20, r18
     88a:	f0 01       	movw	r30, r0
     88c:	43 9f       	mul	r20, r19
     88e:	f0 0d       	add	r31, r0
     890:	52 9f       	mul	r21, r18
     892:	f0 0d       	add	r31, r0
     894:	11 24       	eor	r1, r1
     896:	e0 0f       	add	r30, r16
     898:	f1 1f       	adc	r31, r17
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e0 56       	subi	r30, 0x60	; 96
     8a0:	f7 4f       	sbci	r31, 0xF7	; 247
     8a2:	21 81       	ldd	r18, Z+1	; 0x01
     8a4:	80 81       	ld	r24, Z
     8a6:	92 2f       	mov	r25, r18
					shade = ((dat >> 13) & 0x7);
     8a8:	22 95       	swap	r18
     8aa:	26 95       	lsr	r18
     8ac:	27 70       	andi	r18, 0x07	; 7
     8ae:	28 a3       	std	Y+32, r18	; 0x20
     8b0:	19 a2       	std	Y+33, r1	; 0x21

					shade *= 0x111;
     8b2:	a8 a1       	ldd	r26, Y+32	; 0x20
     8b4:	b9 a1       	ldd	r27, Y+33	; 0x21
     8b6:	e1 e1       	ldi	r30, 0x11	; 17
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	ae 9f       	mul	r26, r30
     8bc:	a0 01       	movw	r20, r0
     8be:	af 9f       	mul	r26, r31
     8c0:	50 0d       	add	r21, r0
     8c2:	be 9f       	mul	r27, r30
     8c4:	50 0d       	add	r21, r0
     8c6:	11 24       	eor	r1, r1
					tex_j = ((dat >> 7) & 0x3f);
					tex_i = (dat & 0x7f);
					tex_i += sphererot;
     8c8:	2c 85       	ldd	r18, Y+12	; 0x0c
     8ca:	3d 85       	ldd	r19, Y+13	; 0x0d
     8cc:	28 0f       	add	r18, r24
     8ce:	39 1f       	adc	r19, r25
					tex_i &= (SPHERE_TEXW-1);
     8d0:	2f 77       	andi	r18, 0x7F	; 127
     8d2:	30 70       	andi	r19, 0x00	; 0

					idx2 = (tex_j << 4) + (tex_i >> 3);
					idx1 = 7 - (tex_i & 7);
					c = ((globe_texture[idx2] >> idx1) & 1) ? 
     8d4:	f9 01       	movw	r30, r18
     8d6:	a3 e0       	ldi	r26, 0x03	; 3
     8d8:	f5 95       	asr	r31
     8da:	e7 95       	ror	r30
     8dc:	aa 95       	dec	r26
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <main+0x748>
     8e0:	73 e0       	ldi	r23, 0x03	; 3
     8e2:	96 95       	lsr	r25
     8e4:	87 95       	ror	r24
     8e6:	7a 95       	dec	r23
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <main+0x752>
     8ea:	80 7f       	andi	r24, 0xF0	; 240
     8ec:	93 70       	andi	r25, 0x03	; 3
     8ee:	e0 5e       	subi	r30, 0xE0	; 224
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	e8 0f       	add	r30, r24
     8f4:	f9 1f       	adc	r31, r25
     8f6:	80 81       	ld	r24, Z
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	20 95       	com	r18
     8fc:	30 95       	com	r19
     8fe:	27 70       	andi	r18, 0x07	; 7
     900:	30 70       	andi	r19, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <main+0x778>
     904:	95 95       	asr	r25
     906:	87 95       	ror	r24
     908:	2a 95       	dec	r18
     90a:	e2 f7       	brpl	.-8      	; 0x904 <main+0x774>
     90c:	80 ff       	sbrs	r24, 0
     90e:	0e c0       	rjmp	.+28     	; 0x92c <main+0x79c>
     910:	ca 01       	movw	r24, r20
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
	}
}

static inline int pixavg(int a, int b) {
	int x = a & b & 0x111;
	int y = ((a & 0xeee) + (b & 0xeee)) >> 1;
     916:	2e ee       	ldi	r18, 0xEE	; 238
     918:	3e e0       	ldi	r19, 0x0E	; 14
     91a:	82 22       	and	r8, r18
     91c:	93 22       	and	r9, r19
     91e:	8e 70       	andi	r24, 0x0E	; 14
     920:	90 70       	andi	r25, 0x00	; 0
     922:	88 0e       	add	r8, r24
     924:	99 1e       	adc	r9, r25
	return x + y;
     926:	96 94       	lsr	r9
     928:	87 94       	ror	r8
     92a:	09 c0       	rjmp	.+18     	; 0x93e <main+0x7ae>
					tex_i += sphererot;
					tex_i &= (SPHERE_TEXW-1);

					idx2 = (tex_j << 4) + (tex_i >> 3);
					idx1 = 7 - (tex_i & 7);
					c = ((globe_texture[idx2] >> idx1) & 1) ? 
     92c:	4a 01       	movw	r8, r20
     92e:	8f e0       	ldi	r24, 0x0F	; 15
     930:	9f e0       	ldi	r25, 0x0F	; 15
     932:	88 22       	and	r8, r24
     934:	99 22       	and	r9, r25
     936:	a0 ef       	ldi	r26, 0xF0	; 240
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	8a 2a       	or	r8, r26
     93c:	9b 2a       	or	r9, r27
						pixavg((0x00f & (shade<<1)), c) : (0x0f0 | (0xf0f & shade));
				}
			}

			if(pix_toggle & 1) {
     93e:	60 ff       	sbrs	r22, 0
     940:	09 c0       	rjmp	.+18     	; 0x954 <main+0x7c4>
				LCDWritePair(prev_pix, c);
     942:	8c ad       	ldd	r24, Y+60	; 0x3c
     944:	9d ad       	ldd	r25, Y+61	; 0x3d
     946:	b4 01       	movw	r22, r8
     948:	0e 94 28 05 	call	0xa50	; 0xa50 <LCDWritePair>
     94c:	8c ad       	ldd	r24, Y+60	; 0x3c
     94e:	9d ad       	ldd	r25, Y+61	; 0x3d
     950:	9c 01       	movw	r18, r24
     952:	49 01       	movw	r8, r18
		int shade = 15 - (int)(depth * 7.0);
		if(shade < 0) shade = 0;
		if(shade > 15) shade = 15;
		shade *= 0x111;

		for(int i=0; i<LCD_WIDTH; i++) {
     954:	08 94       	sec
     956:	a1 1c       	adc	r10, r1
     958:	b1 1c       	adc	r11, r1
     95a:	0f 5f       	subi	r16, 0xFF	; 255
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	b2 e8       	ldi	r27, 0x82	; 130
     960:	ab 16       	cp	r10, r27
     962:	b1 04       	cpc	r11, r1
     964:	59 f0       	breq	.+22     	; 0x97c <main+0x7ec>
			((rand() & 1) ? 0x00f : 0);
	}
	return c;
}

int main() {
     966:	ea 8d       	ldd	r30, Y+26	; 0x1a
     968:	fb 8d       	ldd	r31, Y+27	; 0x1b
     96a:	ce 0e       	add	r12, r30
     96c:	df 1e       	adc	r13, r31
     96e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     970:	3d 8d       	ldd	r19, Y+29	; 0x1d
     972:	e2 0e       	add	r14, r18
     974:	f3 1e       	adc	r15, r19
     976:	8c ae       	std	Y+60, r8	; 0x3c
     978:	9d ae       	std	Y+61, r9	; 0x3d
     97a:	cf ce       	rjmp	.-610    	; 0x71a <main+0x58a>
     97c:	8c 81       	ldd	r24, Y+4	; 0x04
     97e:	9d 81       	ldd	r25, Y+5	; 0x05
     980:	8e 57       	subi	r24, 0x7E	; 126
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	9d 83       	std	Y+5, r25	; 0x05
     986:	8c 83       	std	Y+4, r24	; 0x04
	float plane_b = sin(TILT);
	float plane_z0 = 0.5;

	int prev_pix = 0;
	int pix_toggle = 0;
	for(int j=0; j<LCD_HEIGHT; j++) {
     988:	08 94       	sec
     98a:	21 1c       	adc	r2, r1
     98c:	31 1c       	adc	r3, r1
     98e:	92 e8       	ldi	r25, 0x82	; 130
     990:	29 16       	cp	r2, r25
     992:	31 04       	cpc	r3, r1
     994:	09 f0       	breq	.+2      	; 0x998 <main+0x808>
     996:	02 ce       	rjmp	.-1020   	; 0x59c <main+0x40c>
};

static void drawHex8(int n, int x, int y) {
	static const char *hexchars = "0123456789ABCDEF";
	char hex[3];
	hex[0] = hexchars[(n>>4) & 0xf];
     998:	e8 ad       	ldd	r30, Y+56	; 0x38
     99a:	f9 ad       	ldd	r31, Y+57	; 0x39
     99c:	34 e0       	ldi	r19, 0x04	; 4
     99e:	f5 95       	asr	r31
     9a0:	e7 95       	ror	r30
     9a2:	3a 95       	dec	r19
     9a4:	e1 f7       	brne	.-8      	; 0x99e <main+0x80e>
     9a6:	ef 70       	andi	r30, 0x0F	; 15
     9a8:	f0 70       	andi	r31, 0x00	; 0
     9aa:	ae a9       	ldd	r26, Y+54	; 0x36
     9ac:	bf a9       	ldd	r27, Y+55	; 0x37
     9ae:	ea 0f       	add	r30, r26
     9b0:	fb 1f       	adc	r31, r27
     9b2:	80 81       	ld	r24, Z
     9b4:	89 83       	std	Y+1, r24	; 0x01
	hex[1] = hexchars[n & 0xf];
     9b6:	e8 ad       	ldd	r30, Y+56	; 0x38
     9b8:	f9 ad       	ldd	r31, Y+57	; 0x39
     9ba:	ef 70       	andi	r30, 0x0F	; 15
     9bc:	f0 70       	andi	r31, 0x00	; 0
     9be:	ea 0f       	add	r30, r26
     9c0:	fb 1f       	adc	r31, r27
     9c2:	80 81       	ld	r24, Z
     9c4:	8a 83       	std	Y+2, r24	; 0x02
	hex[2] = 0;
     9c6:	1b 82       	std	Y+3, r1	; 0x03
	drawString(hex, 0xfff, 0x000, x, y);
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	6f ef       	ldi	r22, 0xFF	; 255
     9ce:	7f e0       	ldi	r23, 0x0F	; 15
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	0a e7       	ldi	r16, 0x7A	; 122
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	0e 94 06 07 	call	0xe0c	; 0xe0c <drawString>
	float theta = 0;
	int iter = 0;
	for(;;) {
		drawCheckers(theta, 0.5);
		drawHex8(iter, 0, LCD_HEIGHT-8);
		theta += 0.05;
     9e0:	c3 01       	movw	r24, r6
     9e2:	b2 01       	movw	r22, r4
     9e4:	2d ec       	ldi	r18, 0xCD	; 205
     9e6:	3c ec       	ldi	r19, 0xCC	; 204
     9e8:	4c e4       	ldi	r20, 0x4C	; 76
     9ea:	5d e3       	ldi	r21, 0x3D	; 61
     9ec:	0e 94 c8 09 	call	0x1390	; 0x1390 <__addsf3>
     9f0:	2b 01       	movw	r4, r22
     9f2:	3c 01       	movw	r6, r24
		if(theta > 2*3.14159) theta -= 2*3.14159; // prevent overflow
     9f4:	20 ed       	ldi	r18, 0xD0	; 208
     9f6:	3f e0       	ldi	r19, 0x0F	; 15
     9f8:	49 ec       	ldi	r20, 0xC9	; 201
     9fa:	50 e4       	ldi	r21, 0x40	; 64
     9fc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__gtsf2>
     a00:	18 16       	cp	r1, r24
     a02:	54 f4       	brge	.+20     	; 0xa18 <main+0x888>
     a04:	c3 01       	movw	r24, r6
     a06:	b2 01       	movw	r22, r4
     a08:	20 ed       	ldi	r18, 0xD0	; 208
     a0a:	3f e0       	ldi	r19, 0x0F	; 15
     a0c:	49 ec       	ldi	r20, 0xC9	; 201
     a0e:	50 e4       	ldi	r21, 0x40	; 64
     a10:	0e 94 97 09 	call	0x132e	; 0x132e <__subsf3>
     a14:	2b 01       	movw	r4, r22
     a16:	3c 01       	movw	r6, r24
		checkers[iter & 63] = randColor();
     a18:	0e 94 9b 00 	call	0x136	; 0x136 <randColor>
     a1c:	e8 ad       	ldd	r30, Y+56	; 0x38
     a1e:	f9 ad       	ldd	r31, Y+57	; 0x39
     a20:	ef 73       	andi	r30, 0x3F	; 63
     a22:	f0 70       	andi	r31, 0x00	; 0
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	e0 5e       	subi	r30, 0xE0	; 224
     a2a:	f7 4f       	sbci	r31, 0xF7	; 247
     a2c:	91 83       	std	Z+1, r25	; 0x01
     a2e:	80 83       	st	Z, r24
		checkers[(iter+1) & 63] = 0xfff;
     a30:	e8 ad       	ldd	r30, Y+56	; 0x38
     a32:	f9 ad       	ldd	r31, Y+57	; 0x39
     a34:	31 96       	adiw	r30, 0x01	; 1
     a36:	f9 af       	std	Y+57, r31	; 0x39
     a38:	e8 af       	std	Y+56, r30	; 0x38
     a3a:	ef 73       	andi	r30, 0x3F	; 63
     a3c:	f0 70       	andi	r31, 0x00	; 0
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e0 5e       	subi	r30, 0xE0	; 224
     a44:	f7 4f       	sbci	r31, 0xF7	; 247
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	9f e0       	ldi	r25, 0x0F	; 15
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24
     a4e:	44 cd       	rjmp	.-1400   	; 0x4d8 <main+0x348>

00000a50 <LCDWritePair>:
void LCDWriteWindow(int x1, int y1, int x2, int y2) {
	LCDSetWindow(x1, y1, x2, y2);
	LCDBeginWrite();
}

inline void LCDWritePair(int c1, int c2) {
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	8c 01       	movw	r16, r24
     a5a:	7b 01       	movw	r14, r22
	LCDData(c1 >> 4);
     a5c:	44 e0       	ldi	r20, 0x04	; 4
     a5e:	95 95       	asr	r25
     a60:	87 95       	ror	r24
     a62:	4a 95       	dec	r20
     a64:	e1 f7       	brne	.-8      	; 0xa5e <LCDWritePair+0xe>
     a66:	90 70       	andi	r25, 0x00	; 0
     a68:	80 50       	subi	r24, 0x00	; 0
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData((c1<<4) | ((c2>>8) & 0x0f));
     a70:	8f 2d       	mov	r24, r15
     a72:	99 27       	eor	r25, r25
     a74:	87 fd       	sbrc	r24, 7
     a76:	9a 95       	dec	r25
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	24 e0       	ldi	r18, 0x04	; 4
     a7e:	00 0f       	add	r16, r16
     a80:	11 1f       	adc	r17, r17
     a82:	2a 95       	dec	r18
     a84:	e1 f7       	brne	.-8      	; 0xa7e <LCDWritePair+0x2e>
     a86:	80 2b       	or	r24, r16
     a88:	91 2b       	or	r25, r17
     a8a:	90 70       	andi	r25, 0x00	; 0
     a8c:	80 50       	subi	r24, 0x00	; 0
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(c2);
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	e8 22       	and	r14, r24
     a98:	ff 24       	eor	r15, r15
     a9a:	c7 01       	movw	r24, r14
     a9c:	80 50       	subi	r24, 0x00	; 0
     a9e:	9f 4f       	sbci	r25, 0xFF	; 255
     aa0:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
}
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	08 95       	ret

00000aae <LCDWriteWindow>:

static inline void LCDBeginWrite() {
	LCDCommand(LCD_RAMWR);
}

void LCDWriteWindow(int x1, int y1, int x2, int y2) {
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	6c 01       	movw	r12, r24
     ac0:	8b 01       	movw	r16, r22
     ac2:	5a 01       	movw	r10, r20
     ac4:	79 01       	movw	r14, r18
	LCDCommand(PH_DISPON);	// display on(PHILLIPS)
}
#endif

static inline void LCDSetWindow(int x1, int y1, int x2, int y2) {
	LCDCommand(LCD_PASET);   // page start/end ram
     ac6:	85 e7       	ldi	r24, 0x75	; 117
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(y1 + LCD_Y_OFFSET);
     ace:	0e 5f       	subi	r16, 0xFE	; 254
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	10 70       	andi	r17, 0x00	; 0
     ad4:	c8 01       	movw	r24, r16
     ad6:	80 50       	subi	r24, 0x00	; 0
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(y2 + LCD_Y_OFFSET);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	e8 0e       	add	r14, r24
     ae4:	f9 1e       	adc	r15, r25
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	e9 22       	and	r14, r25
     aea:	ff 24       	eor	r15, r15
     aec:	c7 01       	movw	r24, r14
     aee:	80 50       	subi	r24, 0x00	; 0
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>

	LCDCommand(LCD_CASET);   // column start/end ram
     af6:	85 e1       	ldi	r24, 0x15	; 21
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(x1);
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	c8 22       	and	r12, r24
     b02:	dd 24       	eor	r13, r13
     b04:	c6 01       	movw	r24, r12
     b06:	80 50       	subi	r24, 0x00	; 0
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(x2);
     b0e:	9f ef       	ldi	r25, 0xFF	; 255
     b10:	a9 22       	and	r10, r25
     b12:	bb 24       	eor	r11, r11
     b14:	c5 01       	movw	r24, r10
     b16:	80 50       	subi	r24, 0x00	; 0
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
}

static inline void LCDBeginWrite() {
	LCDCommand(LCD_RAMWR);
     b1e:	8c e5       	ldi	r24, 0x5C	; 92
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
}

void LCDWriteWindow(int x1, int y1, int x2, int y2) {
	LCDSetWindow(x1, y1, x2, y2);
	LCDBeginWrite();
}
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	08 95       	ret

00000b38 <LCDSetPixel>:
	LCDData(c1 >> 4);
	LCDData((c1<<4) | ((c2>>8) & 0x0f));
	LCDData(c2);
}

void LCDSetPixel(int color, int x, int y) {
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	8c 01       	movw	r16, r24
     b3e:	fb 01       	movw	r30, r22
     b40:	9a 01       	movw	r18, r20
	LCDWriteWindow(x, y, x, y);
     b42:	cb 01       	movw	r24, r22
     b44:	ba 01       	movw	r22, r20
     b46:	af 01       	movw	r20, r30
     b48:	0e 94 57 05 	call	0xaae	; 0xaae <LCDWriteWindow>
	LCDWritePair(0, color);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	b8 01       	movw	r22, r16
     b52:	0e 94 28 05 	call	0xa50	; 0xa50 <LCDWritePair>
}
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	08 95       	ret

00000b5c <LCDFillBox>:

void LCDFillBox(int color, int x1, int y1, int x2, int y2) {
     b5c:	6f 92       	push	r6
     b5e:	7f 92       	push	r7
     b60:	8f 92       	push	r8
     b62:	9f 92       	push	r9
     b64:	af 92       	push	r10
     b66:	bf 92       	push	r11
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	6c 01       	movw	r12, r24
     b7a:	fb 01       	movw	r30, r22
     b7c:	4a 01       	movw	r8, r20
	uint8_t c1 = color >> 4;
     b7e:	5c 01       	movw	r10, r24
     b80:	74 e0       	ldi	r23, 0x04	; 4
     b82:	b5 94       	asr	r11
     b84:	a7 94       	ror	r10
     b86:	7a 95       	dec	r23
     b88:	e1 f7       	brne	.-8      	; 0xb82 <LCDFillBox+0x26>
	uint8_t c2 = (color<<4) | ((color>>8) & 0x0f);
     b8a:	e9 2e       	mov	r14, r25
     b8c:	ff 24       	eor	r15, r15
     b8e:	e7 fc       	sbrc	r14, 7
     b90:	fa 94       	dec	r15
     b92:	6f e0       	ldi	r22, 0x0F	; 15
     b94:	e6 22       	and	r14, r22
     b96:	54 e0       	ldi	r21, 0x04	; 4
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	5a 95       	dec	r21
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <LCDFillBox+0x3c>
     ba0:	e8 2a       	or	r14, r24
	uint8_t c3 = color;
	int num_words = ((x2-x1+1) * (y2-y1+1) + 1) / 2;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	ac 01       	movw	r20, r24
     ba8:	48 19       	sub	r20, r8
     baa:	59 09       	sbc	r21, r9
     bac:	40 0f       	add	r20, r16
     bae:	51 1f       	adc	r21, r17
     bb0:	8e 1b       	sub	r24, r30
     bb2:	9f 0b       	sbc	r25, r31
     bb4:	82 0f       	add	r24, r18
     bb6:	93 1f       	adc	r25, r19
     bb8:	bc 01       	movw	r22, r24
     bba:	46 9f       	mul	r20, r22
     bbc:	c0 01       	movw	r24, r0
     bbe:	47 9f       	mul	r20, r23
     bc0:	90 0d       	add	r25, r0
     bc2:	56 9f       	mul	r21, r22
     bc4:	90 0d       	add	r25, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	62 e0       	ldi	r22, 0x02	; 2
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     bd2:	3b 01       	movw	r6, r22

	LCDWriteWindow(x1, y1, x2, y2);
     bd4:	cf 01       	movw	r24, r30
     bd6:	b4 01       	movw	r22, r8
     bd8:	a9 01       	movw	r20, r18
     bda:	98 01       	movw	r18, r16
     bdc:	0e 94 57 05 	call	0xaae	; 0xaae <LCDWriteWindow>
     be0:	88 24       	eor	r8, r8
     be2:	99 24       	eor	r9, r9
	for(int i=0; i<num_words; i++) {
		LCDData(c1);
     be4:	bb 24       	eor	r11, r11
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	a8 0e       	add	r10, r24
     bec:	b9 1e       	adc	r11, r25
		LCDData(c2);
     bee:	ce 2d       	mov	r28, r14
     bf0:	d0 e0       	ldi	r29, 0x00	; 0
     bf2:	c0 50       	subi	r28, 0x00	; 0
     bf4:	df 4f       	sbci	r29, 0xFF	; 255
		LCDData(c3);
     bf6:	0c 2d       	mov	r16, r12
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	00 50       	subi	r16, 0x00	; 0
     bfc:	1f 4f       	sbci	r17, 0xFF	; 255
     bfe:	0c c0       	rjmp	.+24     	; 0xc18 <LCDFillBox+0xbc>
	uint8_t c3 = color;
	int num_words = ((x2-x1+1) * (y2-y1+1) + 1) / 2;

	LCDWriteWindow(x1, y1, x2, y2);
	for(int i=0; i<num_words; i++) {
		LCDData(c1);
     c00:	c5 01       	movw	r24, r10
     c02:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
		LCDData(c2);
     c06:	ce 01       	movw	r24, r28
     c08:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
		LCDData(c3);
     c0c:	c8 01       	movw	r24, r16
     c0e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	uint8_t c2 = (color<<4) | ((color>>8) & 0x0f);
	uint8_t c3 = color;
	int num_words = ((x2-x1+1) * (y2-y1+1) + 1) / 2;

	LCDWriteWindow(x1, y1, x2, y2);
	for(int i=0; i<num_words; i++) {
     c12:	08 94       	sec
     c14:	81 1c       	adc	r8, r1
     c16:	91 1c       	adc	r9, r1
     c18:	86 14       	cp	r8, r6
     c1a:	97 04       	cpc	r9, r7
     c1c:	8c f3       	brlt	.-30     	; 0xc00 <LCDFillBox+0xa4>
		LCDData(c1);
		LCDData(c2);
		LCDData(c3);
	}
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	7f 90       	pop	r7
     c38:	6f 90       	pop	r6
     c3a:	08 95       	ret

00000c3c <LCDClearScreen>:

void LCDClearScreen(int color) {
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
	LCDFillBox(color, 0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	21 e8       	ldi	r18, 0x81	; 129
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	01 e8       	ldi	r16, 0x81	; 129
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCDFillBox>
}
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	08 95       	ret

00000c5a <LCDInitController>:
typedef unsigned char uint8_t;
#endif
	
#ifdef EPSON
void LCDInitController() {
    LCDCommand(EP_DISCTL);  	// display control(EPSON)
     c5a:	8a ec       	ldi	r24, 0xCA	; 202
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
    LCDData(0x0C);   		// 12 = 1100 - CL dividing ratio [don't divide] switching period 8H (default)
     c62:	8c e0       	ldi	r24, 0x0C	; 12
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(0x20);			// 130 line display
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(0x00);			// no inversely highlighted lines
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(0x01);			// dispersion
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	
    LCDCommand(EP_COMSCN);  	// common scanning direction(EPSON)
     c82:	8b eb       	ldi	r24, 0xBB	; 187
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
    LCDData(0x01);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
    
    LCDCommand(EP_OSCON);  	// internal oscillator ON(EPSON)
     c92:	81 ed       	ldi	r24, 0xD1	; 209
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	
    LCDCommand(EP_SLPOUT);  	// sleep out(EPSON)
     c9a:	84 e9       	ldi	r24, 0x94	; 148
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>

    LCDCommand(EP_PWRCTR); 	// power ctrl(EPSON)
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
    LCDData(0x0F);    		//everything on, no external reference resistors
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>

	LCDCommand(EP_DISINV);  	// invert display mode(EPSON)
     cb2:	87 ea       	ldi	r24, 0xA7	; 167
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>

    LCDCommand(EP_DATCTL);  	// data control(EPSON)
     cba:	8c eb       	ldi	r24, 0xBC	; 188
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
    LCDData(0x00);			// normal column addressing
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(0x00);   		// normal RGB arrangement
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(0x02);			// 16-bit Grayscale Type A
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	
    LCDCommand(EP_VOLCTR);  	// electronic volume, this is the contrast/brightness(EPSON)
     cda:	81 e8       	ldi	r24, 0x81	; 129
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(0x28);   		// volume (contrast) setting - fine tuning, original
     ce2:	88 e2       	ldi	r24, 0x28	; 40
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
    LCDData(0x03);   		// internal resistor ratio - coarse adjustment
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>

    LCDCommand(EP_NOP);  	// nop(EPSON)
     cf2:	85 e2       	ldi	r24, 0x25	; 37
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0

	for(long j=0; j<300000; j++) asm volatile ("nop");
     d02:	00 00       	nop
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	a1 1d       	adc	r26, r1
     d08:	b1 1d       	adc	r27, r1
     d0a:	80 3e       	cpi	r24, 0xE0	; 224
     d0c:	23 e9       	ldi	r18, 0x93	; 147
     d0e:	92 07       	cpc	r25, r18
     d10:	24 e0       	ldi	r18, 0x04	; 4
     d12:	a2 07       	cpc	r26, r18
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	b2 07       	cpc	r27, r18
     d18:	a1 f7       	brne	.-24     	; 0xd02 <LCDInitController+0xa8>

    LCDCommand(EP_DISON);   	// display on(EPSON)
     d1a:	8f ea       	ldi	r24, 0xAF	; 175
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
}
     d22:	08 95       	ret

00000d24 <drawChar>:
	0x00, 0x41, 0x36, 0x08, 0x00, // }
	0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
	0x08, 0x1C, 0x2A, 0x08, 0x08  // <-
};

void drawChar(char c, int fg, int bg, int x, int y) {
     d24:	5f 92       	push	r5
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	56 2e       	mov	r5, r22
     d44:	67 2e       	mov	r6, r23
     d46:	74 2e       	mov	r7, r20
     d48:	a5 2e       	mov	r10, r21
	int idx = c-' ';
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	80 97       	sbiw	r24, 0x20	; 32
	if(idx < 0 || idx >= 96) idx = 0;
     d4e:	80 36       	cpi	r24, 0x60	; 96
     d50:	91 05       	cpc	r25, r1
     d52:	10 f0       	brcs	.+4      	; 0xd58 <drawChar+0x34>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
	const char *p = font5x8 + idx*5;
     d58:	6c 01       	movw	r12, r24
     d5a:	cc 0c       	add	r12, r12
     d5c:	dd 1c       	adc	r13, r13
     d5e:	cc 0c       	add	r12, r12
     d60:	dd 1c       	adc	r13, r13
     d62:	c8 0e       	add	r12, r24
     d64:	d9 1e       	adc	r13, r25
     d66:	83 e3       	ldi	r24, 0x33	; 51
     d68:	95 e0       	ldi	r25, 0x05	; 5
     d6a:	c8 0e       	add	r12, r24
     d6c:	d9 1e       	adc	r13, r25

	LCDWriteWindow(x, y, x+5, y+8);
     d6e:	c9 01       	movw	r24, r18
     d70:	b8 01       	movw	r22, r16
     d72:	2b 5f       	subi	r18, 0xFB	; 251
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	a9 01       	movw	r20, r18
     d78:	08 5f       	subi	r16, 0xF8	; 248
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	98 01       	movw	r18, r16
     d7e:	0e 94 57 05 	call	0xaae	; 0xaae <LCDWriteWindow>
     d82:	ee 24       	eor	r14, r14
     d84:	ff 24       	eor	r15, r15
	for(int j=0; j<8; j++) {
		char mask = (1<<j);
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	88 2e       	mov	r8, r24
     d8a:	91 2c       	mov	r9, r1
     d8c:	c4 01       	movw	r24, r8
     d8e:	0e 2c       	mov	r0, r14
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <drawChar+0x72>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <drawChar+0x6e>
     d9a:	b8 2e       	mov	r11, r24
     d9c:	e6 01       	movw	r28, r12
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0
		for(int i=0; i<3; i++) {
#if FONT_AVR_PGMSPACE
			char b1 = pgm_read_byte(p + i*2) & mask;
			char b2 = (i==2) ? 0 : pgm_read_byte(p + i*2+1) & mask;
#else
			char b1 = p[i*2] & mask;
     da2:	88 81       	ld	r24, Y
			char b2 = (i==2) ? 0 : p[i*2+1] & mask;
     da4:	02 30       	cpi	r16, 0x02	; 2
     da6:	11 05       	cpc	r17, r1
     da8:	11 f4       	brne	.+4      	; 0xdae <drawChar+0x8a>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <drawChar+0x8e>
     dae:	29 81       	ldd	r18, Y+1	; 0x01
     db0:	2b 21       	and	r18, r11
#endif
			LCDWritePair(b1?fg:bg, b2?fg:bg);
     db2:	8b 21       	and	r24, r11
     db4:	19 f4       	brne	.+6      	; 0xdbc <drawChar+0x98>
     db6:	87 2d       	mov	r24, r7
     db8:	9a 2d       	mov	r25, r10
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <drawChar+0x9c>
     dbc:	85 2d       	mov	r24, r5
     dbe:	96 2d       	mov	r25, r6
     dc0:	22 23       	and	r18, r18
     dc2:	19 f4       	brne	.+6      	; 0xdca <drawChar+0xa6>
     dc4:	67 2d       	mov	r22, r7
     dc6:	7a 2d       	mov	r23, r10
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <drawChar+0xaa>
     dca:	65 2d       	mov	r22, r5
     dcc:	76 2d       	mov	r23, r6
     dce:	0e 94 28 05 	call	0xa50	; 0xa50 <LCDWritePair>
	const char *p = font5x8 + idx*5;

	LCDWriteWindow(x, y, x+5, y+8);
	for(int j=0; j<8; j++) {
		char mask = (1<<j);
		for(int i=0; i<3; i++) {
     dd2:	0f 5f       	subi	r16, 0xFF	; 255
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	22 96       	adiw	r28, 0x02	; 2
     dd8:	03 30       	cpi	r16, 0x03	; 3
     dda:	11 05       	cpc	r17, r1
     ddc:	11 f7       	brne	.-60     	; 0xda2 <drawChar+0x7e>
	int idx = c-' ';
	if(idx < 0 || idx >= 96) idx = 0;
	const char *p = font5x8 + idx*5;

	LCDWriteWindow(x, y, x+5, y+8);
	for(int j=0; j<8; j++) {
     dde:	08 94       	sec
     de0:	e1 1c       	adc	r14, r1
     de2:	f1 1c       	adc	r15, r1
     de4:	98 e0       	ldi	r25, 0x08	; 8
     de6:	e9 16       	cp	r14, r25
     de8:	f1 04       	cpc	r15, r1
     dea:	81 f6       	brne	.-96     	; 0xd8c <drawChar+0x68>
			char b2 = (i==2) ? 0 : p[i*2+1] & mask;
#endif
			LCDWritePair(b1?fg:bg, b2?fg:bg);
		}
	}
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	9f 90       	pop	r9
     e02:	8f 90       	pop	r8
     e04:	7f 90       	pop	r7
     e06:	6f 90       	pop	r6
     e08:	5f 90       	pop	r5
     e0a:	08 95       	ret

00000e0c <drawString>:
//			//LCDSetPixel(0x0f0, x+i, y+j);
//		}
//	}
//}

void drawString(char *s, int fg, int bg, int x, int y) {
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	7c 01       	movw	r14, r24
     e26:	4b 01       	movw	r8, r22
     e28:	5a 01       	movw	r10, r20
     e2a:	e9 01       	movw	r28, r18
     e2c:	68 01       	movw	r12, r16
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <drawString+0x38>
	while(*s) {
		drawChar(*s, fg, bg, x, y);
     e30:	b4 01       	movw	r22, r8
     e32:	a5 01       	movw	r20, r10
     e34:	9e 01       	movw	r18, r28
     e36:	86 01       	movw	r16, r12
     e38:	0e 94 92 06 	call	0xd24	; 0xd24 <drawChar>
		x += 6;
     e3c:	26 96       	adiw	r28, 0x06	; 6
		s++;
     e3e:	08 94       	sec
     e40:	e1 1c       	adc	r14, r1
     e42:	f1 1c       	adc	r15, r1
//		}
//	}
//}

void drawString(char *s, int fg, int bg, int x, int y) {
	while(*s) {
     e44:	f7 01       	movw	r30, r14
     e46:	80 81       	ld	r24, Z
     e48:	88 23       	and	r24, r24
     e4a:	91 f7       	brne	.-28     	; 0xe30 <drawString+0x24>
		drawChar(*s, fg, bg, x, y);
		x += 6;
		s++;
	}
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	08 95       	ret

00000e66 <scrollConvertY>:
	while(pos >= r2) pos -= r2 - r1;
	while(pos <  r1) pos += r2 - r1;
	LCDSetScrollStart(pos);
}

int scrollConvertY(int y) {
     e66:	ac 01       	movw	r20, r24
	int low = y & 3;
	y = (y >> 2) + pos;
     e68:	9c 01       	movw	r18, r24
     e6a:	35 95       	asr	r19
     e6c:	27 95       	ror	r18
     e6e:	35 95       	asr	r19
     e70:	27 95       	ror	r18
     e72:	80 91 ee 2e 	lds	r24, 0x2EEE
     e76:	90 91 ef 2e 	lds	r25, 0x2EEF
     e7a:	28 0f       	add	r18, r24
     e7c:	39 1f       	adc	r19, r25
	while(y >= r2) y -= r2 - r1;
     e7e:	60 91 ec 2e 	lds	r22, 0x2EEC
     e82:	70 91 ed 2e 	lds	r23, 0x2EED
     e86:	80 91 ea 2e 	lds	r24, 0x2EEA
     e8a:	90 91 eb 2e 	lds	r25, 0x2EEB
     e8e:	86 1b       	sub	r24, r22
     e90:	97 0b       	sbc	r25, r23
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <scrollConvertY+0x32>
	while(pos >= r2) pos -= r2 - r1;
	while(pos <  r1) pos += r2 - r1;
	LCDSetScrollStart(pos);
}

int scrollConvertY(int y) {
     e94:	28 0f       	add	r18, r24
     e96:	39 1f       	adc	r19, r25
	int low = y & 3;
	y = (y >> 2) + pos;
	while(y >= r2) y -= r2 - r1;
     e98:	26 17       	cp	r18, r22
     e9a:	37 07       	cpc	r19, r23
     e9c:	dc f7       	brge	.-10     	; 0xe94 <scrollConvertY+0x2e>
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	43 70       	andi	r20, 0x03	; 3
     ea8:	50 70       	andi	r21, 0x00	; 0
     eaa:	24 0f       	add	r18, r20
     eac:	35 1f       	adc	r19, r21
	return (y<<2) + low;
}
     eae:	c9 01       	movw	r24, r18
     eb0:	08 95       	ret

00000eb2 <LCDSetScrollStart>:
	LCDData(n2);
	LCDData(n3);
	LCDData(mode);
}

void LCDSetScrollStart(int n) {
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	8c 01       	movw	r16, r24
	LCDCommand(EP_SCSTART);
     eb8:	8b ea       	ldi	r24, 0xAB	; 171
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(n);
     ec0:	10 70       	andi	r17, 0x00	; 0
     ec2:	c8 01       	movw	r24, r16
     ec4:	80 50       	subi	r24, 0x00	; 0
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
}
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <scrollShift>:

	LCDSetScrollArea(r1, r2-1, r2-1, 0);
	LCDSetScrollStart(pos);
}

void scrollShift(int delta) {
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
	delta /= 4;
	pos += delta;
	while(pos >= r2) pos -= r2 - r1;
     ed6:	e0 91 ec 2e 	lds	r30, 0x2EEC
     eda:	f0 91 ed 2e 	lds	r31, 0x2EED
     ede:	c0 91 ea 2e 	lds	r28, 0x2EEA
     ee2:	d0 91 eb 2e 	lds	r29, 0x2EEB
     ee6:	9e 01       	movw	r18, r28
     ee8:	2e 1b       	sub	r18, r30
     eea:	3f 0b       	sbc	r19, r31
     eec:	64 e0       	ldi	r22, 0x04	; 4
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     ef4:	80 91 ee 2e 	lds	r24, 0x2EEE
     ef8:	90 91 ef 2e 	lds	r25, 0x2EEF
     efc:	68 0f       	add	r22, r24
     efe:	79 1f       	adc	r23, r25
     f00:	df 01       	movw	r26, r30
     f02:	ac 1b       	sub	r26, r28
     f04:	bd 0b       	sbc	r27, r29
     f06:	ab 01       	movw	r20, r22
     f08:	62 0f       	add	r22, r18
     f0a:	73 1f       	adc	r23, r19
     f0c:	cd 01       	movw	r24, r26
     f0e:	86 0f       	add	r24, r22
     f10:	97 1f       	adc	r25, r23
     f12:	8e 17       	cp	r24, r30
     f14:	9f 07       	cpc	r25, r31
     f16:	bc f7       	brge	.-18     	; 0xf06 <scrollShift+0x34>
     f18:	9a 01       	movw	r18, r20
	while(pos <  r1) pos += r2 - r1;
     f1a:	ae 01       	movw	r20, r28
     f1c:	4e 1b       	sub	r20, r30
     f1e:	5f 0b       	sbc	r21, r31
}

void scrollShift(int delta) {
	delta /= 4;
	pos += delta;
	while(pos >= r2) pos -= r2 - r1;
     f20:	b9 01       	movw	r22, r18
     f22:	2a 0f       	add	r18, r26
     f24:	3b 1f       	adc	r19, r27
	while(pos <  r1) pos += r2 - r1;
     f26:	ca 01       	movw	r24, r20
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	8c 17       	cp	r24, r28
     f2e:	9d 07       	cpc	r25, r29
     f30:	bc f3       	brlt	.-18     	; 0xf20 <scrollShift+0x4e>
     f32:	60 93 ee 2e 	sts	0x2EEE, r22
     f36:	70 93 ef 2e 	sts	0x2EEF, r23
	LCDSetScrollStart(pos);
     f3a:	cb 01       	movw	r24, r22
     f3c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <LCDSetScrollStart>
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <LCDSetScrollArea>:

static int r1, r2, pos;

#ifdef EPSON
// FIXME - need phillips scroll
void LCDSetScrollArea(int n1, int n2, int n3, int mode) {
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	8c 01       	movw	r16, r24
     f58:	7b 01       	movw	r14, r22
     f5a:	6a 01       	movw	r12, r20
     f5c:	59 01       	movw	r10, r18
	LCDCommand(EP_ASCSET);
     f5e:	8a ea       	ldi	r24, 0xAA	; 170
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(n1);
     f66:	10 70       	andi	r17, 0x00	; 0
     f68:	c8 01       	movw	r24, r16
     f6a:	80 50       	subi	r24, 0x00	; 0
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(n2);
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	e8 22       	and	r14, r24
     f76:	ff 24       	eor	r15, r15
     f78:	c7 01       	movw	r24, r14
     f7a:	80 50       	subi	r24, 0x00	; 0
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(n3);
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	c8 22       	and	r12, r24
     f86:	dd 24       	eor	r13, r13
     f88:	c6 01       	movw	r24, r12
     f8a:	80 50       	subi	r24, 0x00	; 0
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
	LCDData(mode);
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	a8 22       	and	r10, r24
     f96:	bb 24       	eor	r11, r11
     f98:	c5 01       	movw	r24, r10
     f9a:	80 50       	subi	r24, 0x00	; 0
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	0e 94 03 08 	call	0x1006	; 0x1006 <LCDSend9Bit>
}
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	08 95       	ret

00000fb4 <scrollInit>:
	LCDCommand(EP_SCSTART);
	LCDData(n);
}
#endif

void scrollInit(int toparea_height, int scrollarea_height) {
     fb4:	fb 01       	movw	r30, r22
	r1 = toparea_height / 4;
     fb6:	64 e0       	ldi	r22, 0x04	; 4
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     fbe:	9b 01       	movw	r18, r22
     fc0:	70 93 eb 2e 	sts	0x2EEB, r23
     fc4:	60 93 ea 2e 	sts	0x2EEA, r22
	r2 = r1 + scrollarea_height / 4;
     fc8:	cf 01       	movw	r24, r30
     fca:	64 e0       	ldi	r22, 0x04	; 4
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     fd2:	ab 01       	movw	r20, r22
     fd4:	42 0f       	add	r20, r18
     fd6:	53 1f       	adc	r21, r19
     fd8:	50 93 ed 2e 	sts	0x2EED, r21
     fdc:	40 93 ec 2e 	sts	0x2EEC, r20
	pos = r1;
     fe0:	30 93 ef 2e 	sts	0x2EEF, r19
     fe4:	20 93 ee 2e 	sts	0x2EEE, r18

	LCDSetScrollArea(r1, r2-1, r2-1, 0);
     fe8:	41 50       	subi	r20, 0x01	; 1
     fea:	50 40       	sbci	r21, 0x00	; 0
     fec:	c9 01       	movw	r24, r18
     fee:	ba 01       	movw	r22, r20
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	0e 94 a3 07 	call	0xf46	; 0xf46 <LCDSetScrollArea>
	LCDSetScrollStart(pos);
     ff8:	80 91 ee 2e 	lds	r24, 0x2EEE
     ffc:	90 91 ef 2e 	lds	r25, 0x2EEF
    1000:	0e 94 59 07 	call	0xeb2	; 0xeb2 <LCDSetScrollStart>
}
    1004:	08 95       	ret

00001006 <LCDSend9Bit>:
    asm volatile ("nop");
    asm volatile ("nop");
}

void LCDSend9Bit(int data) {
	LCD_PORT &= ~LCDCS;
    1006:	58 98       	cbi	0x0b, 0	; 11
	// have problems

	// we break the 9th bit out into this special case
	// so that we can use only 8-bit variables in the
	// main loop
	if(data & 0x100) {
    1008:	90 ff       	sbrs	r25, 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <LCDSend9Bit+0xa>
		LCD_PORT |= SPIMOSI;
    100c:	5a 9a       	sbi	0x0b, 2	; 11
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <LCDSend9Bit+0xc>
	} else {
		LCD_PORT &= ~SPIMOSI;
    1010:	5a 98       	cbi	0x0b, 2	; 11
	}
	//bitsleep();
	LCD_PORT &= ~SPICLK;
    1012:	59 98       	cbi	0x0b, 1	; 11
	unsigned char dbyte = data;
    1014:	98 2f       	mov	r25, r24
	//bitsleep();
	LCD_PORT |= SPICLK;
    1016:	59 9a       	sbi	0x0b, 1	; 11
    1018:	40 e8       	ldi	r20, 0x80	; 128
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0

	// anyone want to write this in assembly?
	for(unsigned char mask=0x80; mask; ) {
        if(dbyte & mask) {
    101e:	84 2f       	mov	r24, r20
    1020:	89 23       	and	r24, r25
    1022:	11 f0       	breq	.+4      	; 0x1028 <LCDSend9Bit+0x22>
			LCD_PORT |= SPIMOSI;
    1024:	5a 9a       	sbi	0x0b, 2	; 11
    1026:	01 c0       	rjmp	.+2      	; 0x102a <LCDSend9Bit+0x24>
		} else {
			LCD_PORT &= ~SPIMOSI;
    1028:	5a 98       	cbi	0x0b, 2	; 11
		}
		//bitsleep();
		LCD_PORT &= ~SPICLK;
    102a:	59 98       	cbi	0x0b, 1	; 11
		mask >>= 1;
    102c:	46 95       	lsr	r20
		//bitsleep();
		LCD_PORT |= SPICLK;
    102e:	59 9a       	sbi	0x0b, 1	; 11
    1030:	2f 5f       	subi	r18, 0xFF	; 255
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char dbyte = data;
	//bitsleep();
	LCD_PORT |= SPICLK;

	// anyone want to write this in assembly?
	for(unsigned char mask=0x80; mask; ) {
    1034:	28 30       	cpi	r18, 0x08	; 8
    1036:	31 05       	cpc	r19, r1
    1038:	91 f7       	brne	.-28     	; 0x101e <LCDSend9Bit+0x18>
		mask >>= 1;
		//bitsleep();
		LCD_PORT |= SPICLK;
    }

	LCD_PORT |= LCDCS;
    103a:	58 9a       	sbi	0x0b, 0	; 11
	//bitsleep();
}
    103c:	08 95       	ret

0000103e <sysInit>:

static void LCDInitIO() {
	LCD_DDR |= (SPICLK | SPIMOSI | LCDCS | LCDRST);
    103e:	8a b1       	in	r24, 0x0a	; 10
    1040:	87 61       	ori	r24, 0x17	; 23
    1042:	8a b9       	out	0x0a, r24	; 10
	LCD_DDR &= ~SPIMISO;
    1044:	53 98       	cbi	0x0a, 3	; 10
	
	LCD_PORT &= ~SPICLK;
    1046:	59 98       	cbi	0x0b, 1	; 11
	LCD_PORT &= ~SPIMOSI;
    1048:	5a 98       	cbi	0x0b, 2	; 11
	LCD_PORT |= LCDCS;
    104a:	58 9a       	sbi	0x0b, 0	; 11
	LCD_PORT &= ~LCDRST;
    104c:	5c 98       	cbi	0x0b, 4	; 11
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0

	for(long j=0; j<300000; j++) asm volatile ("nop");
    1056:	00 00       	nop
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	a1 1d       	adc	r26, r1
    105c:	b1 1d       	adc	r27, r1
    105e:	80 3e       	cpi	r24, 0xE0	; 224
    1060:	23 e9       	ldi	r18, 0x93	; 147
    1062:	92 07       	cpc	r25, r18
    1064:	24 e0       	ldi	r18, 0x04	; 4
    1066:	a2 07       	cpc	r26, r18
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	b2 07       	cpc	r27, r18
    106c:	a1 f7       	brne	.-24     	; 0x1056 <sysInit+0x18>

	LCD_PORT |= LCDRST;
    106e:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_PORT |= SPICLK;
    1070:	59 9a       	sbi	0x0b, 1	; 11
	LCD_PORT |= SPIMOSI;
    1072:	5a 9a       	sbi	0x0b, 2	; 11
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b0 e0       	ldi	r27, 0x00	; 0

	for(long j=0; j<300000; j++) asm volatile ("nop");
    107c:	00 00       	nop
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	a1 1d       	adc	r26, r1
    1082:	b1 1d       	adc	r27, r1
    1084:	80 3e       	cpi	r24, 0xE0	; 224
    1086:	23 e9       	ldi	r18, 0x93	; 147
    1088:	92 07       	cpc	r25, r18
    108a:	24 e0       	ldi	r18, 0x04	; 4
    108c:	a2 07       	cpc	r26, r18
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	b2 07       	cpc	r27, r18
    1092:	a1 f7       	brne	.-24     	; 0x107c <sysInit+0x3e>
}

void sysInit() {
	LCDInitIO();
}
    1094:	08 95       	ret

00001096 <_fpadd_parts>:
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e1 e5       	ldi	r30, 0x51	; 81
    109c:	f8 e0       	ldi	r31, 0x08	; 8
    109e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__prologue_saves__>
    10a2:	dc 01       	movw	r26, r24
    10a4:	2b 01       	movw	r4, r22
    10a6:	fa 01       	movw	r30, r20
    10a8:	9c 91       	ld	r25, X
    10aa:	92 30       	cpi	r25, 0x02	; 2
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <_fpadd_parts+0x1a>
    10ae:	39 c1       	rjmp	.+626    	; 0x1322 <_fpadd_parts+0x28c>
    10b0:	eb 01       	movw	r28, r22
    10b2:	88 81       	ld	r24, Y
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <_fpadd_parts+0x24>
    10b8:	33 c1       	rjmp	.+614    	; 0x1320 <_fpadd_parts+0x28a>
    10ba:	94 30       	cpi	r25, 0x04	; 4
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <_fpadd_parts+0x42>
    10be:	84 30       	cpi	r24, 0x04	; 4
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <_fpadd_parts+0x2e>
    10c2:	2f c1       	rjmp	.+606    	; 0x1322 <_fpadd_parts+0x28c>
    10c4:	11 96       	adiw	r26, 0x01	; 1
    10c6:	9c 91       	ld	r25, X
    10c8:	11 97       	sbiw	r26, 0x01	; 1
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	98 17       	cp	r25, r24
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <_fpadd_parts+0x3c>
    10d0:	28 c1       	rjmp	.+592    	; 0x1322 <_fpadd_parts+0x28c>
    10d2:	a3 e1       	ldi	r26, 0x13	; 19
    10d4:	b7 e0       	ldi	r27, 0x07	; 7
    10d6:	25 c1       	rjmp	.+586    	; 0x1322 <_fpadd_parts+0x28c>
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	09 f4       	brne	.+2      	; 0x10de <_fpadd_parts+0x48>
    10dc:	21 c1       	rjmp	.+578    	; 0x1320 <_fpadd_parts+0x28a>
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	a9 f4       	brne	.+42     	; 0x110c <_fpadd_parts+0x76>
    10e2:	92 30       	cpi	r25, 0x02	; 2
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <_fpadd_parts+0x52>
    10e6:	1d c1       	rjmp	.+570    	; 0x1322 <_fpadd_parts+0x28c>
    10e8:	9a 01       	movw	r18, r20
    10ea:	ad 01       	movw	r20, r26
    10ec:	88 e0       	ldi	r24, 0x08	; 8
    10ee:	ea 01       	movw	r28, r20
    10f0:	09 90       	ld	r0, Y+
    10f2:	ae 01       	movw	r20, r28
    10f4:	e9 01       	movw	r28, r18
    10f6:	09 92       	st	Y+, r0
    10f8:	9e 01       	movw	r18, r28
    10fa:	81 50       	subi	r24, 0x01	; 1
    10fc:	c1 f7       	brne	.-16     	; 0x10ee <_fpadd_parts+0x58>
    10fe:	e2 01       	movw	r28, r4
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	9c 91       	ld	r25, X
    1106:	89 23       	and	r24, r25
    1108:	81 83       	std	Z+1, r24	; 0x01
    110a:	08 c1       	rjmp	.+528    	; 0x131c <_fpadd_parts+0x286>
    110c:	92 30       	cpi	r25, 0x02	; 2
    110e:	09 f4       	brne	.+2      	; 0x1112 <_fpadd_parts+0x7c>
    1110:	07 c1       	rjmp	.+526    	; 0x1320 <_fpadd_parts+0x28a>
    1112:	12 96       	adiw	r26, 0x02	; 2
    1114:	2d 90       	ld	r2, X+
    1116:	3c 90       	ld	r3, X
    1118:	13 97       	sbiw	r26, 0x03	; 3
    111a:	eb 01       	movw	r28, r22
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	14 96       	adiw	r26, 0x04	; 4
    1122:	ad 90       	ld	r10, X+
    1124:	bd 90       	ld	r11, X+
    1126:	cd 90       	ld	r12, X+
    1128:	dc 90       	ld	r13, X
    112a:	17 97       	sbiw	r26, 0x07	; 7
    112c:	ec 80       	ldd	r14, Y+4	; 0x04
    112e:	fd 80       	ldd	r15, Y+5	; 0x05
    1130:	0e 81       	ldd	r16, Y+6	; 0x06
    1132:	1f 81       	ldd	r17, Y+7	; 0x07
    1134:	91 01       	movw	r18, r2
    1136:	28 1b       	sub	r18, r24
    1138:	39 0b       	sbc	r19, r25
    113a:	b9 01       	movw	r22, r18
    113c:	37 ff       	sbrs	r19, 7
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <_fpadd_parts+0xb2>
    1140:	66 27       	eor	r22, r22
    1142:	77 27       	eor	r23, r23
    1144:	62 1b       	sub	r22, r18
    1146:	73 0b       	sbc	r23, r19
    1148:	60 32       	cpi	r22, 0x20	; 32
    114a:	71 05       	cpc	r23, r1
    114c:	0c f0       	brlt	.+2      	; 0x1150 <_fpadd_parts+0xba>
    114e:	61 c0       	rjmp	.+194    	; 0x1212 <_fpadd_parts+0x17c>
    1150:	12 16       	cp	r1, r18
    1152:	13 06       	cpc	r1, r19
    1154:	6c f5       	brge	.+90     	; 0x11b0 <_fpadd_parts+0x11a>
    1156:	37 01       	movw	r6, r14
    1158:	48 01       	movw	r8, r16
    115a:	06 2e       	mov	r0, r22
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <_fpadd_parts+0xd0>
    115e:	96 94       	lsr	r9
    1160:	87 94       	ror	r8
    1162:	77 94       	ror	r7
    1164:	67 94       	ror	r6
    1166:	0a 94       	dec	r0
    1168:	d2 f7       	brpl	.-12     	; 0x115e <_fpadd_parts+0xc8>
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	04 c0       	rjmp	.+8      	; 0x117c <_fpadd_parts+0xe6>
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	44 1f       	adc	r20, r20
    117a:	55 1f       	adc	r21, r21
    117c:	6a 95       	dec	r22
    117e:	d2 f7       	brpl	.-12     	; 0x1174 <_fpadd_parts+0xde>
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	30 40       	sbci	r19, 0x00	; 0
    1184:	40 40       	sbci	r20, 0x00	; 0
    1186:	50 40       	sbci	r21, 0x00	; 0
    1188:	2e 21       	and	r18, r14
    118a:	3f 21       	and	r19, r15
    118c:	40 23       	and	r20, r16
    118e:	51 23       	and	r21, r17
    1190:	21 15       	cp	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	41 05       	cpc	r20, r1
    1196:	51 05       	cpc	r21, r1
    1198:	21 f0       	breq	.+8      	; 0x11a2 <_fpadd_parts+0x10c>
    119a:	21 e0       	ldi	r18, 0x01	; 1
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	79 01       	movw	r14, r18
    11a4:	8a 01       	movw	r16, r20
    11a6:	e6 28       	or	r14, r6
    11a8:	f7 28       	or	r15, r7
    11aa:	08 29       	or	r16, r8
    11ac:	19 29       	or	r17, r9
    11ae:	3c c0       	rjmp	.+120    	; 0x1228 <_fpadd_parts+0x192>
    11b0:	23 2b       	or	r18, r19
    11b2:	d1 f1       	breq	.+116    	; 0x1228 <_fpadd_parts+0x192>
    11b4:	26 0e       	add	r2, r22
    11b6:	37 1e       	adc	r3, r23
    11b8:	35 01       	movw	r6, r10
    11ba:	46 01       	movw	r8, r12
    11bc:	06 2e       	mov	r0, r22
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <_fpadd_parts+0x132>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	0a 94       	dec	r0
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <_fpadd_parts+0x12a>
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <_fpadd_parts+0x148>
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	44 1f       	adc	r20, r20
    11dc:	55 1f       	adc	r21, r21
    11de:	6a 95       	dec	r22
    11e0:	d2 f7       	brpl	.-12     	; 0x11d6 <_fpadd_parts+0x140>
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	30 40       	sbci	r19, 0x00	; 0
    11e6:	40 40       	sbci	r20, 0x00	; 0
    11e8:	50 40       	sbci	r21, 0x00	; 0
    11ea:	2a 21       	and	r18, r10
    11ec:	3b 21       	and	r19, r11
    11ee:	4c 21       	and	r20, r12
    11f0:	5d 21       	and	r21, r13
    11f2:	21 15       	cp	r18, r1
    11f4:	31 05       	cpc	r19, r1
    11f6:	41 05       	cpc	r20, r1
    11f8:	51 05       	cpc	r21, r1
    11fa:	21 f0       	breq	.+8      	; 0x1204 <_fpadd_parts+0x16e>
    11fc:	21 e0       	ldi	r18, 0x01	; 1
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	59 01       	movw	r10, r18
    1206:	6a 01       	movw	r12, r20
    1208:	a6 28       	or	r10, r6
    120a:	b7 28       	or	r11, r7
    120c:	c8 28       	or	r12, r8
    120e:	d9 28       	or	r13, r9
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <_fpadd_parts+0x192>
    1212:	82 15       	cp	r24, r2
    1214:	93 05       	cpc	r25, r3
    1216:	2c f0       	brlt	.+10     	; 0x1222 <_fpadd_parts+0x18c>
    1218:	1c 01       	movw	r2, r24
    121a:	aa 24       	eor	r10, r10
    121c:	bb 24       	eor	r11, r11
    121e:	65 01       	movw	r12, r10
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <_fpadd_parts+0x192>
    1222:	ee 24       	eor	r14, r14
    1224:	ff 24       	eor	r15, r15
    1226:	87 01       	movw	r16, r14
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	9c 91       	ld	r25, X
    122c:	d2 01       	movw	r26, r4
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	8c 91       	ld	r24, X
    1232:	98 17       	cp	r25, r24
    1234:	09 f4       	brne	.+2      	; 0x1238 <_fpadd_parts+0x1a2>
    1236:	45 c0       	rjmp	.+138    	; 0x12c2 <_fpadd_parts+0x22c>
    1238:	99 23       	and	r25, r25
    123a:	39 f0       	breq	.+14     	; 0x124a <_fpadd_parts+0x1b4>
    123c:	a8 01       	movw	r20, r16
    123e:	97 01       	movw	r18, r14
    1240:	2a 19       	sub	r18, r10
    1242:	3b 09       	sbc	r19, r11
    1244:	4c 09       	sbc	r20, r12
    1246:	5d 09       	sbc	r21, r13
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <_fpadd_parts+0x1c0>
    124a:	a6 01       	movw	r20, r12
    124c:	95 01       	movw	r18, r10
    124e:	2e 19       	sub	r18, r14
    1250:	3f 09       	sbc	r19, r15
    1252:	40 0b       	sbc	r20, r16
    1254:	51 0b       	sbc	r21, r17
    1256:	57 fd       	sbrc	r21, 7
    1258:	08 c0       	rjmp	.+16     	; 0x126a <_fpadd_parts+0x1d4>
    125a:	11 82       	std	Z+1, r1	; 0x01
    125c:	33 82       	std	Z+3, r3	; 0x03
    125e:	22 82       	std	Z+2, r2	; 0x02
    1260:	24 83       	std	Z+4, r18	; 0x04
    1262:	35 83       	std	Z+5, r19	; 0x05
    1264:	46 83       	std	Z+6, r20	; 0x06
    1266:	57 83       	std	Z+7, r21	; 0x07
    1268:	1d c0       	rjmp	.+58     	; 0x12a4 <_fpadd_parts+0x20e>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	81 83       	std	Z+1, r24	; 0x01
    126e:	33 82       	std	Z+3, r3	; 0x03
    1270:	22 82       	std	Z+2, r2	; 0x02
    1272:	88 27       	eor	r24, r24
    1274:	99 27       	eor	r25, r25
    1276:	dc 01       	movw	r26, r24
    1278:	82 1b       	sub	r24, r18
    127a:	93 0b       	sbc	r25, r19
    127c:	a4 0b       	sbc	r26, r20
    127e:	b5 0b       	sbc	r27, r21
    1280:	84 83       	std	Z+4, r24	; 0x04
    1282:	95 83       	std	Z+5, r25	; 0x05
    1284:	a6 83       	std	Z+6, r26	; 0x06
    1286:	b7 83       	std	Z+7, r27	; 0x07
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <_fpadd_parts+0x20e>
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	44 1f       	adc	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	24 83       	std	Z+4, r18	; 0x04
    1294:	35 83       	std	Z+5, r19	; 0x05
    1296:	46 83       	std	Z+6, r20	; 0x06
    1298:	57 83       	std	Z+7, r21	; 0x07
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	93 83       	std	Z+3, r25	; 0x03
    12a2:	82 83       	std	Z+2, r24	; 0x02
    12a4:	24 81       	ldd	r18, Z+4	; 0x04
    12a6:	35 81       	ldd	r19, Z+5	; 0x05
    12a8:	46 81       	ldd	r20, Z+6	; 0x06
    12aa:	57 81       	ldd	r21, Z+7	; 0x07
    12ac:	da 01       	movw	r26, r20
    12ae:	c9 01       	movw	r24, r18
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	a1 09       	sbc	r26, r1
    12b4:	b1 09       	sbc	r27, r1
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	af 4f       	sbci	r26, 0xFF	; 255
    12bc:	bf 43       	sbci	r27, 0x3F	; 63
    12be:	28 f3       	brcs	.-54     	; 0x128a <_fpadd_parts+0x1f4>
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <_fpadd_parts+0x242>
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	33 82       	std	Z+3, r3	; 0x03
    12c6:	22 82       	std	Z+2, r2	; 0x02
    12c8:	ea 0c       	add	r14, r10
    12ca:	fb 1c       	adc	r15, r11
    12cc:	0c 1d       	adc	r16, r12
    12ce:	1d 1d       	adc	r17, r13
    12d0:	e4 82       	std	Z+4, r14	; 0x04
    12d2:	f5 82       	std	Z+5, r15	; 0x05
    12d4:	06 83       	std	Z+6, r16	; 0x06
    12d6:	17 83       	std	Z+7, r17	; 0x07
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	80 83       	st	Z, r24
    12dc:	24 81       	ldd	r18, Z+4	; 0x04
    12de:	35 81       	ldd	r19, Z+5	; 0x05
    12e0:	46 81       	ldd	r20, Z+6	; 0x06
    12e2:	57 81       	ldd	r21, Z+7	; 0x07
    12e4:	57 ff       	sbrs	r21, 7
    12e6:	1a c0       	rjmp	.+52     	; 0x131c <_fpadd_parts+0x286>
    12e8:	c9 01       	movw	r24, r18
    12ea:	aa 27       	eor	r26, r26
    12ec:	97 fd       	sbrc	r25, 7
    12ee:	a0 95       	com	r26
    12f0:	ba 2f       	mov	r27, r26
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	a0 70       	andi	r26, 0x00	; 0
    12f8:	b0 70       	andi	r27, 0x00	; 0
    12fa:	56 95       	lsr	r21
    12fc:	47 95       	ror	r20
    12fe:	37 95       	ror	r19
    1300:	27 95       	ror	r18
    1302:	82 2b       	or	r24, r18
    1304:	93 2b       	or	r25, r19
    1306:	a4 2b       	or	r26, r20
    1308:	b5 2b       	or	r27, r21
    130a:	84 83       	std	Z+4, r24	; 0x04
    130c:	95 83       	std	Z+5, r25	; 0x05
    130e:	a6 83       	std	Z+6, r26	; 0x06
    1310:	b7 83       	std	Z+7, r27	; 0x07
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	93 83       	std	Z+3, r25	; 0x03
    131a:	82 83       	std	Z+2, r24	; 0x02
    131c:	df 01       	movw	r26, r30
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <_fpadd_parts+0x28c>
    1320:	d2 01       	movw	r26, r4
    1322:	cd 01       	movw	r24, r26
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	e2 e1       	ldi	r30, 0x12	; 18
    132a:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__epilogue_restores__>

0000132e <__subsf3>:
    132e:	a0 e2       	ldi	r26, 0x20	; 32
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ed e9       	ldi	r30, 0x9D	; 157
    1334:	f9 e0       	ldi	r31, 0x09	; 9
    1336:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__prologue_saves__+0x18>
    133a:	69 83       	std	Y+1, r22	; 0x01
    133c:	7a 83       	std	Y+2, r23	; 0x02
    133e:	8b 83       	std	Y+3, r24	; 0x03
    1340:	9c 83       	std	Y+4, r25	; 0x04
    1342:	2d 83       	std	Y+5, r18	; 0x05
    1344:	3e 83       	std	Y+6, r19	; 0x06
    1346:	4f 83       	std	Y+7, r20	; 0x07
    1348:	58 87       	std	Y+8, r21	; 0x08
    134a:	e9 e0       	ldi	r30, 0x09	; 9
    134c:	ee 2e       	mov	r14, r30
    134e:	f1 2c       	mov	r15, r1
    1350:	ec 0e       	add	r14, r28
    1352:	fd 1e       	adc	r15, r29
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	b7 01       	movw	r22, r14
    135a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    135e:	8e 01       	movw	r16, r28
    1360:	0f 5e       	subi	r16, 0xEF	; 239
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	ce 01       	movw	r24, r28
    1366:	05 96       	adiw	r24, 0x05	; 5
    1368:	b8 01       	movw	r22, r16
    136a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    136e:	8a 89       	ldd	r24, Y+18	; 0x12
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	89 27       	eor	r24, r25
    1374:	8a 8b       	std	Y+18, r24	; 0x12
    1376:	c7 01       	movw	r24, r14
    1378:	b8 01       	movw	r22, r16
    137a:	ae 01       	movw	r20, r28
    137c:	47 5e       	subi	r20, 0xE7	; 231
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	0e 94 4b 08 	call	0x1096	; 0x1096 <_fpadd_parts>
    1384:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__pack_f>
    1388:	a0 96       	adiw	r28, 0x20	; 32
    138a:	e6 e0       	ldi	r30, 0x06	; 6
    138c:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__epilogue_restores__+0x18>

00001390 <__addsf3>:
    1390:	a0 e2       	ldi	r26, 0x20	; 32
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ee ec       	ldi	r30, 0xCE	; 206
    1396:	f9 e0       	ldi	r31, 0x09	; 9
    1398:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__prologue_saves__+0x18>
    139c:	69 83       	std	Y+1, r22	; 0x01
    139e:	7a 83       	std	Y+2, r23	; 0x02
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	2d 83       	std	Y+5, r18	; 0x05
    13a6:	3e 83       	std	Y+6, r19	; 0x06
    13a8:	4f 83       	std	Y+7, r20	; 0x07
    13aa:	58 87       	std	Y+8, r21	; 0x08
    13ac:	f9 e0       	ldi	r31, 0x09	; 9
    13ae:	ef 2e       	mov	r14, r31
    13b0:	f1 2c       	mov	r15, r1
    13b2:	ec 0e       	add	r14, r28
    13b4:	fd 1e       	adc	r15, r29
    13b6:	ce 01       	movw	r24, r28
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	b7 01       	movw	r22, r14
    13bc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    13c0:	8e 01       	movw	r16, r28
    13c2:	0f 5e       	subi	r16, 0xEF	; 239
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
    13c6:	ce 01       	movw	r24, r28
    13c8:	05 96       	adiw	r24, 0x05	; 5
    13ca:	b8 01       	movw	r22, r16
    13cc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    13d0:	c7 01       	movw	r24, r14
    13d2:	b8 01       	movw	r22, r16
    13d4:	ae 01       	movw	r20, r28
    13d6:	47 5e       	subi	r20, 0xE7	; 231
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	0e 94 4b 08 	call	0x1096	; 0x1096 <_fpadd_parts>
    13de:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__pack_f>
    13e2:	a0 96       	adiw	r28, 0x20	; 32
    13e4:	e6 e0       	ldi	r30, 0x06	; 6
    13e6:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__epilogue_restores__+0x18>

000013ea <__mulsf3>:
    13ea:	a0 e2       	ldi	r26, 0x20	; 32
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	eb ef       	ldi	r30, 0xFB	; 251
    13f0:	f9 e0       	ldi	r31, 0x09	; 9
    13f2:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__prologue_saves__>
    13f6:	69 83       	std	Y+1, r22	; 0x01
    13f8:	7a 83       	std	Y+2, r23	; 0x02
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	2d 83       	std	Y+5, r18	; 0x05
    1400:	3e 83       	std	Y+6, r19	; 0x06
    1402:	4f 83       	std	Y+7, r20	; 0x07
    1404:	58 87       	std	Y+8, r21	; 0x08
    1406:	ce 01       	movw	r24, r28
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	be 01       	movw	r22, r28
    140c:	67 5f       	subi	r22, 0xF7	; 247
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    1414:	ce 01       	movw	r24, r28
    1416:	05 96       	adiw	r24, 0x05	; 5
    1418:	be 01       	movw	r22, r28
    141a:	6f 5e       	subi	r22, 0xEF	; 239
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    1422:	99 85       	ldd	r25, Y+9	; 0x09
    1424:	92 30       	cpi	r25, 0x02	; 2
    1426:	88 f0       	brcs	.+34     	; 0x144a <__mulsf3+0x60>
    1428:	89 89       	ldd	r24, Y+17	; 0x11
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	c8 f0       	brcs	.+50     	; 0x1460 <__mulsf3+0x76>
    142e:	94 30       	cpi	r25, 0x04	; 4
    1430:	19 f4       	brne	.+6      	; 0x1438 <__mulsf3+0x4e>
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	51 f4       	brne	.+20     	; 0x144a <__mulsf3+0x60>
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <__mulsf3+0x56>
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	29 f4       	brne	.+10     	; 0x1446 <__mulsf3+0x5c>
    143c:	92 30       	cpi	r25, 0x02	; 2
    143e:	81 f4       	brne	.+32     	; 0x1460 <__mulsf3+0x76>
    1440:	83 e1       	ldi	r24, 0x13	; 19
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	c6 c0       	rjmp	.+396    	; 0x15d2 <__mulsf3+0x1e8>
    1446:	92 30       	cpi	r25, 0x02	; 2
    1448:	49 f4       	brne	.+18     	; 0x145c <__mulsf3+0x72>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	8a 89       	ldd	r24, Y+18	; 0x12
    1450:	98 13       	cpse	r25, r24
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	2a 87       	std	Y+10, r18	; 0x0a
    1456:	ce 01       	movw	r24, r28
    1458:	09 96       	adiw	r24, 0x09	; 9
    145a:	bb c0       	rjmp	.+374    	; 0x15d2 <__mulsf3+0x1e8>
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	49 f4       	brne	.+18     	; 0x1472 <__mulsf3+0x88>
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	8a 89       	ldd	r24, Y+18	; 0x12
    1466:	98 13       	cpse	r25, r24
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	2a 8b       	std	Y+18, r18	; 0x12
    146c:	ce 01       	movw	r24, r28
    146e:	41 96       	adiw	r24, 0x11	; 17
    1470:	b0 c0       	rjmp	.+352    	; 0x15d2 <__mulsf3+0x1e8>
    1472:	2d 84       	ldd	r2, Y+13	; 0x0d
    1474:	3e 84       	ldd	r3, Y+14	; 0x0e
    1476:	4f 84       	ldd	r4, Y+15	; 0x0f
    1478:	58 88       	ldd	r5, Y+16	; 0x10
    147a:	6d 88       	ldd	r6, Y+21	; 0x15
    147c:	7e 88       	ldd	r7, Y+22	; 0x16
    147e:	8f 88       	ldd	r8, Y+23	; 0x17
    1480:	98 8c       	ldd	r9, Y+24	; 0x18
    1482:	ee 24       	eor	r14, r14
    1484:	ff 24       	eor	r15, r15
    1486:	87 01       	movw	r16, r14
    1488:	aa 24       	eor	r10, r10
    148a:	bb 24       	eor	r11, r11
    148c:	65 01       	movw	r12, r10
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	e0 e0       	ldi	r30, 0x00	; 0
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	c1 01       	movw	r24, r2
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	90 70       	andi	r25, 0x00	; 0
    14a0:	89 2b       	or	r24, r25
    14a2:	e9 f0       	breq	.+58     	; 0x14de <__mulsf3+0xf4>
    14a4:	e6 0c       	add	r14, r6
    14a6:	f7 1c       	adc	r15, r7
    14a8:	08 1d       	adc	r16, r8
    14aa:	19 1d       	adc	r17, r9
    14ac:	9a 01       	movw	r18, r20
    14ae:	ab 01       	movw	r20, r22
    14b0:	2a 0d       	add	r18, r10
    14b2:	3b 1d       	adc	r19, r11
    14b4:	4c 1d       	adc	r20, r12
    14b6:	5d 1d       	adc	r21, r13
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e6 14       	cp	r14, r6
    14c2:	f7 04       	cpc	r15, r7
    14c4:	08 05       	cpc	r16, r8
    14c6:	19 05       	cpc	r17, r9
    14c8:	20 f4       	brcc	.+8      	; 0x14d2 <__mulsf3+0xe8>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ba 01       	movw	r22, r20
    14d4:	a9 01       	movw	r20, r18
    14d6:	48 0f       	add	r20, r24
    14d8:	59 1f       	adc	r21, r25
    14da:	6a 1f       	adc	r22, r26
    14dc:	7b 1f       	adc	r23, r27
    14de:	aa 0c       	add	r10, r10
    14e0:	bb 1c       	adc	r11, r11
    14e2:	cc 1c       	adc	r12, r12
    14e4:	dd 1c       	adc	r13, r13
    14e6:	97 fe       	sbrs	r9, 7
    14e8:	08 c0       	rjmp	.+16     	; 0x14fa <__mulsf3+0x110>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	a8 2a       	or	r10, r24
    14f4:	b9 2a       	or	r11, r25
    14f6:	ca 2a       	or	r12, r26
    14f8:	db 2a       	or	r13, r27
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	e0 32       	cpi	r30, 0x20	; 32
    14fe:	f1 05       	cpc	r31, r1
    1500:	49 f0       	breq	.+18     	; 0x1514 <__mulsf3+0x12a>
    1502:	66 0c       	add	r6, r6
    1504:	77 1c       	adc	r7, r7
    1506:	88 1c       	adc	r8, r8
    1508:	99 1c       	adc	r9, r9
    150a:	56 94       	lsr	r5
    150c:	47 94       	ror	r4
    150e:	37 94       	ror	r3
    1510:	27 94       	ror	r2
    1512:	c3 cf       	rjmp	.-122    	; 0x149a <__mulsf3+0xb0>
    1514:	fa 85       	ldd	r31, Y+10	; 0x0a
    1516:	ea 89       	ldd	r30, Y+18	; 0x12
    1518:	2b 89       	ldd	r18, Y+19	; 0x13
    151a:	3c 89       	ldd	r19, Y+20	; 0x14
    151c:	8b 85       	ldd	r24, Y+11	; 0x0b
    151e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1520:	28 0f       	add	r18, r24
    1522:	39 1f       	adc	r19, r25
    1524:	2e 5f       	subi	r18, 0xFE	; 254
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	17 c0       	rjmp	.+46     	; 0x1558 <__mulsf3+0x16e>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	89 2b       	or	r24, r25
    1532:	61 f0       	breq	.+24     	; 0x154c <__mulsf3+0x162>
    1534:	16 95       	lsr	r17
    1536:	07 95       	ror	r16
    1538:	f7 94       	ror	r15
    153a:	e7 94       	ror	r14
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a0 e0       	ldi	r26, 0x00	; 0
    1542:	b0 e8       	ldi	r27, 0x80	; 128
    1544:	e8 2a       	or	r14, r24
    1546:	f9 2a       	or	r15, r25
    1548:	0a 2b       	or	r16, r26
    154a:	1b 2b       	or	r17, r27
    154c:	76 95       	lsr	r23
    154e:	67 95       	ror	r22
    1550:	57 95       	ror	r21
    1552:	47 95       	ror	r20
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	77 fd       	sbrc	r23, 7
    155a:	e7 cf       	rjmp	.-50     	; 0x152a <__mulsf3+0x140>
    155c:	0c c0       	rjmp	.+24     	; 0x1576 <__mulsf3+0x18c>
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	66 1f       	adc	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	17 fd       	sbrc	r17, 7
    1568:	41 60       	ori	r20, 0x01	; 1
    156a:	ee 0c       	add	r14, r14
    156c:	ff 1c       	adc	r15, r15
    156e:	00 1f       	adc	r16, r16
    1570:	11 1f       	adc	r17, r17
    1572:	21 50       	subi	r18, 0x01	; 1
    1574:	30 40       	sbci	r19, 0x00	; 0
    1576:	40 30       	cpi	r20, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	59 07       	cpc	r21, r25
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	69 07       	cpc	r22, r25
    1580:	90 e4       	ldi	r25, 0x40	; 64
    1582:	79 07       	cpc	r23, r25
    1584:	60 f3       	brcs	.-40     	; 0x155e <__mulsf3+0x174>
    1586:	2b 8f       	std	Y+27, r18	; 0x1b
    1588:	3c 8f       	std	Y+28, r19	; 0x1c
    158a:	db 01       	movw	r26, r22
    158c:	ca 01       	movw	r24, r20
    158e:	8f 77       	andi	r24, 0x7F	; 127
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	a0 70       	andi	r26, 0x00	; 0
    1594:	b0 70       	andi	r27, 0x00	; 0
    1596:	80 34       	cpi	r24, 0x40	; 64
    1598:	91 05       	cpc	r25, r1
    159a:	a1 05       	cpc	r26, r1
    159c:	b1 05       	cpc	r27, r1
    159e:	61 f4       	brne	.+24     	; 0x15b8 <__mulsf3+0x1ce>
    15a0:	47 fd       	sbrc	r20, 7
    15a2:	0a c0       	rjmp	.+20     	; 0x15b8 <__mulsf3+0x1ce>
    15a4:	e1 14       	cp	r14, r1
    15a6:	f1 04       	cpc	r15, r1
    15a8:	01 05       	cpc	r16, r1
    15aa:	11 05       	cpc	r17, r1
    15ac:	29 f0       	breq	.+10     	; 0x15b8 <__mulsf3+0x1ce>
    15ae:	40 5c       	subi	r20, 0xC0	; 192
    15b0:	5f 4f       	sbci	r21, 0xFF	; 255
    15b2:	6f 4f       	sbci	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	40 78       	andi	r20, 0x80	; 128
    15b8:	1a 8e       	std	Y+26, r1	; 0x1a
    15ba:	fe 17       	cp	r31, r30
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <__mulsf3+0x1d8>
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	8a 8f       	std	Y+26, r24	; 0x1a
    15c2:	4d 8f       	std	Y+29, r20	; 0x1d
    15c4:	5e 8f       	std	Y+30, r21	; 0x1e
    15c6:	6f 8f       	std	Y+31, r22	; 0x1f
    15c8:	78 a3       	std	Y+32, r23	; 0x20
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	89 8f       	std	Y+25, r24	; 0x19
    15ce:	ce 01       	movw	r24, r28
    15d0:	49 96       	adiw	r24, 0x19	; 25
    15d2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__pack_f>
    15d6:	a0 96       	adiw	r28, 0x20	; 32
    15d8:	e2 e1       	ldi	r30, 0x12	; 18
    15da:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__epilogue_restores__>

000015de <__divsf3>:
    15de:	a8 e1       	ldi	r26, 0x18	; 24
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 ef       	ldi	r30, 0xF5	; 245
    15e4:	fa e0       	ldi	r31, 0x0A	; 10
    15e6:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__prologue_saves__+0x10>
    15ea:	69 83       	std	Y+1, r22	; 0x01
    15ec:	7a 83       	std	Y+2, r23	; 0x02
    15ee:	8b 83       	std	Y+3, r24	; 0x03
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	2d 83       	std	Y+5, r18	; 0x05
    15f4:	3e 83       	std	Y+6, r19	; 0x06
    15f6:	4f 83       	std	Y+7, r20	; 0x07
    15f8:	58 87       	std	Y+8, r21	; 0x08
    15fa:	b9 e0       	ldi	r27, 0x09	; 9
    15fc:	eb 2e       	mov	r14, r27
    15fe:	f1 2c       	mov	r15, r1
    1600:	ec 0e       	add	r14, r28
    1602:	fd 1e       	adc	r15, r29
    1604:	ce 01       	movw	r24, r28
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	b7 01       	movw	r22, r14
    160a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    160e:	8e 01       	movw	r16, r28
    1610:	0f 5e       	subi	r16, 0xEF	; 239
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	ce 01       	movw	r24, r28
    1616:	05 96       	adiw	r24, 0x05	; 5
    1618:	b8 01       	movw	r22, r16
    161a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    161e:	29 85       	ldd	r18, Y+9	; 0x09
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	08 f4       	brcc	.+2      	; 0x1626 <__divsf3+0x48>
    1624:	7e c0       	rjmp	.+252    	; 0x1722 <__divsf3+0x144>
    1626:	39 89       	ldd	r19, Y+17	; 0x11
    1628:	32 30       	cpi	r19, 0x02	; 2
    162a:	10 f4       	brcc	.+4      	; 0x1630 <__divsf3+0x52>
    162c:	b8 01       	movw	r22, r16
    162e:	7c c0       	rjmp	.+248    	; 0x1728 <__divsf3+0x14a>
    1630:	8a 85       	ldd	r24, Y+10	; 0x0a
    1632:	9a 89       	ldd	r25, Y+18	; 0x12
    1634:	89 27       	eor	r24, r25
    1636:	8a 87       	std	Y+10, r24	; 0x0a
    1638:	24 30       	cpi	r18, 0x04	; 4
    163a:	11 f0       	breq	.+4      	; 0x1640 <__divsf3+0x62>
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 f4       	brne	.+12     	; 0x164c <__divsf3+0x6e>
    1640:	23 17       	cp	r18, r19
    1642:	09 f0       	breq	.+2      	; 0x1646 <__divsf3+0x68>
    1644:	6e c0       	rjmp	.+220    	; 0x1722 <__divsf3+0x144>
    1646:	63 e1       	ldi	r22, 0x13	; 19
    1648:	77 e0       	ldi	r23, 0x07	; 7
    164a:	6e c0       	rjmp	.+220    	; 0x1728 <__divsf3+0x14a>
    164c:	34 30       	cpi	r19, 0x04	; 4
    164e:	39 f4       	brne	.+14     	; 0x165e <__divsf3+0x80>
    1650:	1d 86       	std	Y+13, r1	; 0x0d
    1652:	1e 86       	std	Y+14, r1	; 0x0e
    1654:	1f 86       	std	Y+15, r1	; 0x0f
    1656:	18 8a       	std	Y+16, r1	; 0x10
    1658:	1c 86       	std	Y+12, r1	; 0x0c
    165a:	1b 86       	std	Y+11, r1	; 0x0b
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <__divsf3+0x88>
    165e:	32 30       	cpi	r19, 0x02	; 2
    1660:	21 f4       	brne	.+8      	; 0x166a <__divsf3+0x8c>
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	89 87       	std	Y+9, r24	; 0x09
    1666:	b7 01       	movw	r22, r14
    1668:	5f c0       	rjmp	.+190    	; 0x1728 <__divsf3+0x14a>
    166a:	2b 85       	ldd	r18, Y+11	; 0x0b
    166c:	3c 85       	ldd	r19, Y+12	; 0x0c
    166e:	8b 89       	ldd	r24, Y+19	; 0x13
    1670:	9c 89       	ldd	r25, Y+20	; 0x14
    1672:	28 1b       	sub	r18, r24
    1674:	39 0b       	sbc	r19, r25
    1676:	3c 87       	std	Y+12, r19	; 0x0c
    1678:	2b 87       	std	Y+11, r18	; 0x0b
    167a:	ed 84       	ldd	r14, Y+13	; 0x0d
    167c:	fe 84       	ldd	r15, Y+14	; 0x0e
    167e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1680:	18 89       	ldd	r17, Y+16	; 0x10
    1682:	ad 88       	ldd	r10, Y+21	; 0x15
    1684:	be 88       	ldd	r11, Y+22	; 0x16
    1686:	cf 88       	ldd	r12, Y+23	; 0x17
    1688:	d8 8c       	ldd	r13, Y+24	; 0x18
    168a:	ea 14       	cp	r14, r10
    168c:	fb 04       	cpc	r15, r11
    168e:	0c 05       	cpc	r16, r12
    1690:	1d 05       	cpc	r17, r13
    1692:	40 f4       	brcc	.+16     	; 0x16a4 <__divsf3+0xc6>
    1694:	ee 0c       	add	r14, r14
    1696:	ff 1c       	adc	r15, r15
    1698:	00 1f       	adc	r16, r16
    169a:	11 1f       	adc	r17, r17
    169c:	21 50       	subi	r18, 0x01	; 1
    169e:	30 40       	sbci	r19, 0x00	; 0
    16a0:	3c 87       	std	Y+12, r19	; 0x0c
    16a2:	2b 87       	std	Y+11, r18	; 0x0b
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e4       	ldi	r27, 0x40	; 64
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	ea 14       	cp	r14, r10
    16ba:	fb 04       	cpc	r15, r11
    16bc:	0c 05       	cpc	r16, r12
    16be:	1d 05       	cpc	r17, r13
    16c0:	40 f0       	brcs	.+16     	; 0x16d2 <__divsf3+0xf4>
    16c2:	28 2b       	or	r18, r24
    16c4:	39 2b       	or	r19, r25
    16c6:	4a 2b       	or	r20, r26
    16c8:	5b 2b       	or	r21, r27
    16ca:	ea 18       	sub	r14, r10
    16cc:	fb 08       	sbc	r15, r11
    16ce:	0c 09       	sbc	r16, r12
    16d0:	1d 09       	sbc	r17, r13
    16d2:	b6 95       	lsr	r27
    16d4:	a7 95       	ror	r26
    16d6:	97 95       	ror	r25
    16d8:	87 95       	ror	r24
    16da:	ee 0c       	add	r14, r14
    16dc:	ff 1c       	adc	r15, r15
    16de:	00 1f       	adc	r16, r16
    16e0:	11 1f       	adc	r17, r17
    16e2:	6f 5f       	subi	r22, 0xFF	; 255
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	6f 31       	cpi	r22, 0x1F	; 31
    16e8:	71 05       	cpc	r23, r1
    16ea:	31 f7       	brne	.-52     	; 0x16b8 <__divsf3+0xda>
    16ec:	da 01       	movw	r26, r20
    16ee:	c9 01       	movw	r24, r18
    16f0:	8f 77       	andi	r24, 0x7F	; 127
    16f2:	90 70       	andi	r25, 0x00	; 0
    16f4:	a0 70       	andi	r26, 0x00	; 0
    16f6:	b0 70       	andi	r27, 0x00	; 0
    16f8:	80 34       	cpi	r24, 0x40	; 64
    16fa:	91 05       	cpc	r25, r1
    16fc:	a1 05       	cpc	r26, r1
    16fe:	b1 05       	cpc	r27, r1
    1700:	61 f4       	brne	.+24     	; 0x171a <__divsf3+0x13c>
    1702:	27 fd       	sbrc	r18, 7
    1704:	0a c0       	rjmp	.+20     	; 0x171a <__divsf3+0x13c>
    1706:	e1 14       	cp	r14, r1
    1708:	f1 04       	cpc	r15, r1
    170a:	01 05       	cpc	r16, r1
    170c:	11 05       	cpc	r17, r1
    170e:	29 f0       	breq	.+10     	; 0x171a <__divsf3+0x13c>
    1710:	20 5c       	subi	r18, 0xC0	; 192
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	4f 4f       	sbci	r20, 0xFF	; 255
    1716:	5f 4f       	sbci	r21, 0xFF	; 255
    1718:	20 78       	andi	r18, 0x80	; 128
    171a:	2d 87       	std	Y+13, r18	; 0x0d
    171c:	3e 87       	std	Y+14, r19	; 0x0e
    171e:	4f 87       	std	Y+15, r20	; 0x0f
    1720:	58 8b       	std	Y+16, r21	; 0x10
    1722:	be 01       	movw	r22, r28
    1724:	67 5f       	subi	r22, 0xF7	; 247
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	cb 01       	movw	r24, r22
    172a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__pack_f>
    172e:	68 96       	adiw	r28, 0x18	; 24
    1730:	ea e0       	ldi	r30, 0x0A	; 10
    1732:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__epilogue_restores__+0x10>

00001736 <__gtsf2>:
    1736:	a8 e1       	ldi	r26, 0x18	; 24
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e1 ea       	ldi	r30, 0xA1	; 161
    173c:	fb e0       	ldi	r31, 0x0B	; 11
    173e:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__prologue_saves__+0x18>
    1742:	69 83       	std	Y+1, r22	; 0x01
    1744:	7a 83       	std	Y+2, r23	; 0x02
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	2d 83       	std	Y+5, r18	; 0x05
    174c:	3e 83       	std	Y+6, r19	; 0x06
    174e:	4f 83       	std	Y+7, r20	; 0x07
    1750:	58 87       	std	Y+8, r21	; 0x08
    1752:	89 e0       	ldi	r24, 0x09	; 9
    1754:	e8 2e       	mov	r14, r24
    1756:	f1 2c       	mov	r15, r1
    1758:	ec 0e       	add	r14, r28
    175a:	fd 1e       	adc	r15, r29
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	b7 01       	movw	r22, r14
    1762:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    1766:	8e 01       	movw	r16, r28
    1768:	0f 5e       	subi	r16, 0xEF	; 239
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	ce 01       	movw	r24, r28
    176e:	05 96       	adiw	r24, 0x05	; 5
    1770:	b8 01       	movw	r22, r16
    1772:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    1776:	89 85       	ldd	r24, Y+9	; 0x09
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	40 f0       	brcs	.+16     	; 0x178c <__gtsf2+0x56>
    177c:	89 89       	ldd	r24, Y+17	; 0x11
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	28 f0       	brcs	.+10     	; 0x178c <__gtsf2+0x56>
    1782:	c7 01       	movw	r24, r14
    1784:	b8 01       	movw	r22, r16
    1786:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fpcmp_parts_f>
    178a:	01 c0       	rjmp	.+2      	; 0x178e <__gtsf2+0x58>
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	68 96       	adiw	r28, 0x18	; 24
    1790:	e6 e0       	ldi	r30, 0x06	; 6
    1792:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__epilogue_restores__+0x18>

00001796 <__floatsisf>:
    1796:	a8 e0       	ldi	r26, 0x08	; 8
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e1 ed       	ldi	r30, 0xD1	; 209
    179c:	fb e0       	ldi	r31, 0x0B	; 11
    179e:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x12>
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	da 01       	movw	r26, r20
    17ac:	c9 01       	movw	r24, r18
    17ae:	88 27       	eor	r24, r24
    17b0:	b7 fd       	sbrc	r27, 7
    17b2:	83 95       	inc	r24
    17b4:	99 27       	eor	r25, r25
    17b6:	aa 27       	eor	r26, r26
    17b8:	bb 27       	eor	r27, r27
    17ba:	b8 2e       	mov	r11, r24
    17bc:	21 15       	cp	r18, r1
    17be:	31 05       	cpc	r19, r1
    17c0:	41 05       	cpc	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	19 f4       	brne	.+6      	; 0x17cc <__floatsisf+0x36>
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	3a c0       	rjmp	.+116    	; 0x1840 <__floatsisf+0xaa>
    17cc:	88 23       	and	r24, r24
    17ce:	a9 f0       	breq	.+42     	; 0x17fa <__floatsisf+0x64>
    17d0:	20 30       	cpi	r18, 0x00	; 0
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	38 07       	cpc	r19, r24
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	48 07       	cpc	r20, r24
    17da:	80 e8       	ldi	r24, 0x80	; 128
    17dc:	58 07       	cpc	r21, r24
    17de:	29 f4       	brne	.+10     	; 0x17ea <__floatsisf+0x54>
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	9f ec       	ldi	r25, 0xCF	; 207
    17e8:	30 c0       	rjmp	.+96     	; 0x184a <__floatsisf+0xb4>
    17ea:	ee 24       	eor	r14, r14
    17ec:	ff 24       	eor	r15, r15
    17ee:	87 01       	movw	r16, r14
    17f0:	e2 1a       	sub	r14, r18
    17f2:	f3 0a       	sbc	r15, r19
    17f4:	04 0b       	sbc	r16, r20
    17f6:	15 0b       	sbc	r17, r21
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <__floatsisf+0x68>
    17fa:	79 01       	movw	r14, r18
    17fc:	8a 01       	movw	r16, r20
    17fe:	8e e1       	ldi	r24, 0x1E	; 30
    1800:	c8 2e       	mov	r12, r24
    1802:	d1 2c       	mov	r13, r1
    1804:	dc 82       	std	Y+4, r13	; 0x04
    1806:	cb 82       	std	Y+3, r12	; 0x03
    1808:	ed 82       	std	Y+5, r14	; 0x05
    180a:	fe 82       	std	Y+6, r15	; 0x06
    180c:	0f 83       	std	Y+7, r16	; 0x07
    180e:	18 87       	std	Y+8, r17	; 0x08
    1810:	c8 01       	movw	r24, r16
    1812:	b7 01       	movw	r22, r14
    1814:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__clzsi2>
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	18 16       	cp	r1, r24
    181c:	19 06       	cpc	r1, r25
    181e:	84 f4       	brge	.+32     	; 0x1840 <__floatsisf+0xaa>
    1820:	08 2e       	mov	r0, r24
    1822:	04 c0       	rjmp	.+8      	; 0x182c <__floatsisf+0x96>
    1824:	ee 0c       	add	r14, r14
    1826:	ff 1c       	adc	r15, r15
    1828:	00 1f       	adc	r16, r16
    182a:	11 1f       	adc	r17, r17
    182c:	0a 94       	dec	r0
    182e:	d2 f7       	brpl	.-12     	; 0x1824 <__floatsisf+0x8e>
    1830:	ed 82       	std	Y+5, r14	; 0x05
    1832:	fe 82       	std	Y+6, r15	; 0x06
    1834:	0f 83       	std	Y+7, r16	; 0x07
    1836:	18 87       	std	Y+8, r17	; 0x08
    1838:	c8 1a       	sub	r12, r24
    183a:	d9 0a       	sbc	r13, r25
    183c:	dc 82       	std	Y+4, r13	; 0x04
    183e:	cb 82       	std	Y+3, r12	; 0x03
    1840:	ba 82       	std	Y+2, r11	; 0x02
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__pack_f>
    184a:	28 96       	adiw	r28, 0x08	; 8
    184c:	e9 e0       	ldi	r30, 0x09	; 9
    184e:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x12>

00001852 <__fixsfsi>:
    1852:	ac e0       	ldi	r26, 0x0C	; 12
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ef e2       	ldi	r30, 0x2F	; 47
    1858:	fc e0       	ldi	r31, 0x0C	; 12
    185a:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__prologue_saves__+0x20>
    185e:	69 83       	std	Y+1, r22	; 0x01
    1860:	7a 83       	std	Y+2, r23	; 0x02
    1862:	8b 83       	std	Y+3, r24	; 0x03
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	be 01       	movw	r22, r28
    186c:	6b 5f       	subi	r22, 0xFB	; 251
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__unpack_f>
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	61 f1       	breq	.+88     	; 0x18d2 <__fixsfsi+0x80>
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	50 f1       	brcs	.+84     	; 0x18d2 <__fixsfsi+0x80>
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	21 f4       	brne	.+8      	; 0x188a <__fixsfsi+0x38>
    1882:	8e 81       	ldd	r24, Y+6	; 0x06
    1884:	88 23       	and	r24, r24
    1886:	51 f1       	breq	.+84     	; 0x18dc <__fixsfsi+0x8a>
    1888:	2e c0       	rjmp	.+92     	; 0x18e6 <__fixsfsi+0x94>
    188a:	2f 81       	ldd	r18, Y+7	; 0x07
    188c:	38 85       	ldd	r19, Y+8	; 0x08
    188e:	37 fd       	sbrc	r19, 7
    1890:	20 c0       	rjmp	.+64     	; 0x18d2 <__fixsfsi+0x80>
    1892:	6e 81       	ldd	r22, Y+6	; 0x06
    1894:	2f 31       	cpi	r18, 0x1F	; 31
    1896:	31 05       	cpc	r19, r1
    1898:	1c f0       	brlt	.+6      	; 0x18a0 <__fixsfsi+0x4e>
    189a:	66 23       	and	r22, r22
    189c:	f9 f0       	breq	.+62     	; 0x18dc <__fixsfsi+0x8a>
    189e:	23 c0       	rjmp	.+70     	; 0x18e6 <__fixsfsi+0x94>
    18a0:	8e e1       	ldi	r24, 0x1E	; 30
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	82 1b       	sub	r24, r18
    18a6:	93 0b       	sbc	r25, r19
    18a8:	29 85       	ldd	r18, Y+9	; 0x09
    18aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    18ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <__fixsfsi+0x68>
    18b2:	56 95       	lsr	r21
    18b4:	47 95       	ror	r20
    18b6:	37 95       	ror	r19
    18b8:	27 95       	ror	r18
    18ba:	8a 95       	dec	r24
    18bc:	d2 f7       	brpl	.-12     	; 0x18b2 <__fixsfsi+0x60>
    18be:	66 23       	and	r22, r22
    18c0:	b1 f0       	breq	.+44     	; 0x18ee <__fixsfsi+0x9c>
    18c2:	50 95       	com	r21
    18c4:	40 95       	com	r20
    18c6:	30 95       	com	r19
    18c8:	21 95       	neg	r18
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	4f 4f       	sbci	r20, 0xFF	; 255
    18ce:	5f 4f       	sbci	r21, 0xFF	; 255
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <__fixsfsi+0x9c>
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <__fixsfsi+0x9c>
    18dc:	2f ef       	ldi	r18, 0xFF	; 255
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f ef       	ldi	r20, 0xFF	; 255
    18e2:	5f e7       	ldi	r21, 0x7F	; 127
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <__fixsfsi+0x9c>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	50 e8       	ldi	r21, 0x80	; 128
    18ee:	b9 01       	movw	r22, r18
    18f0:	ca 01       	movw	r24, r20
    18f2:	2c 96       	adiw	r28, 0x0c	; 12
    18f4:	e2 e0       	ldi	r30, 0x02	; 2
    18f6:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__epilogue_restores__+0x20>

000018fa <__clzsi2>:
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	7b 01       	movw	r14, r22
    1904:	8c 01       	movw	r16, r24
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	e8 16       	cp	r14, r24
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	f8 06       	cpc	r15, r24
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	08 07       	cpc	r16, r24
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	18 07       	cpc	r17, r24
    1916:	88 f4       	brcc	.+34     	; 0x193a <__clzsi2+0x40>
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	e8 16       	cp	r14, r24
    191c:	f1 04       	cpc	r15, r1
    191e:	01 05       	cpc	r16, r1
    1920:	11 05       	cpc	r17, r1
    1922:	31 f0       	breq	.+12     	; 0x1930 <__clzsi2+0x36>
    1924:	28 f0       	brcs	.+10     	; 0x1930 <__clzsi2+0x36>
    1926:	88 e0       	ldi	r24, 0x08	; 8
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	17 c0       	rjmp	.+46     	; 0x195e <__clzsi2+0x64>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e0       	ldi	r26, 0x00	; 0
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	12 c0       	rjmp	.+36     	; 0x195e <__clzsi2+0x64>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	e8 16       	cp	r14, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	f8 06       	cpc	r15, r24
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 07       	cpc	r16, r24
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	18 07       	cpc	r17, r24
    194a:	28 f0       	brcs	.+10     	; 0x1956 <__clzsi2+0x5c>
    194c:	88 e1       	ldi	r24, 0x18	; 24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	04 c0       	rjmp	.+8      	; 0x195e <__clzsi2+0x64>
    1956:	80 e1       	ldi	r24, 0x10	; 16
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e0       	ldi	r26, 0x00	; 0
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	20 e2       	ldi	r18, 0x20	; 32
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	28 1b       	sub	r18, r24
    1968:	39 0b       	sbc	r19, r25
    196a:	4a 0b       	sbc	r20, r26
    196c:	5b 0b       	sbc	r21, r27
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <__clzsi2+0x7e>
    1970:	16 95       	lsr	r17
    1972:	07 95       	ror	r16
    1974:	f7 94       	ror	r15
    1976:	e7 94       	ror	r14
    1978:	8a 95       	dec	r24
    197a:	d2 f7       	brpl	.-12     	; 0x1970 <__clzsi2+0x76>
    197c:	f7 01       	movw	r30, r14
    197e:	e5 5e       	subi	r30, 0xE5	; 229
    1980:	f8 4f       	sbci	r31, 0xF8	; 248
    1982:	80 81       	ld	r24, Z
    1984:	28 1b       	sub	r18, r24
    1986:	31 09       	sbc	r19, r1
    1988:	41 09       	sbc	r20, r1
    198a:	51 09       	sbc	r21, r1
    198c:	c9 01       	movw	r24, r18
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	08 95       	ret

00001998 <__pack_f>:
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	fc 01       	movw	r30, r24
    19a4:	e4 80       	ldd	r14, Z+4	; 0x04
    19a6:	f5 80       	ldd	r15, Z+5	; 0x05
    19a8:	06 81       	ldd	r16, Z+6	; 0x06
    19aa:	17 81       	ldd	r17, Z+7	; 0x07
    19ac:	d1 80       	ldd	r13, Z+1	; 0x01
    19ae:	80 81       	ld	r24, Z
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	48 f4       	brcc	.+18     	; 0x19c6 <__pack_f+0x2e>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e1       	ldi	r26, 0x10	; 16
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e8 2a       	or	r14, r24
    19be:	f9 2a       	or	r15, r25
    19c0:	0a 2b       	or	r16, r26
    19c2:	1b 2b       	or	r17, r27
    19c4:	a5 c0       	rjmp	.+330    	; 0x1b10 <__pack_f+0x178>
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	09 f4       	brne	.+2      	; 0x19cc <__pack_f+0x34>
    19ca:	9f c0       	rjmp	.+318    	; 0x1b0a <__pack_f+0x172>
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <__pack_f+0x40>
    19d0:	ee 24       	eor	r14, r14
    19d2:	ff 24       	eor	r15, r15
    19d4:	87 01       	movw	r16, r14
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <__pack_f+0x4a>
    19d8:	e1 14       	cp	r14, r1
    19da:	f1 04       	cpc	r15, r1
    19dc:	01 05       	cpc	r16, r1
    19de:	11 05       	cpc	r17, r1
    19e0:	19 f4       	brne	.+6      	; 0x19e8 <__pack_f+0x50>
    19e2:	e0 e0       	ldi	r30, 0x00	; 0
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	96 c0       	rjmp	.+300    	; 0x1b14 <__pack_f+0x17c>
    19e8:	62 81       	ldd	r22, Z+2	; 0x02
    19ea:	73 81       	ldd	r23, Z+3	; 0x03
    19ec:	9f ef       	ldi	r25, 0xFF	; 255
    19ee:	62 38       	cpi	r22, 0x82	; 130
    19f0:	79 07       	cpc	r23, r25
    19f2:	0c f0       	brlt	.+2      	; 0x19f6 <__pack_f+0x5e>
    19f4:	5b c0       	rjmp	.+182    	; 0x1aac <__pack_f+0x114>
    19f6:	22 e8       	ldi	r18, 0x82	; 130
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	26 1b       	sub	r18, r22
    19fc:	37 0b       	sbc	r19, r23
    19fe:	2a 31       	cpi	r18, 0x1A	; 26
    1a00:	31 05       	cpc	r19, r1
    1a02:	2c f0       	brlt	.+10     	; 0x1a0e <__pack_f+0x76>
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	2a c0       	rjmp	.+84     	; 0x1a62 <__pack_f+0xca>
    1a0e:	b8 01       	movw	r22, r16
    1a10:	a7 01       	movw	r20, r14
    1a12:	02 2e       	mov	r0, r18
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <__pack_f+0x86>
    1a16:	76 95       	lsr	r23
    1a18:	67 95       	ror	r22
    1a1a:	57 95       	ror	r21
    1a1c:	47 95       	ror	r20
    1a1e:	0a 94       	dec	r0
    1a20:	d2 f7       	brpl	.-12     	; 0x1a16 <__pack_f+0x7e>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__pack_f+0x9c>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	aa 1f       	adc	r26, r26
    1a32:	bb 1f       	adc	r27, r27
    1a34:	2a 95       	dec	r18
    1a36:	d2 f7       	brpl	.-12     	; 0x1a2c <__pack_f+0x94>
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	a1 09       	sbc	r26, r1
    1a3c:	b1 09       	sbc	r27, r1
    1a3e:	8e 21       	and	r24, r14
    1a40:	9f 21       	and	r25, r15
    1a42:	a0 23       	and	r26, r16
    1a44:	b1 23       	and	r27, r17
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	a1 05       	cpc	r26, r1
    1a4a:	b1 05       	cpc	r27, r1
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <__pack_f+0xbe>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	9a 01       	movw	r18, r20
    1a58:	ab 01       	movw	r20, r22
    1a5a:	28 2b       	or	r18, r24
    1a5c:	39 2b       	or	r19, r25
    1a5e:	4a 2b       	or	r20, r26
    1a60:	5b 2b       	or	r21, r27
    1a62:	da 01       	movw	r26, r20
    1a64:	c9 01       	movw	r24, r18
    1a66:	8f 77       	andi	r24, 0x7F	; 127
    1a68:	90 70       	andi	r25, 0x00	; 0
    1a6a:	a0 70       	andi	r26, 0x00	; 0
    1a6c:	b0 70       	andi	r27, 0x00	; 0
    1a6e:	80 34       	cpi	r24, 0x40	; 64
    1a70:	91 05       	cpc	r25, r1
    1a72:	a1 05       	cpc	r26, r1
    1a74:	b1 05       	cpc	r27, r1
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <__pack_f+0xee>
    1a78:	27 ff       	sbrs	r18, 7
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <__pack_f+0xf6>
    1a7c:	20 5c       	subi	r18, 0xC0	; 192
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	4f 4f       	sbci	r20, 0xFF	; 255
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <__pack_f+0xf6>
    1a86:	21 5c       	subi	r18, 0xC1	; 193
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	e0 e0       	ldi	r30, 0x00	; 0
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	20 30       	cpi	r18, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	3a 07       	cpc	r19, r26
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	4a 07       	cpc	r20, r26
    1a9c:	a0 e4       	ldi	r26, 0x40	; 64
    1a9e:	5a 07       	cpc	r21, r26
    1aa0:	10 f0       	brcs	.+4      	; 0x1aa6 <__pack_f+0x10e>
    1aa2:	e1 e0       	ldi	r30, 0x01	; 1
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	79 01       	movw	r14, r18
    1aa8:	8a 01       	movw	r16, r20
    1aaa:	27 c0       	rjmp	.+78     	; 0x1afa <__pack_f+0x162>
    1aac:	60 38       	cpi	r22, 0x80	; 128
    1aae:	71 05       	cpc	r23, r1
    1ab0:	64 f5       	brge	.+88     	; 0x1b0a <__pack_f+0x172>
    1ab2:	fb 01       	movw	r30, r22
    1ab4:	e1 58       	subi	r30, 0x81	; 129
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	d8 01       	movw	r26, r16
    1aba:	c7 01       	movw	r24, r14
    1abc:	8f 77       	andi	r24, 0x7F	; 127
    1abe:	90 70       	andi	r25, 0x00	; 0
    1ac0:	a0 70       	andi	r26, 0x00	; 0
    1ac2:	b0 70       	andi	r27, 0x00	; 0
    1ac4:	80 34       	cpi	r24, 0x40	; 64
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	a1 05       	cpc	r26, r1
    1aca:	b1 05       	cpc	r27, r1
    1acc:	39 f4       	brne	.+14     	; 0x1adc <__pack_f+0x144>
    1ace:	e7 fe       	sbrs	r14, 7
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <__pack_f+0x154>
    1ad2:	80 e4       	ldi	r24, 0x40	; 64
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e0       	ldi	r26, 0x00	; 0
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <__pack_f+0x14c>
    1adc:	8f e3       	ldi	r24, 0x3F	; 63
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e8 0e       	add	r14, r24
    1ae6:	f9 1e       	adc	r15, r25
    1ae8:	0a 1f       	adc	r16, r26
    1aea:	1b 1f       	adc	r17, r27
    1aec:	17 ff       	sbrs	r17, 7
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <__pack_f+0x162>
    1af0:	16 95       	lsr	r17
    1af2:	07 95       	ror	r16
    1af4:	f7 94       	ror	r15
    1af6:	e7 94       	ror	r14
    1af8:	31 96       	adiw	r30, 0x01	; 1
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	16 95       	lsr	r17
    1afe:	07 95       	ror	r16
    1b00:	f7 94       	ror	r15
    1b02:	e7 94       	ror	r14
    1b04:	8a 95       	dec	r24
    1b06:	d1 f7       	brne	.-12     	; 0x1afc <__pack_f+0x164>
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <__pack_f+0x17c>
    1b0a:	ee 24       	eor	r14, r14
    1b0c:	ff 24       	eor	r15, r15
    1b0e:	87 01       	movw	r16, r14
    1b10:	ef ef       	ldi	r30, 0xFF	; 255
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	6e 2f       	mov	r22, r30
    1b16:	67 95       	ror	r22
    1b18:	66 27       	eor	r22, r22
    1b1a:	67 95       	ror	r22
    1b1c:	90 2f       	mov	r25, r16
    1b1e:	9f 77       	andi	r25, 0x7F	; 127
    1b20:	d7 94       	ror	r13
    1b22:	dd 24       	eor	r13, r13
    1b24:	d7 94       	ror	r13
    1b26:	8e 2f       	mov	r24, r30
    1b28:	86 95       	lsr	r24
    1b2a:	49 2f       	mov	r20, r25
    1b2c:	46 2b       	or	r20, r22
    1b2e:	58 2f       	mov	r21, r24
    1b30:	5d 29       	or	r21, r13
    1b32:	b7 01       	movw	r22, r14
    1b34:	ca 01       	movw	r24, r20
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	08 95       	ret

00001b42 <__unpack_f>:
    1b42:	fc 01       	movw	r30, r24
    1b44:	db 01       	movw	r26, r22
    1b46:	40 81       	ld	r20, Z
    1b48:	51 81       	ldd	r21, Z+1	; 0x01
    1b4a:	22 81       	ldd	r18, Z+2	; 0x02
    1b4c:	62 2f       	mov	r22, r18
    1b4e:	6f 77       	andi	r22, 0x7F	; 127
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	22 1f       	adc	r18, r18
    1b54:	22 27       	eor	r18, r18
    1b56:	22 1f       	adc	r18, r18
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	89 2f       	mov	r24, r25
    1b5c:	88 0f       	add	r24, r24
    1b5e:	82 2b       	or	r24, r18
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	99 1f       	adc	r25, r25
    1b66:	99 27       	eor	r25, r25
    1b68:	99 1f       	adc	r25, r25
    1b6a:	11 96       	adiw	r26, 0x01	; 1
    1b6c:	9c 93       	st	X, r25
    1b6e:	11 97       	sbiw	r26, 0x01	; 1
    1b70:	21 15       	cp	r18, r1
    1b72:	31 05       	cpc	r19, r1
    1b74:	a9 f5       	brne	.+106    	; 0x1be0 <__unpack_f+0x9e>
    1b76:	41 15       	cp	r20, r1
    1b78:	51 05       	cpc	r21, r1
    1b7a:	61 05       	cpc	r22, r1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <__unpack_f+0x42>
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	37 c0       	rjmp	.+110    	; 0x1bf2 <__unpack_f+0xb0>
    1b84:	82 e8       	ldi	r24, 0x82	; 130
    1b86:	9f ef       	ldi	r25, 0xFF	; 255
    1b88:	13 96       	adiw	r26, 0x03	; 3
    1b8a:	9c 93       	st	X, r25
    1b8c:	8e 93       	st	-X, r24
    1b8e:	12 97       	sbiw	r26, 0x02	; 2
    1b90:	9a 01       	movw	r18, r20
    1b92:	ab 01       	movw	r20, r22
    1b94:	67 e0       	ldi	r22, 0x07	; 7
    1b96:	22 0f       	add	r18, r18
    1b98:	33 1f       	adc	r19, r19
    1b9a:	44 1f       	adc	r20, r20
    1b9c:	55 1f       	adc	r21, r21
    1b9e:	6a 95       	dec	r22
    1ba0:	d1 f7       	brne	.-12     	; 0x1b96 <__unpack_f+0x54>
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	8c 93       	st	X, r24
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <__unpack_f+0x80>
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	44 1f       	adc	r20, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	12 96       	adiw	r26, 0x02	; 2
    1bb2:	8d 91       	ld	r24, X+
    1bb4:	9c 91       	ld	r25, X
    1bb6:	13 97       	sbiw	r26, 0x03	; 3
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	13 96       	adiw	r26, 0x03	; 3
    1bbc:	9c 93       	st	X, r25
    1bbe:	8e 93       	st	-X, r24
    1bc0:	12 97       	sbiw	r26, 0x02	; 2
    1bc2:	20 30       	cpi	r18, 0x00	; 0
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	38 07       	cpc	r19, r24
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	48 07       	cpc	r20, r24
    1bcc:	80 e4       	ldi	r24, 0x40	; 64
    1bce:	58 07       	cpc	r21, r24
    1bd0:	58 f3       	brcs	.-42     	; 0x1ba8 <__unpack_f+0x66>
    1bd2:	14 96       	adiw	r26, 0x04	; 4
    1bd4:	2d 93       	st	X+, r18
    1bd6:	3d 93       	st	X+, r19
    1bd8:	4d 93       	st	X+, r20
    1bda:	5c 93       	st	X, r21
    1bdc:	17 97       	sbiw	r26, 0x07	; 7
    1bde:	08 95       	ret
    1be0:	2f 3f       	cpi	r18, 0xFF	; 255
    1be2:	31 05       	cpc	r19, r1
    1be4:	79 f4       	brne	.+30     	; 0x1c04 <__unpack_f+0xc2>
    1be6:	41 15       	cp	r20, r1
    1be8:	51 05       	cpc	r21, r1
    1bea:	61 05       	cpc	r22, r1
    1bec:	71 05       	cpc	r23, r1
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <__unpack_f+0xb4>
    1bf0:	84 e0       	ldi	r24, 0x04	; 4
    1bf2:	8c 93       	st	X, r24
    1bf4:	08 95       	ret
    1bf6:	64 ff       	sbrs	r22, 4
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <__unpack_f+0xbe>
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	8c 93       	st	X, r24
    1bfe:	12 c0       	rjmp	.+36     	; 0x1c24 <__unpack_f+0xe2>
    1c00:	1c 92       	st	X, r1
    1c02:	10 c0       	rjmp	.+32     	; 0x1c24 <__unpack_f+0xe2>
    1c04:	2f 57       	subi	r18, 0x7F	; 127
    1c06:	30 40       	sbci	r19, 0x00	; 0
    1c08:	13 96       	adiw	r26, 0x03	; 3
    1c0a:	3c 93       	st	X, r19
    1c0c:	2e 93       	st	-X, r18
    1c0e:	12 97       	sbiw	r26, 0x02	; 2
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	8c 93       	st	X, r24
    1c14:	87 e0       	ldi	r24, 0x07	; 7
    1c16:	44 0f       	add	r20, r20
    1c18:	55 1f       	adc	r21, r21
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	8a 95       	dec	r24
    1c20:	d1 f7       	brne	.-12     	; 0x1c16 <__unpack_f+0xd4>
    1c22:	70 64       	ori	r23, 0x40	; 64
    1c24:	14 96       	adiw	r26, 0x04	; 4
    1c26:	4d 93       	st	X+, r20
    1c28:	5d 93       	st	X+, r21
    1c2a:	6d 93       	st	X+, r22
    1c2c:	7c 93       	st	X, r23
    1c2e:	17 97       	sbiw	r26, 0x07	; 7
    1c30:	08 95       	ret

00001c32 <__fpcmp_parts_f>:
    1c32:	1f 93       	push	r17
    1c34:	dc 01       	movw	r26, r24
    1c36:	fb 01       	movw	r30, r22
    1c38:	9c 91       	ld	r25, X
    1c3a:	92 30       	cpi	r25, 0x02	; 2
    1c3c:	08 f4       	brcc	.+2      	; 0x1c40 <__fpcmp_parts_f+0xe>
    1c3e:	47 c0       	rjmp	.+142    	; 0x1cce <__fpcmp_parts_f+0x9c>
    1c40:	80 81       	ld	r24, Z
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <__fpcmp_parts_f+0x16>
    1c46:	43 c0       	rjmp	.+134    	; 0x1cce <__fpcmp_parts_f+0x9c>
    1c48:	94 30       	cpi	r25, 0x04	; 4
    1c4a:	51 f4       	brne	.+20     	; 0x1c60 <__fpcmp_parts_f+0x2e>
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	1c 91       	ld	r17, X
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	99 f5       	brne	.+102    	; 0x1cba <__fpcmp_parts_f+0x88>
    1c54:	81 81       	ldd	r24, Z+1	; 0x01
    1c56:	68 2f       	mov	r22, r24
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	61 1b       	sub	r22, r17
    1c5c:	71 09       	sbc	r23, r1
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <__fpcmp_parts_f+0xac>
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <__fpcmp_parts_f+0x3a>
    1c64:	92 30       	cpi	r25, 0x02	; 2
    1c66:	31 f4       	brne	.+12     	; 0x1c74 <__fpcmp_parts_f+0x42>
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	b9 f1       	breq	.+110    	; 0x1cda <__fpcmp_parts_f+0xa8>
    1c6c:	81 81       	ldd	r24, Z+1	; 0x01
    1c6e:	88 23       	and	r24, r24
    1c70:	89 f1       	breq	.+98     	; 0x1cd4 <__fpcmp_parts_f+0xa2>
    1c72:	2d c0       	rjmp	.+90     	; 0x1cce <__fpcmp_parts_f+0x9c>
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	1c 91       	ld	r17, X
    1c78:	11 97       	sbiw	r26, 0x01	; 1
    1c7a:	82 30       	cpi	r24, 0x02	; 2
    1c7c:	f1 f0       	breq	.+60     	; 0x1cba <__fpcmp_parts_f+0x88>
    1c7e:	81 81       	ldd	r24, Z+1	; 0x01
    1c80:	18 17       	cp	r17, r24
    1c82:	d9 f4       	brne	.+54     	; 0x1cba <__fpcmp_parts_f+0x88>
    1c84:	12 96       	adiw	r26, 0x02	; 2
    1c86:	2d 91       	ld	r18, X+
    1c88:	3c 91       	ld	r19, X
    1c8a:	13 97       	sbiw	r26, 0x03	; 3
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	82 17       	cp	r24, r18
    1c92:	93 07       	cpc	r25, r19
    1c94:	94 f0       	brlt	.+36     	; 0x1cba <__fpcmp_parts_f+0x88>
    1c96:	28 17       	cp	r18, r24
    1c98:	39 07       	cpc	r19, r25
    1c9a:	bc f0       	brlt	.+46     	; 0x1cca <__fpcmp_parts_f+0x98>
    1c9c:	14 96       	adiw	r26, 0x04	; 4
    1c9e:	8d 91       	ld	r24, X+
    1ca0:	9d 91       	ld	r25, X+
    1ca2:	0d 90       	ld	r0, X+
    1ca4:	bc 91       	ld	r27, X
    1ca6:	a0 2d       	mov	r26, r0
    1ca8:	24 81       	ldd	r18, Z+4	; 0x04
    1caa:	35 81       	ldd	r19, Z+5	; 0x05
    1cac:	46 81       	ldd	r20, Z+6	; 0x06
    1cae:	57 81       	ldd	r21, Z+7	; 0x07
    1cb0:	28 17       	cp	r18, r24
    1cb2:	39 07       	cpc	r19, r25
    1cb4:	4a 07       	cpc	r20, r26
    1cb6:	5b 07       	cpc	r21, r27
    1cb8:	18 f4       	brcc	.+6      	; 0x1cc0 <__fpcmp_parts_f+0x8e>
    1cba:	11 23       	and	r17, r17
    1cbc:	41 f0       	breq	.+16     	; 0x1cce <__fpcmp_parts_f+0x9c>
    1cbe:	0a c0       	rjmp	.+20     	; 0x1cd4 <__fpcmp_parts_f+0xa2>
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	a4 07       	cpc	r26, r20
    1cc6:	b5 07       	cpc	r27, r21
    1cc8:	40 f4       	brcc	.+16     	; 0x1cda <__fpcmp_parts_f+0xa8>
    1cca:	11 23       	and	r17, r17
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <__fpcmp_parts_f+0xa2>
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	05 c0       	rjmp	.+10     	; 0x1cde <__fpcmp_parts_f+0xac>
    1cd4:	6f ef       	ldi	r22, 0xFF	; 255
    1cd6:	7f ef       	ldi	r23, 0xFF	; 255
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <__fpcmp_parts_f+0xac>
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	cb 01       	movw	r24, r22
    1ce0:	1f 91       	pop	r17
    1ce2:	08 95       	ret

00001ce4 <__divmodhi4>:
    1ce4:	97 fb       	bst	r25, 7
    1ce6:	09 2e       	mov	r0, r25
    1ce8:	07 26       	eor	r0, r23
    1cea:	0a d0       	rcall	.+20     	; 0x1d00 <__divmodhi4_neg1>
    1cec:	77 fd       	sbrc	r23, 7
    1cee:	04 d0       	rcall	.+8      	; 0x1cf8 <__divmodhi4_neg2>
    1cf0:	0c d0       	rcall	.+24     	; 0x1d0a <__udivmodhi4>
    1cf2:	06 d0       	rcall	.+12     	; 0x1d00 <__divmodhi4_neg1>
    1cf4:	00 20       	and	r0, r0
    1cf6:	1a f4       	brpl	.+6      	; 0x1cfe <__divmodhi4_exit>

00001cf8 <__divmodhi4_neg2>:
    1cf8:	70 95       	com	r23
    1cfa:	61 95       	neg	r22
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255

00001cfe <__divmodhi4_exit>:
    1cfe:	08 95       	ret

00001d00 <__divmodhi4_neg1>:
    1d00:	f6 f7       	brtc	.-4      	; 0x1cfe <__divmodhi4_exit>
    1d02:	90 95       	com	r25
    1d04:	81 95       	neg	r24
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	08 95       	ret

00001d0a <__udivmodhi4>:
    1d0a:	aa 1b       	sub	r26, r26
    1d0c:	bb 1b       	sub	r27, r27
    1d0e:	51 e1       	ldi	r21, 0x11	; 17
    1d10:	07 c0       	rjmp	.+14     	; 0x1d20 <__udivmodhi4_ep>

00001d12 <__udivmodhi4_loop>:
    1d12:	aa 1f       	adc	r26, r26
    1d14:	bb 1f       	adc	r27, r27
    1d16:	a6 17       	cp	r26, r22
    1d18:	b7 07       	cpc	r27, r23
    1d1a:	10 f0       	brcs	.+4      	; 0x1d20 <__udivmodhi4_ep>
    1d1c:	a6 1b       	sub	r26, r22
    1d1e:	b7 0b       	sbc	r27, r23

00001d20 <__udivmodhi4_ep>:
    1d20:	88 1f       	adc	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	5a 95       	dec	r21
    1d26:	a9 f7       	brne	.-22     	; 0x1d12 <__udivmodhi4_loop>
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	08 95       	ret

00001d32 <__prologue_saves__>:
    1d32:	2f 92       	push	r2
    1d34:	3f 92       	push	r3
    1d36:	4f 92       	push	r4
    1d38:	5f 92       	push	r5
    1d3a:	6f 92       	push	r6
    1d3c:	7f 92       	push	r7
    1d3e:	8f 92       	push	r8
    1d40:	9f 92       	push	r9
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	ca 1b       	sub	r28, r26
    1d5c:	db 0b       	sbc	r29, r27
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	09 94       	ijmp

00001d6a <__epilogue_restores__>:
    1d6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d6c:	39 88       	ldd	r3, Y+17	; 0x11
    1d6e:	48 88       	ldd	r4, Y+16	; 0x10
    1d70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d80:	df 80       	ldd	r13, Y+7	; 0x07
    1d82:	ee 80       	ldd	r14, Y+6	; 0x06
    1d84:	fd 80       	ldd	r15, Y+5	; 0x05
    1d86:	0c 81       	ldd	r16, Y+4	; 0x04
    1d88:	1b 81       	ldd	r17, Y+3	; 0x03
    1d8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d8e:	ce 0f       	add	r28, r30
    1d90:	d1 1d       	adc	r29, r1
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	ed 01       	movw	r28, r26
    1d9e:	08 95       	ret

00001da0 <do_rand>:
    1da0:	a0 e0       	ldi	r26, 0x00	; 0
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 ed       	ldi	r30, 0xD6	; 214
    1da6:	fe e0       	ldi	r31, 0x0E	; 14
    1da8:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__prologue_saves__+0x10>
    1dac:	ec 01       	movw	r28, r24
    1dae:	a8 80       	ld	r10, Y
    1db0:	b9 80       	ldd	r11, Y+1	; 0x01
    1db2:	ca 80       	ldd	r12, Y+2	; 0x02
    1db4:	db 80       	ldd	r13, Y+3	; 0x03
    1db6:	a1 14       	cp	r10, r1
    1db8:	b1 04       	cpc	r11, r1
    1dba:	c1 04       	cpc	r12, r1
    1dbc:	d1 04       	cpc	r13, r1
    1dbe:	41 f4       	brne	.+16     	; 0x1dd0 <do_rand+0x30>
    1dc0:	84 e2       	ldi	r24, 0x24	; 36
    1dc2:	a8 2e       	mov	r10, r24
    1dc4:	89 ed       	ldi	r24, 0xD9	; 217
    1dc6:	b8 2e       	mov	r11, r24
    1dc8:	8b e5       	ldi	r24, 0x5B	; 91
    1dca:	c8 2e       	mov	r12, r24
    1dcc:	87 e0       	ldi	r24, 0x07	; 7
    1dce:	d8 2e       	mov	r13, r24
    1dd0:	c6 01       	movw	r24, r12
    1dd2:	b5 01       	movw	r22, r10
    1dd4:	2d e1       	ldi	r18, 0x1D	; 29
    1dd6:	33 ef       	ldi	r19, 0xF3	; 243
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	0e 94 03 12 	call	0x2406	; 0x2406 <__divmodsi4>
    1de0:	27 ea       	ldi	r18, 0xA7	; 167
    1de2:	31 e4       	ldi	r19, 0x41	; 65
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsi3>
    1dec:	7b 01       	movw	r14, r22
    1dee:	8c 01       	movw	r16, r24
    1df0:	c6 01       	movw	r24, r12
    1df2:	b5 01       	movw	r22, r10
    1df4:	2d e1       	ldi	r18, 0x1D	; 29
    1df6:	33 ef       	ldi	r19, 0xF3	; 243
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	0e 94 03 12 	call	0x2406	; 0x2406 <__divmodsi4>
    1e00:	ca 01       	movw	r24, r20
    1e02:	b9 01       	movw	r22, r18
    1e04:	2c ee       	ldi	r18, 0xEC	; 236
    1e06:	34 ef       	ldi	r19, 0xF4	; 244
    1e08:	4f ef       	ldi	r20, 0xFF	; 255
    1e0a:	5f ef       	ldi	r21, 0xFF	; 255
    1e0c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsi3>
    1e10:	6e 0d       	add	r22, r14
    1e12:	7f 1d       	adc	r23, r15
    1e14:	80 1f       	adc	r24, r16
    1e16:	91 1f       	adc	r25, r17
    1e18:	97 ff       	sbrs	r25, 7
    1e1a:	04 c0       	rjmp	.+8      	; 0x1e24 <do_rand+0x84>
    1e1c:	61 50       	subi	r22, 0x01	; 1
    1e1e:	70 40       	sbci	r23, 0x00	; 0
    1e20:	80 40       	sbci	r24, 0x00	; 0
    1e22:	90 48       	sbci	r25, 0x80	; 128
    1e24:	68 83       	st	Y, r22
    1e26:	79 83       	std	Y+1, r23	; 0x01
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	3f 77       	andi	r19, 0x7F	; 127
    1e30:	c9 01       	movw	r24, r18
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	ea e0       	ldi	r30, 0x0A	; 10
    1e38:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__epilogue_restores__+0x10>

00001e3c <rand_r>:
    1e3c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <do_rand>
    1e40:	08 95       	ret

00001e42 <rand>:
    1e42:	8b e1       	ldi	r24, 0x1B	; 27
    1e44:	98 e0       	ldi	r25, 0x08	; 8
    1e46:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <do_rand>
    1e4a:	08 95       	ret

00001e4c <srand>:
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	80 93 1b 08 	sts	0x081B, r24
    1e54:	90 93 1c 08 	sts	0x081C, r25
    1e58:	a0 93 1d 08 	sts	0x081D, r26
    1e5c:	b0 93 1e 08 	sts	0x081E, r27
    1e60:	08 95       	ret
    1e62:	f8 d0       	rcall	.+496    	; 0x2054 <__fp_pscA>
    1e64:	58 f0       	brcs	.+22     	; 0x1e7c <srand+0x30>
    1e66:	80 e8       	ldi	r24, 0x80	; 128
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <srand+0x22>
    1e6c:	9e ef       	ldi	r25, 0xFE	; 254
    1e6e:	f9 d0       	rcall	.+498    	; 0x2062 <__fp_pscB>
    1e70:	28 f0       	brcs	.+10     	; 0x1e7c <srand+0x30>
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	51 e0       	ldi	r21, 0x01	; 1
    1e76:	59 f4       	brne	.+22     	; 0x1e8e <atan2+0xe>
    1e78:	5e ef       	ldi	r21, 0xFE	; 254
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <atan2+0xe>
    1e7c:	c3 c0       	rjmp	.+390    	; 0x2004 <__fp_nan>
    1e7e:	64 c1       	rjmp	.+712    	; 0x2148 <__fp_zero>

00001e80 <atan2>:
    1e80:	e9 2f       	mov	r30, r25
    1e82:	e0 78       	andi	r30, 0x80	; 128
    1e84:	3f d1       	rcall	.+638    	; 0x2104 <__fp_split3>
    1e86:	68 f3       	brcs	.-38     	; 0x1e62 <srand+0x16>
    1e88:	09 2e       	mov	r0, r25
    1e8a:	05 2a       	or	r0, r21
    1e8c:	c1 f3       	breq	.-16     	; 0x1e7e <srand+0x32>
    1e8e:	26 17       	cp	r18, r22
    1e90:	37 07       	cpc	r19, r23
    1e92:	48 07       	cpc	r20, r24
    1e94:	59 07       	cpc	r21, r25
    1e96:	38 f0       	brcs	.+14     	; 0x1ea6 <atan2+0x26>
    1e98:	0e 2e       	mov	r0, r30
    1e9a:	07 f8       	bld	r0, 7
    1e9c:	e0 25       	eor	r30, r0
    1e9e:	69 f0       	breq	.+26     	; 0x1eba <atan2+0x3a>
    1ea0:	e0 25       	eor	r30, r0
    1ea2:	e0 64       	ori	r30, 0x40	; 64
    1ea4:	0a c0       	rjmp	.+20     	; 0x1eba <atan2+0x3a>
    1ea6:	ef 63       	ori	r30, 0x3F	; 63
    1ea8:	07 f8       	bld	r0, 7
    1eaa:	00 94       	com	r0
    1eac:	07 fa       	bst	r0, 7
    1eae:	db 01       	movw	r26, r22
    1eb0:	b9 01       	movw	r22, r18
    1eb2:	9d 01       	movw	r18, r26
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	ca 01       	movw	r24, r20
    1eb8:	ad 01       	movw	r20, r26
    1eba:	ef 93       	push	r30
    1ebc:	44 d0       	rcall	.+136    	; 0x1f46 <__divsf3_pse>
    1ebe:	00 d1       	rcall	.+512    	; 0x20c0 <__fp_round>
    1ec0:	0a d0       	rcall	.+20     	; 0x1ed6 <atan>
    1ec2:	5f 91       	pop	r21
    1ec4:	55 23       	and	r21, r21
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <atan2+0x54>
    1ec8:	2b ed       	ldi	r18, 0xDB	; 219
    1eca:	3f e0       	ldi	r19, 0x0F	; 15
    1ecc:	49 e4       	ldi	r20, 0x49	; 73
    1ece:	50 fd       	sbrc	r21, 0
    1ed0:	49 ec       	ldi	r20, 0xC9	; 201
    1ed2:	5e ca       	rjmp	.-2884   	; 0x1390 <__addsf3>
    1ed4:	08 95       	ret

00001ed6 <atan>:
    1ed6:	df 93       	push	r29
    1ed8:	dd 27       	eor	r29, r29
    1eda:	b9 2f       	mov	r27, r25
    1edc:	bf 77       	andi	r27, 0x7F	; 127
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	16 16       	cp	r1, r22
    1ee4:	17 06       	cpc	r1, r23
    1ee6:	48 07       	cpc	r20, r24
    1ee8:	5b 07       	cpc	r21, r27
    1eea:	10 f4       	brcc	.+4      	; 0x1ef0 <atan+0x1a>
    1eec:	d9 2f       	mov	r29, r25
    1eee:	33 d1       	rcall	.+614    	; 0x2156 <inverse>
    1ef0:	9f 93       	push	r25
    1ef2:	8f 93       	push	r24
    1ef4:	7f 93       	push	r23
    1ef6:	6f 93       	push	r22
    1ef8:	de d1       	rcall	.+956    	; 0x22b6 <square>
    1efa:	ec ea       	ldi	r30, 0xAC	; 172
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	85 d0       	rcall	.+266    	; 0x200a <__fp_powser>
    1f00:	df d0       	rcall	.+446    	; 0x20c0 <__fp_round>
    1f02:	2f 91       	pop	r18
    1f04:	3f 91       	pop	r19
    1f06:	4f 91       	pop	r20
    1f08:	5f 91       	pop	r21
    1f0a:	36 d1       	rcall	.+620    	; 0x2178 <__mulsf3x>
    1f0c:	dd 23       	and	r29, r29
    1f0e:	49 f0       	breq	.+18     	; 0x1f22 <atan+0x4c>
    1f10:	90 58       	subi	r25, 0x80	; 128
    1f12:	a2 ea       	ldi	r26, 0xA2	; 162
    1f14:	2a ed       	ldi	r18, 0xDA	; 218
    1f16:	3f e0       	ldi	r19, 0x0F	; 15
    1f18:	49 ec       	ldi	r20, 0xC9	; 201
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	d0 78       	andi	r29, 0x80	; 128
    1f1e:	5d 27       	eor	r21, r29
    1f20:	da d1       	rcall	.+948    	; 0x22d6 <__addsf3x>
    1f22:	df 91       	pop	r29
    1f24:	cd c0       	rjmp	.+410    	; 0x20c0 <__fp_round>

00001f26 <cos>:
    1f26:	a5 d0       	rcall	.+330    	; 0x2072 <__fp_rempio2>
    1f28:	e3 95       	inc	r30
    1f2a:	db c0       	rjmp	.+438    	; 0x20e2 <__fp_sinus>
    1f2c:	9a d0       	rcall	.+308    	; 0x2062 <__fp_pscB>
    1f2e:	40 f0       	brcs	.+16     	; 0x1f40 <cos+0x1a>
    1f30:	91 d0       	rcall	.+290    	; 0x2054 <__fp_pscA>
    1f32:	30 f0       	brcs	.+12     	; 0x1f40 <cos+0x1a>
    1f34:	21 f4       	brne	.+8      	; 0x1f3e <cos+0x18>
    1f36:	5f 3f       	cpi	r21, 0xFF	; 255
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <cos+0x1a>
    1f3a:	5e c0       	rjmp	.+188    	; 0x1ff8 <__fp_inf>
    1f3c:	51 11       	cpse	r21, r1
    1f3e:	05 c1       	rjmp	.+522    	; 0x214a <__fp_szero>
    1f40:	61 c0       	rjmp	.+194    	; 0x2004 <__fp_nan>

00001f42 <__divsf3x>:
    1f42:	e0 d0       	rcall	.+448    	; 0x2104 <__fp_split3>
    1f44:	98 f3       	brcs	.-26     	; 0x1f2c <cos+0x6>

00001f46 <__divsf3_pse>:
    1f46:	99 23       	and	r25, r25
    1f48:	c9 f3       	breq	.-14     	; 0x1f3c <cos+0x16>
    1f4a:	55 23       	and	r21, r21
    1f4c:	b1 f3       	breq	.-20     	; 0x1f3a <cos+0x14>
    1f4e:	95 1b       	sub	r25, r21
    1f50:	55 0b       	sbc	r21, r21
    1f52:	bb 27       	eor	r27, r27
    1f54:	aa 27       	eor	r26, r26
    1f56:	62 17       	cp	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	84 07       	cpc	r24, r20
    1f5c:	38 f0       	brcs	.+14     	; 0x1f6c <__divsf3_pse+0x26>
    1f5e:	9f 5f       	subi	r25, 0xFF	; 255
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	44 1f       	adc	r20, r20
    1f68:	aa 1f       	adc	r26, r26
    1f6a:	a9 f3       	breq	.-22     	; 0x1f56 <__divsf3_pse+0x10>
    1f6c:	33 d0       	rcall	.+102    	; 0x1fd4 <__divsf3_pse+0x8e>
    1f6e:	0e 2e       	mov	r0, r30
    1f70:	3a f0       	brmi	.+14     	; 0x1f80 <__divsf3_pse+0x3a>
    1f72:	e0 e8       	ldi	r30, 0x80	; 128
    1f74:	30 d0       	rcall	.+96     	; 0x1fd6 <__divsf3_pse+0x90>
    1f76:	91 50       	subi	r25, 0x01	; 1
    1f78:	50 40       	sbci	r21, 0x00	; 0
    1f7a:	e6 95       	lsr	r30
    1f7c:	00 1c       	adc	r0, r0
    1f7e:	ca f7       	brpl	.-14     	; 0x1f72 <__divsf3_pse+0x2c>
    1f80:	29 d0       	rcall	.+82     	; 0x1fd4 <__divsf3_pse+0x8e>
    1f82:	fe 2f       	mov	r31, r30
    1f84:	27 d0       	rcall	.+78     	; 0x1fd4 <__divsf3_pse+0x8e>
    1f86:	66 0f       	add	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	26 17       	cp	r18, r22
    1f90:	37 07       	cpc	r19, r23
    1f92:	48 07       	cpc	r20, r24
    1f94:	ab 07       	cpc	r26, r27
    1f96:	b0 e8       	ldi	r27, 0x80	; 128
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <__divsf3_pse+0x56>
    1f9a:	bb 0b       	sbc	r27, r27
    1f9c:	80 2d       	mov	r24, r0
    1f9e:	bf 01       	movw	r22, r30
    1fa0:	ff 27       	eor	r31, r31
    1fa2:	93 58       	subi	r25, 0x83	; 131
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	2a f0       	brmi	.+10     	; 0x1fb2 <__divsf3_pse+0x6c>
    1fa8:	9e 3f       	cpi	r25, 0xFE	; 254
    1faa:	51 05       	cpc	r21, r1
    1fac:	68 f0       	brcs	.+26     	; 0x1fc8 <__divsf3_pse+0x82>
    1fae:	24 c0       	rjmp	.+72     	; 0x1ff8 <__fp_inf>
    1fb0:	cc c0       	rjmp	.+408    	; 0x214a <__fp_szero>
    1fb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb4:	ec f3       	brlt	.-6      	; 0x1fb0 <__divsf3_pse+0x6a>
    1fb6:	98 3e       	cpi	r25, 0xE8	; 232
    1fb8:	dc f3       	brlt	.-10     	; 0x1fb0 <__divsf3_pse+0x6a>
    1fba:	86 95       	lsr	r24
    1fbc:	77 95       	ror	r23
    1fbe:	67 95       	ror	r22
    1fc0:	b7 95       	ror	r27
    1fc2:	f7 95       	ror	r31
    1fc4:	9f 5f       	subi	r25, 0xFF	; 255
    1fc6:	c9 f7       	brne	.-14     	; 0x1fba <__divsf3_pse+0x74>
    1fc8:	88 0f       	add	r24, r24
    1fca:	91 1d       	adc	r25, r1
    1fcc:	96 95       	lsr	r25
    1fce:	87 95       	ror	r24
    1fd0:	97 f9       	bld	r25, 7
    1fd2:	08 95       	ret
    1fd4:	e1 e0       	ldi	r30, 0x01	; 1
    1fd6:	66 0f       	add	r22, r22
    1fd8:	77 1f       	adc	r23, r23
    1fda:	88 1f       	adc	r24, r24
    1fdc:	bb 1f       	adc	r27, r27
    1fde:	62 17       	cp	r22, r18
    1fe0:	73 07       	cpc	r23, r19
    1fe2:	84 07       	cpc	r24, r20
    1fe4:	ba 07       	cpc	r27, r26
    1fe6:	20 f0       	brcs	.+8      	; 0x1ff0 <__divsf3_pse+0xaa>
    1fe8:	62 1b       	sub	r22, r18
    1fea:	73 0b       	sbc	r23, r19
    1fec:	84 0b       	sbc	r24, r20
    1fee:	ba 0b       	sbc	r27, r26
    1ff0:	ee 1f       	adc	r30, r30
    1ff2:	88 f7       	brcc	.-30     	; 0x1fd6 <__divsf3_pse+0x90>
    1ff4:	e0 95       	com	r30
    1ff6:	08 95       	ret

00001ff8 <__fp_inf>:
    1ff8:	97 f9       	bld	r25, 7
    1ffa:	9f 67       	ori	r25, 0x7F	; 127
    1ffc:	80 e8       	ldi	r24, 0x80	; 128
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	08 95       	ret

00002004 <__fp_nan>:
    2004:	9f ef       	ldi	r25, 0xFF	; 255
    2006:	80 ec       	ldi	r24, 0xC0	; 192
    2008:	08 95       	ret

0000200a <__fp_powser>:
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	1f 93       	push	r17
    2010:	0f 93       	push	r16
    2012:	ff 92       	push	r15
    2014:	ef 92       	push	r14
    2016:	df 92       	push	r13
    2018:	7b 01       	movw	r14, r22
    201a:	8c 01       	movw	r16, r24
    201c:	68 94       	set
    201e:	05 c0       	rjmp	.+10     	; 0x202a <__fp_powser+0x20>
    2020:	da 2e       	mov	r13, r26
    2022:	ef 01       	movw	r28, r30
    2024:	a9 d0       	rcall	.+338    	; 0x2178 <__mulsf3x>
    2026:	fe 01       	movw	r30, r28
    2028:	e8 94       	clt
    202a:	a5 91       	lpm	r26, Z+
    202c:	25 91       	lpm	r18, Z+
    202e:	35 91       	lpm	r19, Z+
    2030:	45 91       	lpm	r20, Z+
    2032:	55 91       	lpm	r21, Z+
    2034:	ae f3       	brts	.-22     	; 0x2020 <__fp_powser+0x16>
    2036:	ef 01       	movw	r28, r30
    2038:	4e d1       	rcall	.+668    	; 0x22d6 <__addsf3x>
    203a:	fe 01       	movw	r30, r28
    203c:	97 01       	movw	r18, r14
    203e:	a8 01       	movw	r20, r16
    2040:	da 94       	dec	r13
    2042:	79 f7       	brne	.-34     	; 0x2022 <__fp_powser+0x18>
    2044:	df 90       	pop	r13
    2046:	ef 90       	pop	r14
    2048:	ff 90       	pop	r15
    204a:	0f 91       	pop	r16
    204c:	1f 91       	pop	r17
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <__fp_pscA>:
    2054:	00 24       	eor	r0, r0
    2056:	0a 94       	dec	r0
    2058:	16 16       	cp	r1, r22
    205a:	17 06       	cpc	r1, r23
    205c:	18 06       	cpc	r1, r24
    205e:	09 06       	cpc	r0, r25
    2060:	08 95       	ret

00002062 <__fp_pscB>:
    2062:	00 24       	eor	r0, r0
    2064:	0a 94       	dec	r0
    2066:	12 16       	cp	r1, r18
    2068:	13 06       	cpc	r1, r19
    206a:	14 06       	cpc	r1, r20
    206c:	05 06       	cpc	r0, r21
    206e:	08 95       	ret
    2070:	c9 cf       	rjmp	.-110    	; 0x2004 <__fp_nan>

00002072 <__fp_rempio2>:
    2072:	50 d0       	rcall	.+160    	; 0x2114 <__fp_splitA>
    2074:	e8 f3       	brcs	.-6      	; 0x2070 <__fp_pscB+0xe>
    2076:	e8 94       	clt
    2078:	e0 e0       	ldi	r30, 0x00	; 0
    207a:	bb 27       	eor	r27, r27
    207c:	9f 57       	subi	r25, 0x7F	; 127
    207e:	f0 f0       	brcs	.+60     	; 0x20bc <__fp_rempio2+0x4a>
    2080:	2a ed       	ldi	r18, 0xDA	; 218
    2082:	3f e0       	ldi	r19, 0x0F	; 15
    2084:	49 ec       	ldi	r20, 0xC9	; 201
    2086:	06 c0       	rjmp	.+12     	; 0x2094 <__fp_rempio2+0x22>
    2088:	ee 0f       	add	r30, r30
    208a:	bb 0f       	add	r27, r27
    208c:	66 1f       	adc	r22, r22
    208e:	77 1f       	adc	r23, r23
    2090:	88 1f       	adc	r24, r24
    2092:	28 f0       	brcs	.+10     	; 0x209e <__fp_rempio2+0x2c>
    2094:	b2 3a       	cpi	r27, 0xA2	; 162
    2096:	62 07       	cpc	r22, r18
    2098:	73 07       	cpc	r23, r19
    209a:	84 07       	cpc	r24, r20
    209c:	28 f0       	brcs	.+10     	; 0x20a8 <__fp_rempio2+0x36>
    209e:	b2 5a       	subi	r27, 0xA2	; 162
    20a0:	62 0b       	sbc	r22, r18
    20a2:	73 0b       	sbc	r23, r19
    20a4:	84 0b       	sbc	r24, r20
    20a6:	e3 95       	inc	r30
    20a8:	9a 95       	dec	r25
    20aa:	72 f7       	brpl	.-36     	; 0x2088 <__fp_rempio2+0x16>
    20ac:	80 38       	cpi	r24, 0x80	; 128
    20ae:	30 f4       	brcc	.+12     	; 0x20bc <__fp_rempio2+0x4a>
    20b0:	9a 95       	dec	r25
    20b2:	bb 0f       	add	r27, r27
    20b4:	66 1f       	adc	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	88 1f       	adc	r24, r24
    20ba:	d2 f7       	brpl	.-12     	; 0x20b0 <__fp_rempio2+0x3e>
    20bc:	90 48       	sbci	r25, 0x80	; 128
    20be:	60 c1       	rjmp	.+704    	; 0x2380 <__fp_mpack_finite>

000020c0 <__fp_round>:
    20c0:	09 2e       	mov	r0, r25
    20c2:	03 94       	inc	r0
    20c4:	00 0c       	add	r0, r0
    20c6:	11 f4       	brne	.+4      	; 0x20cc <__fp_round+0xc>
    20c8:	88 23       	and	r24, r24
    20ca:	52 f0       	brmi	.+20     	; 0x20e0 <__fp_round+0x20>
    20cc:	bb 0f       	add	r27, r27
    20ce:	40 f4       	brcc	.+16     	; 0x20e0 <__fp_round+0x20>
    20d0:	bf 2b       	or	r27, r31
    20d2:	11 f4       	brne	.+4      	; 0x20d8 <__fp_round+0x18>
    20d4:	60 ff       	sbrs	r22, 0
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <__fp_round+0x20>
    20d8:	6f 5f       	subi	r22, 0xFF	; 255
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	8f 4f       	sbci	r24, 0xFF	; 255
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	08 95       	ret

000020e2 <__fp_sinus>:
    20e2:	ef 93       	push	r30
    20e4:	e0 ff       	sbrs	r30, 0
    20e6:	06 c0       	rjmp	.+12     	; 0x20f4 <__fp_sinus+0x12>
    20e8:	a2 ea       	ldi	r26, 0xA2	; 162
    20ea:	2a ed       	ldi	r18, 0xDA	; 218
    20ec:	3f e0       	ldi	r19, 0x0F	; 15
    20ee:	49 ec       	ldi	r20, 0xC9	; 201
    20f0:	5f eb       	ldi	r21, 0xBF	; 191
    20f2:	f1 d0       	rcall	.+482    	; 0x22d6 <__addsf3x>
    20f4:	e5 df       	rcall	.-54     	; 0x20c0 <__fp_round>
    20f6:	0f 90       	pop	r0
    20f8:	03 94       	inc	r0
    20fa:	01 fc       	sbrc	r0, 1
    20fc:	90 58       	subi	r25, 0x80	; 128
    20fe:	e9 ed       	ldi	r30, 0xD9	; 217
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	51 c1       	rjmp	.+674    	; 0x23a6 <__fp_powsodd>

00002104 <__fp_split3>:
    2104:	57 fd       	sbrc	r21, 7
    2106:	90 58       	subi	r25, 0x80	; 128
    2108:	44 0f       	add	r20, r20
    210a:	55 1f       	adc	r21, r21
    210c:	59 f0       	breq	.+22     	; 0x2124 <__fp_splitA+0x10>
    210e:	5f 3f       	cpi	r21, 0xFF	; 255
    2110:	71 f0       	breq	.+28     	; 0x212e <__fp_splitA+0x1a>
    2112:	47 95       	ror	r20

00002114 <__fp_splitA>:
    2114:	88 0f       	add	r24, r24
    2116:	97 fb       	bst	r25, 7
    2118:	99 1f       	adc	r25, r25
    211a:	61 f0       	breq	.+24     	; 0x2134 <__fp_splitA+0x20>
    211c:	9f 3f       	cpi	r25, 0xFF	; 255
    211e:	79 f0       	breq	.+30     	; 0x213e <__fp_splitA+0x2a>
    2120:	87 95       	ror	r24
    2122:	08 95       	ret
    2124:	12 16       	cp	r1, r18
    2126:	13 06       	cpc	r1, r19
    2128:	14 06       	cpc	r1, r20
    212a:	55 1f       	adc	r21, r21
    212c:	f2 cf       	rjmp	.-28     	; 0x2112 <__fp_split3+0xe>
    212e:	46 95       	lsr	r20
    2130:	f1 df       	rcall	.-30     	; 0x2114 <__fp_splitA>
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <__fp_splitA+0x30>
    2134:	16 16       	cp	r1, r22
    2136:	17 06       	cpc	r1, r23
    2138:	18 06       	cpc	r1, r24
    213a:	99 1f       	adc	r25, r25
    213c:	f1 cf       	rjmp	.-30     	; 0x2120 <__fp_splitA+0xc>
    213e:	86 95       	lsr	r24
    2140:	71 05       	cpc	r23, r1
    2142:	61 05       	cpc	r22, r1
    2144:	08 94       	sec
    2146:	08 95       	ret

00002148 <__fp_zero>:
    2148:	e8 94       	clt

0000214a <__fp_szero>:
    214a:	bb 27       	eor	r27, r27
    214c:	66 27       	eor	r22, r22
    214e:	77 27       	eor	r23, r23
    2150:	cb 01       	movw	r24, r22
    2152:	97 f9       	bld	r25, 7
    2154:	08 95       	ret

00002156 <inverse>:
    2156:	9b 01       	movw	r18, r22
    2158:	ac 01       	movw	r20, r24
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	80 e8       	ldi	r24, 0x80	; 128
    2160:	9f e3       	ldi	r25, 0x3F	; 63
    2162:	3d ca       	rjmp	.-2950   	; 0x15de <__divsf3>
    2164:	77 df       	rcall	.-274    	; 0x2054 <__fp_pscA>
    2166:	28 f0       	brcs	.+10     	; 0x2172 <inverse+0x1c>
    2168:	7c df       	rcall	.-264    	; 0x2062 <__fp_pscB>
    216a:	18 f0       	brcs	.+6      	; 0x2172 <inverse+0x1c>
    216c:	95 23       	and	r25, r21
    216e:	09 f0       	breq	.+2      	; 0x2172 <inverse+0x1c>
    2170:	43 cf       	rjmp	.-378    	; 0x1ff8 <__fp_inf>
    2172:	48 cf       	rjmp	.-368    	; 0x2004 <__fp_nan>
    2174:	11 24       	eor	r1, r1
    2176:	e9 cf       	rjmp	.-46     	; 0x214a <__fp_szero>

00002178 <__mulsf3x>:
    2178:	c5 df       	rcall	.-118    	; 0x2104 <__fp_split3>
    217a:	a0 f3       	brcs	.-24     	; 0x2164 <inverse+0xe>

0000217c <__mulsf3_pse>:
    217c:	95 9f       	mul	r25, r21
    217e:	d1 f3       	breq	.-12     	; 0x2174 <inverse+0x1e>
    2180:	95 0f       	add	r25, r21
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	55 1f       	adc	r21, r21
    2186:	62 9f       	mul	r22, r18
    2188:	f0 01       	movw	r30, r0
    218a:	72 9f       	mul	r23, r18
    218c:	bb 27       	eor	r27, r27
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	63 9f       	mul	r22, r19
    2194:	aa 27       	eor	r26, r26
    2196:	f0 0d       	add	r31, r0
    2198:	b1 1d       	adc	r27, r1
    219a:	aa 1f       	adc	r26, r26
    219c:	64 9f       	mul	r22, r20
    219e:	66 27       	eor	r22, r22
    21a0:	b0 0d       	add	r27, r0
    21a2:	a1 1d       	adc	r26, r1
    21a4:	66 1f       	adc	r22, r22
    21a6:	82 9f       	mul	r24, r18
    21a8:	22 27       	eor	r18, r18
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	73 9f       	mul	r23, r19
    21b2:	b0 0d       	add	r27, r0
    21b4:	a1 1d       	adc	r26, r1
    21b6:	62 1f       	adc	r22, r18
    21b8:	83 9f       	mul	r24, r19
    21ba:	a0 0d       	add	r26, r0
    21bc:	61 1d       	adc	r22, r1
    21be:	22 1f       	adc	r18, r18
    21c0:	74 9f       	mul	r23, r20
    21c2:	33 27       	eor	r19, r19
    21c4:	a0 0d       	add	r26, r0
    21c6:	61 1d       	adc	r22, r1
    21c8:	23 1f       	adc	r18, r19
    21ca:	84 9f       	mul	r24, r20
    21cc:	60 0d       	add	r22, r0
    21ce:	21 1d       	adc	r18, r1
    21d0:	82 2f       	mov	r24, r18
    21d2:	76 2f       	mov	r23, r22
    21d4:	6a 2f       	mov	r22, r26
    21d6:	11 24       	eor	r1, r1
    21d8:	9f 57       	subi	r25, 0x7F	; 127
    21da:	50 40       	sbci	r21, 0x00	; 0
    21dc:	8a f0       	brmi	.+34     	; 0x2200 <__mulsf3_pse+0x84>
    21de:	e1 f0       	breq	.+56     	; 0x2218 <__mulsf3_pse+0x9c>
    21e0:	88 23       	and	r24, r24
    21e2:	4a f0       	brmi	.+18     	; 0x21f6 <__mulsf3_pse+0x7a>
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	bb 1f       	adc	r27, r27
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	91 50       	subi	r25, 0x01	; 1
    21f2:	50 40       	sbci	r21, 0x00	; 0
    21f4:	a9 f7       	brne	.-22     	; 0x21e0 <__mulsf3_pse+0x64>
    21f6:	9e 3f       	cpi	r25, 0xFE	; 254
    21f8:	51 05       	cpc	r21, r1
    21fa:	70 f0       	brcs	.+28     	; 0x2218 <__mulsf3_pse+0x9c>
    21fc:	fd ce       	rjmp	.-518    	; 0x1ff8 <__fp_inf>
    21fe:	a5 cf       	rjmp	.-182    	; 0x214a <__fp_szero>
    2200:	5f 3f       	cpi	r21, 0xFF	; 255
    2202:	ec f3       	brlt	.-6      	; 0x21fe <__mulsf3_pse+0x82>
    2204:	98 3e       	cpi	r25, 0xE8	; 232
    2206:	dc f3       	brlt	.-10     	; 0x21fe <__mulsf3_pse+0x82>
    2208:	86 95       	lsr	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f7 95       	ror	r31
    2212:	e7 95       	ror	r30
    2214:	9f 5f       	subi	r25, 0xFF	; 255
    2216:	c1 f7       	brne	.-16     	; 0x2208 <__mulsf3_pse+0x8c>
    2218:	fe 2b       	or	r31, r30
    221a:	88 0f       	add	r24, r24
    221c:	91 1d       	adc	r25, r1
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <sin>:
    2226:	9f 93       	push	r25
    2228:	24 df       	rcall	.-440    	; 0x2072 <__fp_rempio2>
    222a:	0f 90       	pop	r0
    222c:	07 fc       	sbrc	r0, 7
    222e:	ee 5f       	subi	r30, 0xFE	; 254
    2230:	58 cf       	rjmp	.-336    	; 0x20e2 <__fp_sinus>
    2232:	11 f4       	brne	.+4      	; 0x2238 <sin+0x12>
    2234:	0e f4       	brtc	.+2      	; 0x2238 <sin+0x12>
    2236:	e6 ce       	rjmp	.-564    	; 0x2004 <__fp_nan>
    2238:	a1 c0       	rjmp	.+322    	; 0x237c <__fp_mpack>

0000223a <sqrt>:
    223a:	6c df       	rcall	.-296    	; 0x2114 <__fp_splitA>
    223c:	d0 f3       	brcs	.-12     	; 0x2232 <sin+0xc>
    223e:	99 23       	and	r25, r25
    2240:	d9 f3       	breq	.-10     	; 0x2238 <sin+0x12>
    2242:	ce f3       	brts	.-14     	; 0x2236 <sin+0x10>
    2244:	9f 57       	subi	r25, 0x7F	; 127
    2246:	55 0b       	sbc	r21, r21
    2248:	87 ff       	sbrs	r24, 7
    224a:	a6 d0       	rcall	.+332    	; 0x2398 <__fp_norm2>
    224c:	00 24       	eor	r0, r0
    224e:	a0 e6       	ldi	r26, 0x60	; 96
    2250:	40 ea       	ldi	r20, 0xA0	; 160
    2252:	90 01       	movw	r18, r0
    2254:	80 58       	subi	r24, 0x80	; 128
    2256:	56 95       	lsr	r21
    2258:	97 95       	ror	r25
    225a:	28 f4       	brcc	.+10     	; 0x2266 <sqrt+0x2c>
    225c:	80 5c       	subi	r24, 0xC0	; 192
    225e:	66 0f       	add	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	20 f0       	brcs	.+8      	; 0x226e <sqrt+0x34>
    2266:	26 17       	cp	r18, r22
    2268:	37 07       	cpc	r19, r23
    226a:	48 07       	cpc	r20, r24
    226c:	30 f4       	brcc	.+12     	; 0x227a <sqrt+0x40>
    226e:	62 1b       	sub	r22, r18
    2270:	73 0b       	sbc	r23, r19
    2272:	84 0b       	sbc	r24, r20
    2274:	20 29       	or	r18, r0
    2276:	31 29       	or	r19, r1
    2278:	4a 2b       	or	r20, r26
    227a:	a6 95       	lsr	r26
    227c:	17 94       	ror	r1
    227e:	07 94       	ror	r0
    2280:	20 25       	eor	r18, r0
    2282:	31 25       	eor	r19, r1
    2284:	4a 27       	eor	r20, r26
    2286:	58 f7       	brcc	.-42     	; 0x225e <sqrt+0x24>
    2288:	66 0f       	add	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	88 1f       	adc	r24, r24
    228e:	20 f0       	brcs	.+8      	; 0x2298 <sqrt+0x5e>
    2290:	26 17       	cp	r18, r22
    2292:	37 07       	cpc	r19, r23
    2294:	48 07       	cpc	r20, r24
    2296:	30 f4       	brcc	.+12     	; 0x22a4 <sqrt+0x6a>
    2298:	62 0b       	sbc	r22, r18
    229a:	73 0b       	sbc	r23, r19
    229c:	84 0b       	sbc	r24, r20
    229e:	20 0d       	add	r18, r0
    22a0:	31 1d       	adc	r19, r1
    22a2:	41 1d       	adc	r20, r1
    22a4:	a0 95       	com	r26
    22a6:	81 f7       	brne	.-32     	; 0x2288 <sqrt+0x4e>
    22a8:	b9 01       	movw	r22, r18
    22aa:	84 2f       	mov	r24, r20
    22ac:	91 58       	subi	r25, 0x81	; 129
    22ae:	88 0f       	add	r24, r24
    22b0:	96 95       	lsr	r25
    22b2:	87 95       	ror	r24
    22b4:	08 95       	ret

000022b6 <square>:
    22b6:	9b 01       	movw	r18, r22
    22b8:	ac 01       	movw	r20, r24
    22ba:	97 c8       	rjmp	.-3794   	; 0x13ea <__mulsf3>
    22bc:	cb de       	rcall	.-618    	; 0x2054 <__fp_pscA>
    22be:	30 f0       	brcs	.+12     	; 0x22cc <square+0x16>
    22c0:	d0 de       	rcall	.-608    	; 0x2062 <__fp_pscB>
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <square+0x16>
    22c4:	31 f4       	brne	.+12     	; 0x22d2 <square+0x1c>
    22c6:	9f 3f       	cpi	r25, 0xFF	; 255
    22c8:	11 f4       	brne	.+4      	; 0x22ce <square+0x18>
    22ca:	1e f4       	brtc	.+6      	; 0x22d2 <square+0x1c>
    22cc:	9b ce       	rjmp	.-714    	; 0x2004 <__fp_nan>
    22ce:	0e f4       	brtc	.+2      	; 0x22d2 <square+0x1c>
    22d0:	e0 95       	com	r30
    22d2:	e7 fb       	bst	r30, 7
    22d4:	91 ce       	rjmp	.-734    	; 0x1ff8 <__fp_inf>

000022d6 <__addsf3x>:
    22d6:	e9 2f       	mov	r30, r25
    22d8:	15 df       	rcall	.-470    	; 0x2104 <__fp_split3>
    22da:	80 f3       	brcs	.-32     	; 0x22bc <square+0x6>
    22dc:	ba 17       	cp	r27, r26
    22de:	62 07       	cpc	r22, r18
    22e0:	73 07       	cpc	r23, r19
    22e2:	84 07       	cpc	r24, r20
    22e4:	95 07       	cpc	r25, r21
    22e6:	18 f0       	brcs	.+6      	; 0x22ee <__addsf3x+0x18>
    22e8:	71 f4       	brne	.+28     	; 0x2306 <__addsf3x+0x30>
    22ea:	9e f5       	brtc	.+102    	; 0x2352 <__addsf3x+0x7c>
    22ec:	2d cf       	rjmp	.-422    	; 0x2148 <__fp_zero>
    22ee:	0e f4       	brtc	.+2      	; 0x22f2 <__addsf3x+0x1c>
    22f0:	e0 95       	com	r30
    22f2:	0b 2e       	mov	r0, r27
    22f4:	ba 2f       	mov	r27, r26
    22f6:	a0 2d       	mov	r26, r0
    22f8:	0b 01       	movw	r0, r22
    22fa:	b9 01       	movw	r22, r18
    22fc:	90 01       	movw	r18, r0
    22fe:	0c 01       	movw	r0, r24
    2300:	ca 01       	movw	r24, r20
    2302:	a0 01       	movw	r20, r0
    2304:	11 24       	eor	r1, r1
    2306:	ff 27       	eor	r31, r31
    2308:	59 1b       	sub	r21, r25
    230a:	99 f0       	breq	.+38     	; 0x2332 <__addsf3x+0x5c>
    230c:	59 3f       	cpi	r21, 0xF9	; 249
    230e:	50 f4       	brcc	.+20     	; 0x2324 <__addsf3x+0x4e>
    2310:	50 3e       	cpi	r21, 0xE0	; 224
    2312:	68 f1       	brcs	.+90     	; 0x236e <__addsf3x+0x98>
    2314:	1a 16       	cp	r1, r26
    2316:	f0 40       	sbci	r31, 0x00	; 0
    2318:	a2 2f       	mov	r26, r18
    231a:	23 2f       	mov	r18, r19
    231c:	34 2f       	mov	r19, r20
    231e:	44 27       	eor	r20, r20
    2320:	58 5f       	subi	r21, 0xF8	; 248
    2322:	f3 cf       	rjmp	.-26     	; 0x230a <__addsf3x+0x34>
    2324:	46 95       	lsr	r20
    2326:	37 95       	ror	r19
    2328:	27 95       	ror	r18
    232a:	a7 95       	ror	r26
    232c:	f0 40       	sbci	r31, 0x00	; 0
    232e:	53 95       	inc	r21
    2330:	c9 f7       	brne	.-14     	; 0x2324 <__addsf3x+0x4e>
    2332:	7e f4       	brtc	.+30     	; 0x2352 <__addsf3x+0x7c>
    2334:	1f 16       	cp	r1, r31
    2336:	ba 0b       	sbc	r27, r26
    2338:	62 0b       	sbc	r22, r18
    233a:	73 0b       	sbc	r23, r19
    233c:	84 0b       	sbc	r24, r20
    233e:	ba f0       	brmi	.+46     	; 0x236e <__addsf3x+0x98>
    2340:	91 50       	subi	r25, 0x01	; 1
    2342:	a1 f0       	breq	.+40     	; 0x236c <__addsf3x+0x96>
    2344:	ff 0f       	add	r31, r31
    2346:	bb 1f       	adc	r27, r27
    2348:	66 1f       	adc	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	88 1f       	adc	r24, r24
    234e:	c2 f7       	brpl	.-16     	; 0x2340 <__addsf3x+0x6a>
    2350:	0e c0       	rjmp	.+28     	; 0x236e <__addsf3x+0x98>
    2352:	ba 0f       	add	r27, r26
    2354:	62 1f       	adc	r22, r18
    2356:	73 1f       	adc	r23, r19
    2358:	84 1f       	adc	r24, r20
    235a:	48 f4       	brcc	.+18     	; 0x236e <__addsf3x+0x98>
    235c:	87 95       	ror	r24
    235e:	77 95       	ror	r23
    2360:	67 95       	ror	r22
    2362:	b7 95       	ror	r27
    2364:	f7 95       	ror	r31
    2366:	9e 3f       	cpi	r25, 0xFE	; 254
    2368:	08 f0       	brcs	.+2      	; 0x236c <__addsf3x+0x96>
    236a:	b3 cf       	rjmp	.-154    	; 0x22d2 <square+0x1c>
    236c:	93 95       	inc	r25
    236e:	88 0f       	add	r24, r24
    2370:	08 f0       	brcs	.+2      	; 0x2374 <__addsf3x+0x9e>
    2372:	99 27       	eor	r25, r25
    2374:	ee 0f       	add	r30, r30
    2376:	97 95       	ror	r25
    2378:	87 95       	ror	r24
    237a:	08 95       	ret

0000237c <__fp_mpack>:
    237c:	9f 3f       	cpi	r25, 0xFF	; 255
    237e:	31 f0       	breq	.+12     	; 0x238c <__fp_mpack_finite+0xc>

00002380 <__fp_mpack_finite>:
    2380:	91 50       	subi	r25, 0x01	; 1
    2382:	20 f4       	brcc	.+8      	; 0x238c <__fp_mpack_finite+0xc>
    2384:	87 95       	ror	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	b7 95       	ror	r27
    238c:	88 0f       	add	r24, r24
    238e:	91 1d       	adc	r25, r1
    2390:	96 95       	lsr	r25
    2392:	87 95       	ror	r24
    2394:	97 f9       	bld	r25, 7
    2396:	08 95       	ret

00002398 <__fp_norm2>:
    2398:	91 50       	subi	r25, 0x01	; 1
    239a:	50 40       	sbci	r21, 0x00	; 0
    239c:	66 0f       	add	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	d2 f7       	brpl	.-12     	; 0x2398 <__fp_norm2>
    23a4:	08 95       	ret

000023a6 <__fp_powsodd>:
    23a6:	9f 93       	push	r25
    23a8:	8f 93       	push	r24
    23aa:	7f 93       	push	r23
    23ac:	6f 93       	push	r22
    23ae:	ff 93       	push	r31
    23b0:	ef 93       	push	r30
    23b2:	9b 01       	movw	r18, r22
    23b4:	ac 01       	movw	r20, r24
    23b6:	19 d8       	rcall	.-4046   	; 0x13ea <__mulsf3>
    23b8:	ef 91       	pop	r30
    23ba:	ff 91       	pop	r31
    23bc:	26 de       	rcall	.-948    	; 0x200a <__fp_powser>
    23be:	2f 91       	pop	r18
    23c0:	3f 91       	pop	r19
    23c2:	4f 91       	pop	r20
    23c4:	5f 91       	pop	r21
    23c6:	11 c8       	rjmp	.-4062   	; 0x13ea <__mulsf3>

000023c8 <__mulsi3>:
    23c8:	62 9f       	mul	r22, r18
    23ca:	d0 01       	movw	r26, r0
    23cc:	73 9f       	mul	r23, r19
    23ce:	f0 01       	movw	r30, r0
    23d0:	82 9f       	mul	r24, r18
    23d2:	e0 0d       	add	r30, r0
    23d4:	f1 1d       	adc	r31, r1
    23d6:	64 9f       	mul	r22, r20
    23d8:	e0 0d       	add	r30, r0
    23da:	f1 1d       	adc	r31, r1
    23dc:	92 9f       	mul	r25, r18
    23de:	f0 0d       	add	r31, r0
    23e0:	83 9f       	mul	r24, r19
    23e2:	f0 0d       	add	r31, r0
    23e4:	74 9f       	mul	r23, r20
    23e6:	f0 0d       	add	r31, r0
    23e8:	65 9f       	mul	r22, r21
    23ea:	f0 0d       	add	r31, r0
    23ec:	99 27       	eor	r25, r25
    23ee:	72 9f       	mul	r23, r18
    23f0:	b0 0d       	add	r27, r0
    23f2:	e1 1d       	adc	r30, r1
    23f4:	f9 1f       	adc	r31, r25
    23f6:	63 9f       	mul	r22, r19
    23f8:	b0 0d       	add	r27, r0
    23fa:	e1 1d       	adc	r30, r1
    23fc:	f9 1f       	adc	r31, r25
    23fe:	bd 01       	movw	r22, r26
    2400:	cf 01       	movw	r24, r30
    2402:	11 24       	eor	r1, r1
    2404:	08 95       	ret

00002406 <__divmodsi4>:
    2406:	97 fb       	bst	r25, 7
    2408:	09 2e       	mov	r0, r25
    240a:	05 26       	eor	r0, r21
    240c:	0e d0       	rcall	.+28     	; 0x242a <__divmodsi4_neg1>
    240e:	57 fd       	sbrc	r21, 7
    2410:	04 d0       	rcall	.+8      	; 0x241a <__divmodsi4_neg2>
    2412:	14 d0       	rcall	.+40     	; 0x243c <__udivmodsi4>
    2414:	0a d0       	rcall	.+20     	; 0x242a <__divmodsi4_neg1>
    2416:	00 1c       	adc	r0, r0
    2418:	38 f4       	brcc	.+14     	; 0x2428 <__divmodsi4_exit>

0000241a <__divmodsi4_neg2>:
    241a:	50 95       	com	r21
    241c:	40 95       	com	r20
    241e:	30 95       	com	r19
    2420:	21 95       	neg	r18
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	4f 4f       	sbci	r20, 0xFF	; 255
    2426:	5f 4f       	sbci	r21, 0xFF	; 255

00002428 <__divmodsi4_exit>:
    2428:	08 95       	ret

0000242a <__divmodsi4_neg1>:
    242a:	f6 f7       	brtc	.-4      	; 0x2428 <__divmodsi4_exit>
    242c:	90 95       	com	r25
    242e:	80 95       	com	r24
    2430:	70 95       	com	r23
    2432:	61 95       	neg	r22
    2434:	7f 4f       	sbci	r23, 0xFF	; 255
    2436:	8f 4f       	sbci	r24, 0xFF	; 255
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	08 95       	ret

0000243c <__udivmodsi4>:
    243c:	a1 e2       	ldi	r26, 0x21	; 33
    243e:	1a 2e       	mov	r1, r26
    2440:	aa 1b       	sub	r26, r26
    2442:	bb 1b       	sub	r27, r27
    2444:	fd 01       	movw	r30, r26
    2446:	0d c0       	rjmp	.+26     	; 0x2462 <__udivmodsi4_ep>

00002448 <__udivmodsi4_loop>:
    2448:	aa 1f       	adc	r26, r26
    244a:	bb 1f       	adc	r27, r27
    244c:	ee 1f       	adc	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	a2 17       	cp	r26, r18
    2452:	b3 07       	cpc	r27, r19
    2454:	e4 07       	cpc	r30, r20
    2456:	f5 07       	cpc	r31, r21
    2458:	20 f0       	brcs	.+8      	; 0x2462 <__udivmodsi4_ep>
    245a:	a2 1b       	sub	r26, r18
    245c:	b3 0b       	sbc	r27, r19
    245e:	e4 0b       	sbc	r30, r20
    2460:	f5 0b       	sbc	r31, r21

00002462 <__udivmodsi4_ep>:
    2462:	66 1f       	adc	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	88 1f       	adc	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	1a 94       	dec	r1
    246c:	69 f7       	brne	.-38     	; 0x2448 <__udivmodsi4_loop>
    246e:	60 95       	com	r22
    2470:	70 95       	com	r23
    2472:	80 95       	com	r24
    2474:	90 95       	com	r25
    2476:	9b 01       	movw	r18, r22
    2478:	ac 01       	movw	r20, r24
    247a:	bd 01       	movw	r22, r26
    247c:	cf 01       	movw	r24, r30
    247e:	08 95       	ret

00002480 <_exit>:
    2480:	f8 94       	cli

00002482 <__stop_program>:
    2482:	ff cf       	rjmp	.-2      	; 0x2482 <__stop_program>
