
atmega32u4_testfile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000202  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000096  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000213  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000154  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000274  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012a  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000046  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_25>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a1 30       	cpi	r26, 0x01	; 1
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 80 00 	call	0x100	; 0x100 <main>
  cc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_25>:

		}
   }

   ISR(USART1_RX_vect)
   {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
		pod = UDR1;
  e4:	ee ec       	ldi	r30, 0xCE	; 206
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 93 00 01 	sts	0x0100, r24
		UDR1 = pod;
  ee:	80 83       	st	Z, r24
   }
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:
   unsigned char pod;

   main() {

		/* set the baud rate */
		uart_9600();
 100:	0e 94 99 00 	call	0x132	; 0x132 <uart_9600>

		/*  initialize the UART */
		USART_Init();
 104:	0e 94 af 00 	call	0x15e	; 0x15e <USART_Init>

		/* set the USART receive interrupt enable */
		UCSR1B |= (1<<RXCIE1);
 108:	80 91 c9 00 	lds	r24, 0x00C9
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 93 c9 00 	sts	0x00C9, r24

		/* set global interrupts */
		sei();
 112:	78 94       	sei

		/* set direction of gpio register */
		PORTC |= (1<<PC7);
 114:	47 9a       	sbi	0x08, 7	; 8
		DDRC |= (1<<DDC7);
 116:	3f 9a       	sbi	0x07, 7	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 118:	20 e9       	ldi	r18, 0x90	; 144
 11a:	31 e0       	ldi	r19, 0x01	; 1
		{
			/*  no interrupt example */
			//pod = USART_Receive();
			//USART_Transmit(pod);

			PORTC = ~PORTC;
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	80 95       	com	r24
 120:	88 b9       	out	0x08, r24	; 8
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	97 e2       	ldi	r25, 0x27	; 39
 126:	f9 01       	movw	r30, r18
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12e:	d9 f7       	brne	.-10     	; 0x126 <main+0x26>
 130:	f5 cf       	rjmp	.-22     	; 0x11c <main+0x1c>

00000132 <uart_9600>:

   void uart_9600(void)
   {
   	#define BAUD 9600
   	#include <util/setbaud.h>
   	UBRR1H = UBRRH_VALUE;
 132:	10 92 cd 00 	sts	0x00CD, r1
   	UBRR1L = UBRRL_VALUE;
 136:	87 e6       	ldi	r24, 0x67	; 103
 138:	80 93 cc 00 	sts	0x00CC, r24
   	#if USE_2X
   		UCSR1A |= (1 << U2X1);
   	#else
   		UCSR1A &= ~(1 << U2X1);
 13c:	e8 ec       	ldi	r30, 0xC8	; 200
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	80 83       	st	Z, r24
   	#endif
   }
 146:	08 95       	ret

00000148 <uart_38400>:
   void uart_38400(void)
   {
   	#undef BAUD  // avoid compiler warning
   	#define BAUD 38400
   	#include <util/setbaud.h>
   		UBRR1H = UBRRH_VALUE;
 148:	10 92 cd 00 	sts	0x00CD, r1
   		UBRR1L = UBRRL_VALUE;
 14c:	89 e1       	ldi	r24, 0x19	; 25
 14e:	80 93 cc 00 	sts	0x00CC, r24
   	#if USE_2X
   		UCSR1A |= (1 << U2X1);
   	#else
   		UCSR1A &= ~(1 << U2X1);
 152:	e8 ec       	ldi	r30, 0xC8	; 200
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	80 83       	st	Z, r24
   	#endif
   }
 15c:	08 95       	ret

0000015e <USART_Init>:

   void USART_Init(void)
   {
		/* enable the receiver and transmitter */
		UCSR1B = (1<<RXEN1) | (1<<TXEN1);
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	80 93 c9 00 	sts	0x00C9, r24
		/* set frame format:  8 data, 1 stop bit */
		UCSR1C = (3<<UCSZ10);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 ca 00 	sts	0x00CA, r24
   }
 16a:	08 95       	ret

0000016c <USART_Transmit>:

   void USART_Transmit( unsigned char data)
   {
 16c:	98 2f       	mov	r25, r24
   		/*  Wait for empty transmit buffer */
		while ( !( UCSR1A & (1<<UDRE1)) );
 16e:	80 91 c8 00 	lds	r24, 0x00C8
 172:	85 ff       	sbrs	r24, 5
 174:	fc cf       	rjmp	.-8      	; 0x16e <USART_Transmit+0x2>

		/* put data into buyffer, sends the data */
		UDR1 = data;
 176:	90 93 ce 00 	sts	0x00CE, r25
   }
 17a:	08 95       	ret

0000017c <USART_Receive>:


   unsigned char USART_Receive(void)
   {
    	/* wait for data to be received */
		while ( !(UCSR1A & (1<<RXC1)) );
 17c:	80 91 c8 00 	lds	r24, 0x00C8
 180:	87 ff       	sbrs	r24, 7
 182:	fc cf       	rjmp	.-8      	; 0x17c <USART_Receive>

		/* Get and return received data from buffer */
		return UDR1;
 184:	80 91 ce 00 	lds	r24, 0x00CE
   }
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
