
nokia3310_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000986  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002a3  00800100  00800100  000009fa  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000014d  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000050f  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000183  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000050e  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ff  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000228  00000000  00000000  00001a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__ctors_end>
   4:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
   8:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
   c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  10:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  14:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  18:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  1c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  20:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  24:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  28:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  2c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  30:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  34:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  38:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  3c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  40:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  44:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  48:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  4c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  50:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  54:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  58:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  5c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  60:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  64:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  68:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  6c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  70:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  74:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  78:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  7c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  80:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  84:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  88:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  8c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  90:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  94:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  98:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  9c:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  a0:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  a4:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>
  a8:	0c 94 86 02 	jmp	0x50c	; 0x50c <__bad_interrupt>

000000ac <number>:
  ac:	00 80 c0 e0 e0 60 e0 e0 c0 80 00 00 00 00 00 00     .....`..........
  bc:	70 ff ff 01 00 00 00 00 ff ff fe 00 00 00 00 00     p...............
  cc:	00 0f 1f 3c 38 30 38 38 1f 0f 03 00 00 00 00 00     ...<8088........
  dc:	00 00 00 00 80 e0 e0 00 00 00 00 00 00 00 00 00     ................
  ec:	00 00 03 03 03 ff ff 00 00 00 00 00 00 00 00 00     ................
  fc:	00 00 38 38 38 3f 3f 38 38 38 00 00 00 00 00 00     ..888??888......
 10c:	00 c0 c0 e0 60 60 e0 e0 c0 80 00 00 00 00 00 00     ....``..........
 11c:	00 01 00 00 80 c0 e0 f9 3f 1f 00 00 00 00 00 00     ........?.......
 12c:	00 3c 3e 3f 3f 3b 39 38 38 38 38 00 00 00 00 00     .<>??;98888.....
 13c:	00 c0 e0 e0 60 60 e0 e0 c0 c0 00 00 00 00 00 00     ....``..........
 14c:	00 01 00 00 30 30 38 7d ef cf 00 00 00 00 00 00     ....008}........
 15c:	00 1c 38 38 30 30 38 3c 1f 0f 01 00 00 00 00 00     ..88008<........
 16c:	00 00 00 00 00 80 c0 e0 e0 00 00 00 00 00 00 00     ................
 17c:	e0 f0 f8 de cf c7 c1 ff ff c0 c0 00 00 00 00 00     ................
 18c:	00 00 00 00 00 00 00 3f 3f 00 00 00 00 00 00 00     .......??.......
 19c:	00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 00 00 00 00 00     ................
 1ac:	00 3f 3f 3f 38 38 30 70 f0 e0 00 00 00 00 00 00     .???880p........
 1bc:	00 1c 38 38 30 30 38 3c 1f 0f 01 00 00 00 00 00     ..88008<........
 1cc:	00 00 80 c0 c0 e0 60 60 e0 e0 00 00 00 00 00 00     ......``........
 1dc:	e0 fe ff 37 39 18 18 38 f0 f0 c0 00 00 00 00 00     ...79..8........
 1ec:	00 0f 1f 1c 38 30 30 38 1f 0f 07 00 00 00 00 00     ....8008........
 1fc:	00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 00 00 00 00 00     ................
 20c:	00 00 00 00 80 e0 f8 7e 1f 07 01 00 00 00 00 00     .......~........
 21c:	00 00 38 3e 1f 07 01 00 00 00 00 00 00 00 00 00     ..8>............
 22c:	00 80 c0 e0 e0 60 60 e0 c0 c0 00 00 00 00 00 00     .....``.........
 23c:	00 cf ff 7f 38 30 70 70 ff ef c7 00 00 00 00 00     ....80pp........
 24c:	03 0f 1f 3c 38 30 30 38 1f 1f 0f 00 00 00 00 00     ...<8008........
 25c:	00 80 c0 e0 e0 60 e0 e0 c0 80 00 00 00 00 00 00     .....`..........
 26c:	0c 3f 7f f1 e0 c0 c0 e1 ff ff fe 00 00 00 00 00     .?..............
 27c:	00 00 38 30 30 38 38 1e 0f 07 00 00 00 00 00 00     ..80088.........
	...
 2ac:	3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00     <<<.............
	...
 2cc:	00 00 40 40 40 40 40 fe fe 40 40 40 40 40 00 00     ..@@@@@..@@@@@..
 2dc:	00 00 00 00 00 00 00 0f 0f 00 00 00 00 00 00 00     ................
	...
 2fc:	00 40 40 40 40 40 40 00 00 00 00 00 00 00 00 00     .@@@@@@.........
	...

0000031c <smallFont>:
 31c:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
 32c:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
 33c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
 34c:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
 35c:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
 36c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
 37c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 38c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 39c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 3ac:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 3bc:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
 3cc:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 3dc:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 3ec:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 3fc:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 40c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 41c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 42c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 43c:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
 44c:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
 45c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 46c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 47c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 48c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 49c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 4ac:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 4bc:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 4cc:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 4dc:	50 3c 44 64 54 4c 44 00 06 09 09 06                 P<DdTLD.....

000004e8 <__ctors_end>:
 4e8:	11 24       	eor	r1, r1
 4ea:	1f be       	out	0x3f, r1	; 63
 4ec:	cf ef       	ldi	r28, 0xFF	; 255
 4ee:	da e0       	ldi	r29, 0x0A	; 10
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	cd bf       	out	0x3d, r28	; 61

000004f4 <__do_clear_bss>:
 4f4:	13 e0       	ldi	r17, 0x03	; 3
 4f6:	a0 e0       	ldi	r26, 0x00	; 0
 4f8:	b1 e0       	ldi	r27, 0x01	; 1
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <.do_clear_bss_start>

000004fc <.do_clear_bss_loop>:
 4fc:	1d 92       	st	X+, r1

000004fe <.do_clear_bss_start>:
 4fe:	a3 3a       	cpi	r26, 0xA3	; 163
 500:	b1 07       	cpc	r27, r17
 502:	e1 f7       	brne	.-8      	; 0x4fc <.do_clear_bss_loop>
 504:	0e 94 88 02 	call	0x510	; 0x510 <main>
 508:	0c 94 c1 04 	jmp	0x982	; 0x982 <_exit>

0000050c <__bad_interrupt>:
 50c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000510 <main>:


main()
{

}
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	08 95       	ret

00000516 <spi_init>:
--------------------------------------------------------------------------------------------------*/
//SPI initialize
//clock rate: 250000hz
void spi_init(void)
{
	SPCR = 0x58; //setup SPI
 516:	88 e5       	ldi	r24, 0x58	; 88
 518:	8c bd       	out	0x2c, r24	; 44
}
 51a:	08 95       	ret

0000051c <LCD_writeCommand>:
  Argument(s)  :  command -> command to be sent
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeCommand ( unsigned char command )
{
		  CLEAR_SCE_PIN;	  //enable LCD
 51c:	2a 98       	cbi	0x05, 2	; 5

		  CLEAR_DC_PIN;	  //set LCD in command mode
 51e:	28 98       	cbi	0x05, 0	; 5

		  //  Send data to display controller.
		  SPDR = command;
 520:	8e bd       	out	0x2e, r24	; 46

		  //  Wait until Tx register empty.
		  while ( !(SPSR & 0x80) );
 522:	0d b4       	in	r0, 0x2d	; 45
 524:	07 fe       	sbrs	r0, 7
 526:	fd cf       	rjmp	.-6      	; 0x522 <LCD_writeCommand+0x6>

		  SET_SCE_PIN;   	 //disable LCD
 528:	2a 9a       	sbi	0x05, 2	; 5
}
 52a:	08 95       	ret

0000052c <LCD_writeData>:
  Argument(s)  :  Data -> Data to be sent
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeData ( unsigned char Data )
{
		  CLEAR_SCE_PIN;	  //enable LCD
 52c:	2a 98       	cbi	0x05, 2	; 5

		  SET_DC_PIN;	  //set LCD in Data mode
 52e:	28 9a       	sbi	0x05, 0	; 5

		  //  Send data to display controller.
		  SPDR = Data;
 530:	8e bd       	out	0x2e, r24	; 46

		  //  Wait until Tx register empty.
		  while ( !(SPSR & 0x80) );
 532:	0d b4       	in	r0, 0x2d	; 45
 534:	07 fe       	sbrs	r0, 7
 536:	fd cf       	rjmp	.-6      	; 0x532 <LCD_writeData+0x6>

		  SET_SCE_PIN;   	 //disable LCD
 538:	2a 9a       	sbi	0x05, 2	; 5
}
 53a:	08 95       	ret

0000053c <LCD_gotoXY>:
  Argument(s)  :  x - range: 0 to 84
  			   	  y -> range: 0 to 6
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_gotoXY ( unsigned char x, unsigned char y )
{
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	08 2f       	mov	r16, r24
 542:	16 2f       	mov	r17, r22
	LCD_writeCommand (0x80 | x);   //column
 544:	80 68       	ori	r24, 0x80	; 128
 546:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>
	LCD_writeCommand (0x40 | y);   //row
 54a:	81 2f       	mov	r24, r17
 54c:	80 64       	ori	r24, 0x40	; 64
 54e:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>

	cursor_row = y;
 552:	10 93 00 01 	sts	0x0100, r17
	cursor_col = x;
 556:	00 93 01 01 	sts	0x0101, r16
}
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	08 95       	ret

00000560 <LCD_clearPixel>:
	LCD_gotoXY (x,row);
	LCD_writeData(value);
}

void LCD_clearPixel( unsigned char x, unsigned char y )
{
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
	unsigned char value;
	unsigned char row;
	
	row = y / 8;
 564:	76 2f       	mov	r23, r22
 566:	76 95       	lsr	r23
 568:	76 95       	lsr	r23
 56a:	76 95       	lsr	r23

	value = lcd_buffer[row][x];
 56c:	47 2f       	mov	r20, r23
 56e:	50 e0       	ldi	r21, 0x00	; 0
	value &= ~(1 << (y % 8));
 570:	67 70       	andi	r22, 0x07	; 7
 572:	01 e0       	ldi	r16, 0x01	; 1
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <LCD_clearPixel+0x1c>
 578:	00 0f       	add	r16, r16
 57a:	11 1f       	adc	r17, r17
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <LCD_clearPixel+0x18>
 580:	00 95       	com	r16
 582:	24 e5       	ldi	r18, 0x54	; 84
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	42 9f       	mul	r20, r18
 588:	f0 01       	movw	r30, r0
 58a:	43 9f       	mul	r20, r19
 58c:	f0 0d       	add	r31, r0
 58e:	52 9f       	mul	r21, r18
 590:	f0 0d       	add	r31, r0
 592:	11 24       	eor	r1, r1
 594:	e8 0f       	add	r30, r24
 596:	f1 1d       	adc	r31, r1
 598:	ee 5f       	subi	r30, 0xFE	; 254
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	90 81       	ld	r25, Z
 59e:	09 23       	and	r16, r25
	lcd_buffer[row][x] = value;
 5a0:	00 83       	st	Z, r16

	//LCD_update();
	LCD_gotoXY (x,row);
 5a2:	67 2f       	mov	r22, r23
 5a4:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
	LCD_writeData(value);
 5a8:	80 2f       	mov	r24, r16
 5aa:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_writeData>
}
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <LCD_setPixel>:
    LCD_gotoXY (0,0);	//bring the XY position back to (0,0)
      
}

void LCD_setPixel( unsigned char x, unsigned char y )
{
 5b4:	1f 93       	push	r17
	unsigned char value;
	unsigned char row;
	
	row = y / 8;
 5b6:	96 2f       	mov	r25, r22
 5b8:	96 95       	lsr	r25
 5ba:	96 95       	lsr	r25
 5bc:	96 95       	lsr	r25

	value = lcd_buffer[row][x];
 5be:	e9 2f       	mov	r30, r25
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
	value |= (1 << (y % 8));
 5c2:	67 70       	andi	r22, 0x07	; 7
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <LCD_setPixel+0x1a>
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <LCD_setPixel+0x16>
 5d2:	24 e5       	ldi	r18, 0x54	; 84
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	bf 01       	movw	r22, r30
 5d8:	62 9f       	mul	r22, r18
 5da:	f0 01       	movw	r30, r0
 5dc:	63 9f       	mul	r22, r19
 5de:	f0 0d       	add	r31, r0
 5e0:	72 9f       	mul	r23, r18
 5e2:	f0 0d       	add	r31, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	e8 0f       	add	r30, r24
 5e8:	f1 1d       	adc	r31, r1
 5ea:	ee 5f       	subi	r30, 0xFE	; 254
 5ec:	fe 4f       	sbci	r31, 0xFE	; 254
 5ee:	10 81       	ld	r17, Z
 5f0:	14 2b       	or	r17, r20
	lcd_buffer[row][x] = value;
 5f2:	10 83       	st	Z, r17

	//LCD_update();
	LCD_gotoXY (x,row);
 5f4:	69 2f       	mov	r22, r25
 5f6:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
	LCD_writeData(value);
 5fa:	81 2f       	mov	r24, r17
 5fc:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_writeData>
}
 600:	1f 91       	pop	r17
 602:	08 95       	ret

00000604 <LCD_update>:
    LCD_gotoXY (0,0);	//bring the XY position back to (0,0)
      
}

void LCD_update( void )
{
 604:	cf 92       	push	r12
 606:	df 92       	push	r13
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
	int i,j;
	
	LCD_gotoXY (0,0);  	//start with (0,0) position
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
 61c:	ee 24       	eor	r14, r14
 61e:	ff 24       	eor	r15, r15

	for(i=0; i<7; i++)
	{
		LCD_gotoXY (0,i);
 620:	84 e5       	ldi	r24, 0x54	; 84
 622:	c8 2e       	mov	r12, r24
 624:	d1 2c       	mov	r13, r1
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	6e 2d       	mov	r22, r14
 62a:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
 62e:	ec 9c       	mul	r14, r12
 630:	80 01       	movw	r16, r0
 632:	ed 9c       	mul	r14, r13
 634:	10 0d       	add	r17, r0
 636:	fc 9c       	mul	r15, r12
 638:	10 0d       	add	r17, r0
 63a:	11 24       	eor	r1, r1
 63c:	0e 5f       	subi	r16, 0xFE	; 254
 63e:	1e 4f       	sbci	r17, 0xFE	; 254
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
		for(j=0; j<84; j++)
		{
			LCD_writeData(lcd_buffer[i][j]);
 644:	f8 01       	movw	r30, r16
 646:	81 91       	ld	r24, Z+
 648:	8f 01       	movw	r16, r30
 64a:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_writeData>
	LCD_gotoXY (0,0);  	//start with (0,0) position

	for(i=0; i<7; i++)
	{
		LCD_gotoXY (0,i);
		for(j=0; j<84; j++)
 64e:	21 96       	adiw	r28, 0x01	; 1
 650:	c4 35       	cpi	r28, 0x54	; 84
 652:	d1 05       	cpc	r29, r1
 654:	b9 f7       	brne	.-18     	; 0x644 <LCD_update+0x40>
{
	int i,j;
	
	LCD_gotoXY (0,0);  	//start with (0,0) position

	for(i=0; i<7; i++)
 656:	08 94       	sec
 658:	e1 1c       	adc	r14, r1
 65a:	f1 1c       	adc	r15, r1
 65c:	f7 e0       	ldi	r31, 0x07	; 7
 65e:	ef 16       	cp	r14, r31
 660:	f1 04       	cpc	r15, r1
 662:	09 f7       	brne	.-62     	; 0x626 <LCD_update+0x22>
		{
			LCD_writeData(lcd_buffer[i][j]);
		}
	}
   
    LCD_gotoXY (0,0);	//bring the XY position back to (0,0)
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
      
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	08 95       	ret

0000067e <LCD_clear>:
  Description  :  Clears the display
  Argument(s)  :  None.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_clear ( void )
{
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
	int i,j;
	
	LCD_gotoXY (0,0);  	//start with (0,0) position
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
 696:	ee 24       	eor	r14, r14
 698:	ff 24       	eor	r15, r15

	for(i=0; i<8; i++)
 69a:	94 e5       	ldi	r25, 0x54	; 84
 69c:	c9 2e       	mov	r12, r25
 69e:	d1 2c       	mov	r13, r1
 6a0:	19 c0       	rjmp	.+50     	; 0x6d4 <LCD_clear+0x56>
	{
		for(j=0; j<90; j++)
		{
			LCD_writeData( 0x00 );
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_writeData>
			if ((i < 6) && (j < 84))
 6a8:	86 e0       	ldi	r24, 0x06	; 6
 6aa:	e8 16       	cp	r14, r24
 6ac:	f1 04       	cpc	r15, r1
 6ae:	2c f4       	brge	.+10     	; 0x6ba <LCD_clear+0x3c>
 6b0:	c4 35       	cpi	r28, 0x54	; 84
 6b2:	d1 05       	cpc	r29, r1
 6b4:	14 f4       	brge	.+4      	; 0x6ba <LCD_clear+0x3c>
				lcd_buffer[i][j] = 0x00;
 6b6:	f8 01       	movw	r30, r16
 6b8:	10 82       	st	Z, r1
	
	LCD_gotoXY (0,0);  	//start with (0,0) position

	for(i=0; i<8; i++)
	{
		for(j=0; j<90; j++)
 6ba:	21 96       	adiw	r28, 0x01	; 1
 6bc:	0f 5f       	subi	r16, 0xFF	; 255
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
 6c0:	ca 35       	cpi	r28, 0x5A	; 90
 6c2:	d1 05       	cpc	r29, r1
 6c4:	71 f7       	brne	.-36     	; 0x6a2 <LCD_clear+0x24>
{
	int i,j;
	
	LCD_gotoXY (0,0);  	//start with (0,0) position

	for(i=0; i<8; i++)
 6c6:	08 94       	sec
 6c8:	e1 1c       	adc	r14, r1
 6ca:	f1 1c       	adc	r15, r1
 6cc:	f8 e0       	ldi	r31, 0x08	; 8
 6ce:	ef 16       	cp	r14, r31
 6d0:	f1 04       	cpc	r15, r1
 6d2:	61 f0       	breq	.+24     	; 0x6ec <LCD_clear+0x6e>
 6d4:	ec 9c       	mul	r14, r12
 6d6:	80 01       	movw	r16, r0
 6d8:	ed 9c       	mul	r14, r13
 6da:	10 0d       	add	r17, r0
 6dc:	fc 9c       	mul	r15, r12
 6de:	10 0d       	add	r17, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	0e 5f       	subi	r16, 0xFE	; 254
 6e4:	1e 4f       	sbci	r17, 0xFE	; 254
 6e6:	c0 e0       	ldi	r28, 0x00	; 0
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
 6ea:	db cf       	rjmp	.-74     	; 0x6a2 <LCD_clear+0x24>
			if ((i < 6) && (j < 84))
				lcd_buffer[i][j] = 0x00;
		}
	}
   
    LCD_gotoXY (0,0);	//bring the XY position back to (0,0)
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
      
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <LCD_writeChar>:
  Description  :  Displays a character at current cursor location and increment cursor location.
  Argument(s)  :  ch   -> Character to write.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeChar (unsigned char ch)
{
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
	unsigned char j;
  
	lcd_buffer[cursor_row][cursor_col] = 0x00;
 70e:	90 91 00 01 	lds	r25, 0x0100
 712:	69 2f       	mov	r22, r25
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	10 91 01 01 	lds	r17, 0x0101
 71a:	41 2f       	mov	r20, r17
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	24 e5       	ldi	r18, 0x54	; 84
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	62 9f       	mul	r22, r18
 724:	f0 01       	movw	r30, r0
 726:	63 9f       	mul	r22, r19
 728:	f0 0d       	add	r31, r0
 72a:	72 9f       	mul	r23, r18
 72c:	f0 0d       	add	r31, r0
 72e:	11 24       	eor	r1, r1
 730:	e4 0f       	add	r30, r20
 732:	f5 1f       	adc	r31, r21
 734:	ee 5f       	subi	r30, 0xFE	; 254
 736:	fe 4f       	sbci	r31, 0xFE	; 254
 738:	10 82       	st	Z, r1
	for(j=0; j<5; j++)
		lcd_buffer[cursor_row][cursor_col + j] |=  pgm_read_byte(&(smallFont [(ch-32)*5 + j] ));
 73a:	95 e0       	ldi	r25, 0x05	; 5
 73c:	89 9f       	mul	r24, r25
 73e:	c0 01       	movw	r24, r0
 740:	11 24       	eor	r1, r1
 742:	df 01       	movw	r26, r30
 744:	fc 01       	movw	r30, r24
 746:	e4 58       	subi	r30, 0x84	; 132
 748:	fd 4f       	sbci	r31, 0xFD	; 253
void LCD_writeChar (unsigned char ch)
{
	unsigned char j;
  
	lcd_buffer[cursor_row][cursor_col] = 0x00;
	for(j=0; j<5; j++)
 74a:	9c 01       	movw	r18, r24
 74c:	2f 57       	subi	r18, 0x7F	; 127
 74e:	3d 4f       	sbci	r19, 0xFD	; 253
		lcd_buffer[cursor_row][cursor_col + j] |=  pgm_read_byte(&(smallFont [(ch-32)*5 + j] ));
 750:	94 91       	lpm	r25, Z+
 752:	8c 91       	ld	r24, X
 754:	89 2b       	or	r24, r25
 756:	8d 93       	st	X+, r24
 758:	31 96       	adiw	r30, 0x01	; 1
void LCD_writeChar (unsigned char ch)
{
	unsigned char j;
  
	lcd_buffer[cursor_row][cursor_col] = 0x00;
	for(j=0; j<5; j++)
 75a:	e2 17       	cp	r30, r18
 75c:	f3 07       	cpc	r31, r19
 75e:	c1 f7       	brne	.-16     	; 0x750 <LCD_writeChar+0x4a>
		lcd_buffer[cursor_row][cursor_col + j] |=  pgm_read_byte(&(smallFont [(ch-32)*5 + j] ));

	lcd_buffer[cursor_row][cursor_col + 6] = 0x00;
 760:	84 e5       	ldi	r24, 0x54	; 84
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	9c 01       	movw	r18, r24
 766:	62 9f       	mul	r22, r18
 768:	c0 01       	movw	r24, r0
 76a:	63 9f       	mul	r22, r19
 76c:	90 0d       	add	r25, r0
 76e:	72 9f       	mul	r23, r18
 770:	90 0d       	add	r25, r0
 772:	11 24       	eor	r1, r1
 774:	fc 01       	movw	r30, r24
 776:	ee 5f       	subi	r30, 0xFE	; 254
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	e4 0f       	add	r30, r20
 77c:	f5 1f       	adc	r31, r21
 77e:	16 82       	std	Z+6, r1	; 0x06

	for(j=0; j<7; j++)
		LCD_writeData(lcd_buffer[cursor_row][cursor_col++]);
 780:	ec 01       	movw	r28, r24
	for(j=0; j<5; j++)
		lcd_buffer[cursor_row][cursor_col + j] |=  pgm_read_byte(&(smallFont [(ch-32)*5 + j] ));

	lcd_buffer[cursor_row][cursor_col + 6] = 0x00;

	for(j=0; j<7; j++)
 782:	01 2f       	mov	r16, r17
 784:	09 5f       	subi	r16, 0xF9	; 249
		LCD_writeData(lcd_buffer[cursor_row][cursor_col++]);
 786:	fe 01       	movw	r30, r28
 788:	e1 0f       	add	r30, r17
 78a:	f1 1d       	adc	r31, r1
 78c:	ee 5f       	subi	r30, 0xFE	; 254
 78e:	fe 4f       	sbci	r31, 0xFE	; 254
 790:	80 81       	ld	r24, Z
 792:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_writeData>
 796:	1f 5f       	subi	r17, 0xFF	; 255
	for(j=0; j<5; j++)
		lcd_buffer[cursor_row][cursor_col + j] |=  pgm_read_byte(&(smallFont [(ch-32)*5 + j] ));

	lcd_buffer[cursor_row][cursor_col + 6] = 0x00;

	for(j=0; j<7; j++)
 798:	10 17       	cp	r17, r16
 79a:	a9 f7       	brne	.-22     	; 0x786 <LCD_writeChar+0x80>
 79c:	10 93 01 01 	sts	0x0101, r17
		LCD_writeData(lcd_buffer[cursor_row][cursor_col++]);
} 
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	08 95       	ret

000007aa <LCD_writeChar_megaFont>:
		  in 3310_routines.h as three dimensional array, number[][][])
  Argument(s)  :  ch   -> Character to write.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeChar_megaFont (unsigned char ch)
{
 7aa:	bf 92       	push	r11
 7ac:	cf 92       	push	r12
 7ae:	df 92       	push	r13
 7b0:	ef 92       	push	r14
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
	unsigned char i, j;
   
	if(ch == '.')
 7bc:	8e 32       	cpi	r24, 0x2E	; 46
 7be:	11 f4       	brne	.+4      	; 0x7c4 <LCD_writeChar_megaFont+0x1a>
 7c0:	9a e0       	ldi	r25, 0x0A	; 10
 7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <LCD_writeChar_megaFont+0x2e>
		ch = 10;
	else if (ch == '+')
 7c4:	8b 32       	cpi	r24, 0x2B	; 43
 7c6:	11 f4       	brne	.+4      	; 0x7cc <LCD_writeChar_megaFont+0x22>
 7c8:	9b e0       	ldi	r25, 0x0B	; 11
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <LCD_writeChar_megaFont+0x2e>
		ch = 11;
	else if (ch == '-')
 7cc:	8d 32       	cpi	r24, 0x2D	; 45
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <LCD_writeChar_megaFont+0x2a>
 7d0:	9c e0       	ldi	r25, 0x0C	; 12
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <LCD_writeChar_megaFont+0x2e>
		ch = 12;
	else
		ch = ch & 0x0f;
 7d4:	98 2f       	mov	r25, r24
 7d6:	9f 70       	andi	r25, 0x0F	; 15
 7d8:	80 e3       	ldi	r24, 0x30	; 48
 7da:	98 9f       	mul	r25, r24
 7dc:	70 01       	movw	r14, r0
 7de:	11 24       	eor	r1, r1
 7e0:	8c ea       	ldi	r24, 0xAC	; 172
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	e8 0e       	add	r14, r24
 7e6:	f9 1e       	adc	r15, r25
 7e8:	32 e0       	ldi	r19, 0x02	; 2
 7ea:	c3 2e       	mov	r12, r19
	
	for(i=0;i<3;i++)
	{	
		LCD_gotoXY (4 + char_start, i+2);
 7ec:	24 e5       	ldi	r18, 0x54	; 84
 7ee:	b2 2e       	mov	r11, r18
 7f0:	80 91 a2 03 	lds	r24, 0x03A2
 7f4:	8c 5f       	subi	r24, 0xFC	; 252
 7f6:	6c 2d       	mov	r22, r12
 7f8:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
 7fc:	90 91 01 01 	lds	r25, 0x0101
 800:	80 91 00 01 	lds	r24, 0x0100
 804:	8b 9d       	mul	r24, r11
 806:	e0 01       	movw	r28, r0
 808:	11 24       	eor	r1, r1
 80a:	c9 0f       	add	r28, r25
 80c:	d1 1d       	adc	r29, r1
 80e:	ce 5f       	subi	r28, 0xFE	; 254
 810:	de 4f       	sbci	r29, 0xFE	; 254
 812:	87 01       	movw	r16, r14
 814:	dd 24       	eor	r13, r13
 
		for(j=0; j<16; j++) {
			lcd_buffer[cursor_row][cursor_col + j] |=  pgm_read_byte(&(number[ch][i][j]));
 816:	f8 01       	movw	r30, r16
 818:	84 91       	lpm	r24, Z+
 81a:	98 81       	ld	r25, Y
 81c:	89 2b       	or	r24, r25
 81e:	89 93       	st	Y+, r24
			LCD_writeData(lcd_buffer[cursor_row][cursor_col + j]);
 820:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_writeData>
	
	for(i=0;i<3;i++)
	{	
		LCD_gotoXY (4 + char_start, i+2);
 
		for(j=0; j<16; j++) {
 824:	d3 94       	inc	r13
 826:	0f 5f       	subi	r16, 0xFF	; 255
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	f0 e1       	ldi	r31, 0x10	; 16
 82c:	df 16       	cp	r13, r31
 82e:	99 f7       	brne	.-26     	; 0x816 <LCD_writeChar_megaFont+0x6c>
 830:	c3 94       	inc	r12
 832:	80 e1       	ldi	r24, 0x10	; 16
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	e8 0e       	add	r14, r24
 838:	f9 1e       	adc	r15, r25
	else if (ch == '-')
		ch = 12;
	else
		ch = ch & 0x0f;
	
	for(i=0;i<3;i++)
 83a:	95 e0       	ldi	r25, 0x05	; 5
 83c:	c9 16       	cp	r12, r25
 83e:	c1 f6       	brne	.-80     	; 0x7f0 <LCD_writeChar_megaFont+0x46>
	} 
   
	if(ch == '.') 
		char_start += 5;
	else
		char_start += 12;
 840:	80 91 a2 03 	lds	r24, 0x03A2
 844:	84 5f       	subi	r24, 0xF4	; 244
 846:	80 93 a2 03 	sts	0x03A2, r24
}
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	08 95       	ret

0000085e <LCD_writeString_megaFont>:
  Description  :  Displays a string at current location, in large fonts
  Argument(s)  :  string -> Pointer to ASCII string (stored in RAM)
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeString_megaFont ( char *string )
{
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	ec 01       	movw	r28, r24
    char_start = 0;
 864:	10 92 a2 03 	sts	0x03A2, r1
 868:	03 c0       	rjmp	.+6      	; 0x870 <LCD_writeString_megaFont+0x12>
	
    while ( *string )
        LCD_writeChar_megaFont( *string++ );
 86a:	21 96       	adiw	r28, 0x01	; 1
 86c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_writeChar_megaFont>
--------------------------------------------------------------------------------------------------*/
void LCD_writeString_megaFont ( char *string )
{
    char_start = 0;
	
    while ( *string )
 870:	88 81       	ld	r24, Y
 872:	88 23       	and	r24, r24
 874:	d1 f7       	brne	.-12     	; 0x86a <LCD_writeString_megaFont+0xc>
        LCD_writeChar_megaFont( *string++ );
	
	LCD_gotoXY(char_start+6, 3);
 876:	80 91 a2 03 	lds	r24, 0x03A2
 87a:	8a 5f       	subi	r24, 0xFA	; 250
 87c:	63 e0       	ldi	r22, 0x03	; 3
 87e:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
	//LCD_writeChar('z'+1); 			  //symbol of Degree
	//LCD_writeChar('F');
}
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <LCD_writeString_F>:
  Description  :  Displays a string stored in FLASH, in small fonts (refer to 3310_routines.h)
  Argument(s)  :  string -> Pointer to ASCII string (stored in FLASH)
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeString_F ( const char *string )
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	ec 01       	movw	r28, r24
 88e:	03 c0       	rjmp	.+6      	; 0x896 <LCD_writeString_F+0xe>
    while ( *string )
        LCD_writeChar( *string++ );
 890:	21 96       	adiw	r28, 0x01	; 1
 892:	0e 94 83 03 	call	0x706	; 0x706 <LCD_writeChar>
  Argument(s)  :  string -> Pointer to ASCII string (stored in FLASH)
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_writeString_F ( const char *string )
{
    while ( *string )
 896:	88 81       	ld	r24, Y
 898:	88 23       	and	r24, r24
 89a:	d1 f7       	brne	.-12     	; 0x890 <LCD_writeString_F+0x8>
        LCD_writeChar( *string++ );
}
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <delay_ms>:
  Description  :  1 millisec delay (appx.)
  Argument(s)  :  None.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void delay_ms(int miliSec)  //for 1Mhz clock
{
 8a2:	40 e0       	ldi	r20, 0x00	; 0
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	0b c0       	rjmp	.+22     	; 0x8be <delay_ms+0x1c>
  int i,j;
  
  for(i=0;i<miliSec;i++)
 8a8:	20 e0       	ldi	r18, 0x00	; 0
 8aa:	30 e0       	ldi	r19, 0x00	; 0
    for(j=0;j<100;j++)
	{
	  asm("nop");
 8ac:	00 00       	nop
	  asm("nop");
 8ae:	00 00       	nop
void delay_ms(int miliSec)  //for 1Mhz clock
{
  int i,j;
  
  for(i=0;i<miliSec;i++)
    for(j=0;j<100;j++)
 8b0:	2f 5f       	subi	r18, 0xFF	; 255
 8b2:	3f 4f       	sbci	r19, 0xFF	; 255
 8b4:	24 36       	cpi	r18, 0x64	; 100
 8b6:	31 05       	cpc	r19, r1
 8b8:	c9 f7       	brne	.-14     	; 0x8ac <delay_ms+0xa>
--------------------------------------------------------------------------------------------------*/
void delay_ms(int miliSec)  //for 1Mhz clock
{
  int i,j;
  
  for(i=0;i<miliSec;i++)
 8ba:	4f 5f       	subi	r20, 0xFF	; 255
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	48 17       	cp	r20, r24
 8c0:	59 07       	cpc	r21, r25
 8c2:	94 f3       	brlt	.-28     	; 0x8a8 <delay_ms+0x6>
    for(j=0;j<100;j++)
	{
	  asm("nop");
	  asm("nop");
	}
}
 8c4:	08 95       	ret

000008c6 <LCD_init>:
  Argument(s)  :  None.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/
void LCD_init ( void )
{
		  delay_ms(100);
 8c6:	84 e6       	ldi	r24, 0x64	; 100
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 51 04 	call	0x8a2	; 0x8a2 <delay_ms>
			  
		  CLEAR_SCE_PIN;    //Enable LCD
 8ce:	2a 98       	cbi	0x05, 2	; 5
				
		  CLEAR_RST_PIN;	//reset LCD
 8d0:	2c 9a       	sbi	0x05, 4	; 5
		  delay_ms(100);
 8d2:	84 e6       	ldi	r24, 0x64	; 100
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <delay_ms>
		  SET_RST_PIN;
 8da:	2c 9a       	sbi	0x05, 4	; 5
			  
		  SET_SCE_PIN;	//disable LCD
 8dc:	2a 9a       	sbi	0x05, 2	; 5

		  LCD_writeCommand( 0x21 );  // LCD Extended Commands.
 8de:	81 e2       	ldi	r24, 0x21	; 33
 8e0:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>
		  LCD_writeCommand( 0xE0 );  // Set LCD Vop (Contrast).
 8e4:	80 ee       	ldi	r24, 0xE0	; 224
 8e6:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>
		  LCD_writeCommand( 0x04 );  // Set Temp coefficent.
 8ea:	84 e0       	ldi	r24, 0x04	; 4
 8ec:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>
		  LCD_writeCommand( 0x13 );  // LCD bias mode 1:48.
 8f0:	83 e1       	ldi	r24, 0x13	; 19
 8f2:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>
		  LCD_writeCommand( 0x20 );  // LCD Standard Commands, Horizontal addressing mode.
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>
		  LCD_writeCommand( 0x0c );  // LCD in normal mode.
 8fc:	8c e0       	ldi	r24, 0x0C	; 12
 8fe:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_writeCommand>

		  LCD_clear();
 902:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_clear>
}
 906:	08 95       	ret

00000908 <LCD_drawBorder>:
  Description  :  Draws rectangle border on the display
  Argument(s)  :  None
  Return value :  None
--------------------------------------------------------------------------------------------------*/
void LCD_drawBorder (void )
{
 908:	ff 92       	push	r15
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i, j;  
	    
	for(i=0; i<7; i++)
	{
		LCD_gotoXY (0,i);
 914:	44 e5       	ldi	r20, 0x54	; 84
 916:	f4 2e       	mov	r15, r20
			
		for(j=0; j<84; j++)
		{
			if(j == 0 || j == 83) {
				lcd_buffer[cursor_row][cursor_col + j] |= 0xff;
 918:	0f ef       	ldi	r16, 0xFF	; 255
{
	unsigned char i, j;  
	    
	for(i=0; i<7; i++)
	{
		LCD_gotoXY (0,i);
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	61 2f       	mov	r22, r17
 91e:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_gotoXY>
 922:	90 91 01 01 	lds	r25, 0x0101
 926:	80 91 00 01 	lds	r24, 0x0100
 92a:	8f 9d       	mul	r24, r15
 92c:	f0 01       	movw	r30, r0
 92e:	11 24       	eor	r1, r1
 930:	e9 0f       	add	r30, r25
 932:	f1 1d       	adc	r31, r1
 934:	ee 5f       	subi	r30, 0xFE	; 254
 936:	fe 4f       	sbci	r31, 0xFE	; 254
 938:	ef 01       	movw	r28, r30
 93a:	df 01       	movw	r26, r30
 93c:	90 e0       	ldi	r25, 0x00	; 0
			
		for(j=0; j<84; j++)
		{
			if(j == 0 || j == 83) {
 93e:	99 23       	and	r25, r25
 940:	11 f0       	breq	.+4      	; 0x946 <LCD_drawBorder+0x3e>
 942:	93 35       	cpi	r25, 0x53	; 83
 944:	11 f4       	brne	.+4      	; 0x94a <LCD_drawBorder+0x42>
				lcd_buffer[cursor_row][cursor_col + j] |= 0xff;
 946:	00 83       	st	Z, r16
 948:	0b c0       	rjmp	.+22     	; 0x960 <LCD_drawBorder+0x58>
			} else if(i == 0) {
 94a:	11 23       	and	r17, r17
 94c:	21 f4       	brne	.+8      	; 0x956 <LCD_drawBorder+0x4e>
				lcd_buffer[cursor_row][cursor_col + j] |= 0x08;
 94e:	88 81       	ld	r24, Y
 950:	88 60       	ori	r24, 0x08	; 8
 952:	88 83       	st	Y, r24
 954:	05 c0       	rjmp	.+10     	; 0x960 <LCD_drawBorder+0x58>
				//LCD_writeData (0x08);		// row 0 is having only 5 bits (not 8)
			} else if(i == 6) {
 956:	16 30       	cpi	r17, 0x06	; 6
 958:	19 f4       	brne	.+6      	; 0x960 <LCD_drawBorder+0x58>
				lcd_buffer[cursor_row][cursor_col + j] |= 0x04;
 95a:	8c 91       	ld	r24, X
 95c:	84 60       	ori	r24, 0x04	; 4
 95e:	8c 93       	st	X, r24
	    
	for(i=0; i<7; i++)
	{
		LCD_gotoXY (0,i);
			
		for(j=0; j<84; j++)
 960:	9f 5f       	subi	r25, 0xFF	; 255
 962:	31 96       	adiw	r30, 0x01	; 1
 964:	21 96       	adiw	r28, 0x01	; 1
 966:	11 96       	adiw	r26, 0x01	; 1
 968:	94 35       	cpi	r25, 0x54	; 84
 96a:	49 f7       	brne	.-46     	; 0x93e <LCD_drawBorder+0x36>
--------------------------------------------------------------------------------------------------*/
void LCD_drawBorder (void )
{
	unsigned char i, j;  
	    
	for(i=0; i<7; i++)
 96c:	1f 5f       	subi	r17, 0xFF	; 255
 96e:	17 30       	cpi	r17, 0x07	; 7
 970:	a1 f6       	brne	.-88     	; 0x91a <LCD_drawBorder+0x12>
				//LCD_writeData (0x00);
			}
		}
	}

	LCD_update();
 972:	0e 94 02 03 	call	0x604	; 0x604 <LCD_update>
}	
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	ff 90       	pop	r15
 980:	08 95       	ret

00000982 <_exit>:
 982:	f8 94       	cli

00000984 <__stop_program>:
 984:	ff cf       	rjmp	.-2      	; 0x984 <__stop_program>
